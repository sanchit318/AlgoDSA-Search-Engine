b'you given string consist letter \'a\' \'b\'. in singl step remov one palindrom subsequ s.\nreturn minimum number make empty.\na gener delet charact without chang order. note necessarili need contiguous.\na call read backward well forward.\n\xc2\xa0\nexampl 1:\ninput: = "ababa"\noutput: 1\nexplanation: alreadi palindrome, entireti step.\n\nexampl 2:\ninput: "abb"\noutput: 2\nexplanation: "abb" -> "bb" "". \nremov "a" "bb".\n\nexampl 3:\ninput: "baabb"\noutput: "baabb" "b" "baab" "b".\n\n\xc2\xa0\nconstraints:\n\n1 <= s.length 1000\ns[i] either \'b\'.\n\n' b'given array integ nums\xc2\xa0and target, return indic two add target.\ny may assum input would exactli solution, use element twice.\ny answer order.\n\xc2\xa0\nexampl num [2,7,11,15], target 9\noutput: [0,1]\nexplanation: becaus nums[0] + nums[1] == 9, [0, 1].\n\nexampl [3,2,4], 6\noutput: [1,2]\n\nexampl [3,3], [0,1]\n\n\xc2\xa0\nconstraints:\n\n2 nums.length 104\n-109 nums[i] 109\n-109 109\nonli valid exists.\n\n\xc2\xa0\nfollow-up:\xc2\xa0can come algorithm less than\xc2\xa0o(n2)\xc2\xa0tim complexity?' non-empti link list repres non-neg integers. the digit store revers order, node contain digit. sum\xc2\xa0a list.\nyou lead zero, except 0 itself.\n\xc2\xa0\nexampl 1:\n\ninput: l1 [2,4,3], l2 [5,6,4]\noutput: [7,0,8]\nexplanation: 342 465 807.\n\nexampl [0], [0]\noutput: [0]\n\nexampl [9,9,9,9,9,9,9], [9,9,9,9]\noutput: [8,9,9,9,0,0,0,1]\n\n\xc2\xa0\nconstraints:\n\nth rang [1, 100].\n0 node.v 9\nit guarante zeros.\n\n' s, find length longest substr repeat characters.\n\xc2\xa0\nexampl "abcabcbb"\noutput: 3\nexplanation: "abc", 3.\n\nexampl "bbbbb"\noutput: "b", 1.\n\nexampl "pwwkew"\noutput: "wke", 3.\nnotic must substring, "pwke" substring.\n\n\xc2\xa0\nconstraints:\n\n0 5 * 104\n english letters, digits, symbol spaces.\n\n' sort nums1 nums2 size n respectively, median arrays.\nth overal run time complex o(log (m+n)).\n\xc2\xa0\nexampl [1,3], [2]\noutput: 2.00000\nexplanation: merg [1,2,3] 2.\n\nexampl [1,2], [3,4]\noutput: 2.50000\nexplanation: [1,2,3,4] (2 3) / 2 2.5.\n\n\xc2\xa0\nconstraints:\n\nnums1.length m\nnums2.length n\n0 1000\n0 1000\n1 2000\n-106 nums1[i], nums2[i] 106\n\n' s.\n\xc2\xa0\nexampl "babad"\noutput: "bab"\nexplanation: "aba" also answer.\n\nexampl "cbbd"\noutput: "bb"\n\n\xc2\xa0\nconstraints:\n\n1 1000\n letters.\n\n' b'the "paypalishiring" written zigzag pattern row like this: (you want display fix font better legibility)\np a h n\na p l s i g\ni r\n\nand line line: "pahnaplsiigyir"\nwrit code take convers rows:\nstr convert(str int numrows);\n\n\xc2\xa0\nexampl "paypalishiring", numrow 3\noutput: "pahnaplsiigyir"\n\nexampl 4\noutput: "pinalsigyahrpi"\nexplanation:\np r\np i\n\nexampl "a", 1\noutput: "a"\n\n\xc2\xa0\nconstraints:\n\n1 (lower-cas upper-case), \',\' \'.\'.\n1 1000\n\n' sign 32-bit x, x reversed. if caus valu go outsid [-231, 231 - 1], 0.\nassum environ allow 64-bit (sign unsigned).\n\xc2\xa0\nexampl 123\noutput: 321\n\nexampl -123\noutput: -321\n\nexampl 120\noutput: 21\n\n\xc2\xa0\nconstraints:\n\n-231 1\n\n' b'implement myatoi(str s) function, convert (similar c/c++\' atoi function).\nth follows:\n\nread ignor whitespace.\ncheck next (if end string) \'-\' \'+\'. either. thi determin final result neg posit respectively. neither present.\nread non-digit reached. rest ignored.\nconvert (i.e. "123" 123, "0032" 32). read, 0. necessari (from 2).\nif clamp remain range. specifically, -231 -231, greater 1 1.\nreturn result.\n\nnote:\n\nonli space \' consid whitespac character.\ndo digits.\n\n\xc2\xa0\nexampl "42"\noutput: 42\nexplanation: underlin in, caret current reader position.\nstep 1: "42" (no whitespace)\n ^\nstep 2: \'+\')\n 3: ("42" in)\n ^\nthe pars 42.\nsinc 42 42.\n\nexampl " -42"\noutput: -42\nexplanation:\nstep -42" (lead ignored)\n (\'-\' negative)\n -42.\nsinc -42 -42.\n\nexampl "4193 words"\noutput: 4193\nexplanation:\nstep words" ("4193" in; stop non-digit)\n 4193.\nsinc 4193 4193.\n\n\xc2\xa0\nconstraints:\n\n0 200\n (0-9), \', \'+\', \'-\', \'.\'.\n\n' true integer.\nan forward.\n\nfor example, 121 123 not.\n\n\xc2\xa0\nexampl 121\noutput: true\nexplanation: left right left.\n\nexampl -121\noutput: false\nexplanation: from right, -121. left, becom 121-. therefor palindrome.\n\nexampl 10\noutput: 01 left. palindrome.\n\n\xc2\xa0\nconstraints:\n\n-231\xc2\xa0<= 231\xc2\xa0- 1\n\n\xc2\xa0\nfollow up: could solv string?' s\xc2\xa0and p, implement regular express match support \'.\' \'*\' where:\n\n\'.\' character.\xe2\x80\x8b\xe2\x80\x8b\xe2\x80\x8b\xe2\x80\x8b\n\'*\' zero preced element.\n\nth cover entir (not partial).\n\xc2\xa0\nexampl "aa", "a"\noutput: "aa".\n\nexampl "a*"\noutput: mean element, \'a\'. therefore, once, "ab", ".*"\noutput: ".*" "zero (*) (.)".\n\n\xc2\xa0\nconstraints:\n\n1 s.length\xc2\xa0<= 20\n1 p.length\xc2\xa0<= 30\n lowercas letters.\np \'.\', and\xc2\xa0\'*\'.\nit appear \'*\', previou match.\n\n' height n. there vertic drawn endpoint ith (i, 0) height[i]).\nfind togeth x-axi form container, water.\nreturn maximum amount water store.\nnotic slant container.\n\xc2\xa0\nexampl [1,8,6,2,5,4,8,3,7]\noutput: 49\nexplanation: [1,8,6,2,5,4,8,3,7]. case, max area (blue section) 49.\n\nexampl [1,1]\noutput: 1\n\n\xc2\xa0\nconstraints:\n\nn height.length\n2 105\n0 height[i] 104\n\n' b'roman numer seven differ symbols:\xc2\xa0i, v, l, c, d m.\nsymbol value\ni 1\nv 5\nx 10\nl 50\nc 100\nd 500\nm 1000\nfor example,\xc2\xa02 ii\xc2\xa0in roman numeral, one\' ad together. 12 as\xc2\xa0xii, simpli ii. 27 xxvii, xx v ii.\nroman usual largest smallest right. however, four iiii. instead, iv. five subtract four. principl appli nine, ix. six instanc used:\n\ni place (5) (10) 4 9.\xc2\xa0\nx (50) c (100) 40 90.\xc2\xa0\nc (500) m (1000) 400 900.\n\ngiven integer, numeral.\n\xc2\xa0\nexampl "iii"\nexplanation: 3 ones.\n\nexampl 58\noutput: "lviii"\nexplanation: 50, 5, iii 1994\noutput: "mcmxciv"\nexplanation: 1000, cm 900, xc 90 iv 4.\n\n\xc2\xa0\nconstraints:\n\n1 3999\n\n' integer.\n\xc2\xa0\nexampl "iii"\noutput: "lviii"\noutput: 58\nexplanation: v= "mcmxciv"\noutput: 1994\nexplanation: 15\n only\xc2\xa0th (\'i\', \'v\', \'x\', \'l\', \'c\', \'d\', \'m\').\nit guaranteed\xc2\xa0that 3999].\n\n' b'write function common prefix amongst strings.\nif prefix, empti "".\n\xc2\xa0\nexampl str ["flower","flow","flight"]\noutput: "fl"\n\nexampl ["dog","racecar","car"]\noutput: ""\nexplanation: among strings.\n\n\xc2\xa0\nconstraints:\n\n1 strs.length 200\n0 strs[i].length 200\nstrs[i] lower-cas nums, triplet [nums[i], nums[j], nums[k]] != j, k, j nums[j] nums[k] 0.\nnotic solut set duplic triplets.\n\xc2\xa0\nexampl [-1,0,1,2,-1,-4]\noutput: [[-1,-1,2],[-1,0,1]]\nexampl []\noutput: []\nexampl []\n\n\xc2\xa0\nconstraints:\n\n0 3000\n-105 105\n\n' three sum closest target.\nreturn integers.\ny solution.\n\xc2\xa0\nexampl [-1,2,1,-4], 2. (-1 2).\n\nexampl [0,0,0], 0\n\n\xc2\xa0\nconstraints:\n\n3 1000\n-1000 1000\n-104 2-9 inclusive, possibl combin represent. order.\na map (just telephon buttons) below. letters.\n\n\xc2\xa0\nexampl "23"\noutput: ["ad","ae","af","bd","be","bf","cd","ce","cf"]\n\nexampl ""\noutput: []\n\nexampl "2"\noutput: ["a","b","c"]\n\n\xc2\xa0\nconstraints:\n\n0 digits.length 4\ndigits[i] [\'2\', \'9\'].\n\n' integers, uniqu quadruplet [nums[a], nums[b], nums[c], nums[d]] that:\n\n0 a, b, d\xc2\xa0< n\na, distinct.\nnums[a] nums[b] nums[c] nums[d] target\n\ny [1,0,-1,0,-2,2], 0\noutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\nexampl [2,2,2,2,2], 8\noutput: [[2,2,2,2]]\n\n\xc2\xa0\nconstraints:\n\n1 200\n-109 109\n\n' head list, nth head.\n\xc2\xa0\nexampl [1,2,3,4,5], 2\noutput: [1,2,3,5]\n\nexampl [1], [1]\n\n\xc2\xa0\nconstraints:\n\nth sz.\n1 sz 30\n0 100\n1 sz\n\n\xc2\xa0\nfollow pass?\n' \'(\', \')\', \'{\', \'}\', \'[\' \']\', valid.\nan if:\n\nopen bracket close type brackets.\nopen correct order.\n\n\xc2\xa0\nexampl "()"\noutput: true\n\nexampl "()[]{}"\noutput: "(]"\noutput: false\n\n\xc2\xa0\nconstraints:\n\n1 parenthes \'()[]{}\'.\n\n' list1 list2.\nmerg list. made splice first lists.\nreturn list.\n\xc2\xa0\nexampl [1,2,4], list2 [1,3,4]\noutput: [1,1,2,3,4,4]\n\nexampl [], [0]\n\n\xc2\xa0\nconstraints:\n\nth 50].\n-100 100\nboth non-decreas order.\n\n' pair parentheses, write well-form parentheses.\n\xc2\xa0\nexampl ["((()))","(()())","(())()","()(())","()()()"]\nexampl ["()"]\n\n\xc2\xa0\nconstraints:\n\n1 8\n\n' k linked-list lists, ascend order.\nmerg it.\n\xc2\xa0\nexampl [[1,4,5],[1,3,4],[2,6]]\noutput: [1,1,2,3,4,4,5,6]\nexplanation: are:\n[\n 1->4->5,\n 1->3->4,\n 2->6\n]\nmerg list:\n1->1->2->3->4->4->5->6\n\nexampl [[]]\noutput: []\n\n\xc2\xa0\nconstraints:\n\nk lists.length\n0 104\n0 lists[i].length 500\n-104 lists[i][j] 104\nlists[i] order.\nth exceed 104.\n\n' b"given a\xc2\xa0link swap everi adjac head. you problem without\xc2\xa0modifi list' (i.e., changed.)\n\xc2\xa0\nexampl [1,2,3,4]\noutput: [2,1,4,3]\n\nexampl [1]\noutput: the\xc2\xa0list\xc2\xa0i 100\n\n" time, modifi list.\nk equal multipl left-out nodes, end, is.\nyou alter changed.\n\xc2\xa0\nexampl [2,1,4,3,5]\n\nexampl 2:\n\ninput: [3,2,1,4,5]\n\n\xc2\xa0\nconstraints:\n\nth n.\n1 5000\n0 1000\n\n\xc2\xa0\nfollow-up: can o(1) extra memori space?\n" in-plac once. rel order kept same.\nsinc imposs languages, instead part nums. more formally, duplicates, nums\xc2\xa0should hold result. it matter leav beyond first\xc2\xa0k\xc2\xa0elements.\nreturn slot nums.\ndo alloc anoth array. memory.\ncustom judge:\nth judg test follow code:\nint[] [...]; // array\nint[] expectednum expect length\n\nint removeduplicates(nums); implementation\n\nassert expectednums.length;\nfor (int 0; < k; i++) {\n assert expectednums[i];\n}\n\nif pass, accepted.\n\xc2\xa0\nexampl [1,1,2]\noutput: 2, [1,2,_]\nexplanation: your respectively.\nit (henc underscores).\n\nexampl [0,0,1,1,1,2,2,3,3,4]\noutput: [0,1,2,3,4,_,_,_,_,_]\nexplanation: 0, 1, 3, underscores).\n\n\xc2\xa0\nconstraints:\n\n1 104\n-100 100\nnum val, occurr val in-place. changed.\nsinc elements.\nreturn array\nint ...; remove\nint[] length.\n val.\n\nint removeelement(nums, val); expectednums.length;\nsort(nums, k); nums\nfor actuallength; [3,2,2,3], [2,2,_,_]\nexplanation: 2.\nit [0,1,2,2,3,0,4,2], [0,1,4,0,3,_,_,_]\nexplanation: 4.\nnote order.\nit underscores).\n\n\xc2\xa0\nconstraints:\n\n0 100\n0 50\n0 100\n\n' strstr().\ngiven needl haystack, index -1 haystack.\nclarification:\nwhat string? great question ask interview.\nfor purpos problem, string. c\' strstr() java\' indexof().\n\xc2\xa0\nexampl haystack "hello", "ll"\noutput: 2\n\nexampl "aaaaa", "bba"\noutput: -1\n\n\xc2\xa0\nconstraints:\n\n1 haystack.length, needle.length 104\nhaystack characters.\n\n' dividend divisor, divid multiplication, division, mod operator.\nth divis truncat toward lose fraction part. for 8.345 8, -2.7335 -2.\nreturn quotient divisor.\nnote: deal within range: [\xe2\x88\x92231, \xe2\x88\x92 1]. strictli -231.\n\xc2\xa0\nexampl 10, divisor 10/3 3.33333.. 7, -3\noutput: -2\nexplanation: 7/-3 -2.33333.. -2.\n\n\xc2\xa0\nconstraints:\n\n-231 dividend, 1\ndivisor 0\n\n' word length. return\xc2\xa0al start substring(s) s\xc2\xa0that concaten order,\xc2\xa0and interven characters.\ny "barfoothefoobarman", ["foo","bar"]\noutput: [0,9]\nexplanation: 9 "barfoo" "foobar" respectively.\nth output matter, [9,0] fine too.\n\nexampl "wordgoodgoodgoodbestword", ["word","good","best","word"]\noutput: "barfoofoobarthefoobarman", ["bar","foo","the"]\noutput: [6,9,12]\n\n\xc2\xa0\nconstraints:\n\n1 letters.\n1 words.length 5000\n1 words[i].length 30\nwords[i]\xc2\xa0consist b'a permut arrang member sequenc linear order.\n\nfor arr [1,2,3], arr: [1,3,2], [3,1,2], [2,3,1].\n\nthe lexicograph integer. accord container. possible, rearrang lowest order).\n\nfor [1,3,2].\nsimilarly, [2,3,1] [3,1,2].\nwhile [3,2,1] larger rearrangement.\n\ngiven nums.\nth replac constant memory.\n\xc2\xa0\nexampl [1,2,3]\noutput: [1,3,2]\n\nexampl [3,2,1]\noutput: [1,2,3]\n\nexampl [1,1,5]\noutput: [1,5,1]\n\n\xc2\xa0\nconstraints:\n\n1 \'(\' (well-formed) substring.\n\xc2\xa0\nexampl "(()"\noutput: "()".\n\nexampl ")()())"\noutput: 4\nexplanation: "()()".\n\nexampl 0\n\n\xc2\xa0\nconstraints:\n\n0 104\ns[i] \')\'.\n\n' b'there (with distinct values).\nprior pass rotat unknown pivot (1 nums.length) [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], nums[k-1]] (0-indexed). [0,1,2,4,5,6,7] might [4,5,6,7,0,1,2].\ngiven nums.\nyou n) runtim complexity.\n\xc2\xa0\nexampl [4,5,6,7,0,1,2], 4\nexampl -1\nexampl 5000\n-104 104\nall unique.\nnum rotated.\n-104 value.\nif found array, [-1, -1].\nyou must\xc2\xa0writ with\xc2\xa0o(log [5,7,7,8,8,10], [3,4]\nexampl [-1,-1]\nexampl [-1,-1]\n\n\xc2\xa0\nconstraints:\n\n0 105\n-109\xc2\xa0<= nums[i]\xc2\xa0<= 109\nnum array.\n-109\xc2\xa0<= target\xc2\xa0<= value, found. not, insert order.\ny [1,3,5,6], 5\noutput: 1\n\nexampl 7\noutput: 4\n\n\xc2\xa0\nconstraints:\n\n1 104\n-104 104\nnum order.\n-104 b'determin a\xc2\xa09 sudoku board\xc2\xa0i valid.\xc2\xa0onli fill cell validated\xc2\xa0accord rules:\n\neach row\xc2\xa0must the\xc2\xa0digits\xc2\xa01-9 repetition.\neach column digits\xc2\xa01-9\xc2\xa0without nine\xc2\xa03 sub-box grid repetition.\n\nnote:\n\na board (partial filled) solvable.\nonli mentioned\xc2\xa0rules.\n\n\xc2\xa0\nexampl \n[["5","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\noutput: \n[["8","3",".",".","7",".",".",".","."]\n,["6",".",".","1","9","5",".",".","."]\n,[".","9","8",".",".",".",".","6","."]\n,["8",".",".",".","6",".",".",".","3"]\n,["4",".",".","8",".","3",".",".","1"]\n,["7",".",".",".","2",".",".",".","6"]\n,[".","6",".",".",".",".","2","8","."]\n,[".",".",".","4","1","9",".",".","5"]\n,[".",".",".",".","8",".",".","7","9"]]\noutput: same exampl top corner 8. sinc 8\' 3x3 sub-box, invalid.\n\n\xc2\xa0\nconstraints:\n\nboard.length 9\nboard[i].length 9\nboard[i][j] 1-9 program puzzl cells.\na satisfi occur row.\neach column.\neach grid.\n\nth cells.\n\xc2\xa0\nexampl [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]\noutput: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]\nexplanation:\xc2\xa0th shown below:\n\n\n\n\xc2\xa0\nconstraints:\n\nboard.length \'.\'.\nit solution.\n\n' count-and-say defin recurs formula:\n\ncountandsay(1) "1"\ncountandsay(n) way "say" countandsay(n-1), string.\n\nto string, split minim then say finally, said digit.\nfor "3322251":\n\ngiven n, term sequence.\n\xc2\xa0\nexampl "1"\nexplanation: base case.\n\nexampl "1211"\nexplanation:\ncountandsay(1) "1"\ncountandsay(2) "1" "11"\ncountandsay(3) "11" 1\' "21"\ncountandsay(4) "21" "12" "1211"\n\n\xc2\xa0\nconstraints:\n\n1 30\n\n' candid chosen target. unlimit times. frequenc least different.\nit 150 input.\n\xc2\xa0\nexampl [2,3,6,7], [[2,2,3],[7]]\nexplanation:\n2 candidates, 7. times.\n7 candidate, 7 7.\nthese combinations.\n\nexampl [2,3,5], [[2,2,2,2],[2,3,3],[3,5]]\n\nexampl [2], []\n\n\xc2\xa0\nconstraints:\n\n1 candidates.length 30\n1 candidates[i] 200\nall distinct.\n1 500\n\n' collect (candidates) (target), candidates\xc2\xa0wher target.\neach candidates\xc2\xa0may combination.\nnote:\xc2\xa0th combinations.\n\xc2\xa0\nexampl [10,1,2,7,6,1,5], \n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]\n\nexampl [2,5,2,1,2], \n[\n[1,2,2],\n[5]\n]\n\n\xc2\xa0\nconstraints:\n\n1 <=\xc2\xa0candidates.length <=\xc2\xa0candidates[i] 50\n1 unsort miss integer.\ny o(n) space.\n\xc2\xa0\nexampl [1,2,0]\noutput: 3\nexampl [3,4,-1,1]\noutput: 2\nexampl [7,8,9,11,12]\noutput: 1\n\n\xc2\xa0\nconstraints:\n\n1 105\n-231 elev width bar comput much trap raining.\n\xc2\xa0\nexampl [0,1,0,2,1,0,1,3,2,1,2,1]\noutput: 6\nexplanation: (black [0,1,0,2,1,0,1,3,2,1,2,1]. 6 unit rain trapped.\n\nexampl [4,2,0,3,2,5]\noutput: 9\n\n\xc2\xa0\nconstraints:\n\nn height.length\n1 num1 num2 strings, product num2, string.\nnote:\xc2\xa0y built-in biginteg librari directly.\n\xc2\xa0\nexampl "2", "3"\noutput: "6"\nexampl "123", "456"\noutput: "56088"\n\n\xc2\xa0\nconstraints:\n\n1 num1.length, num2.length 200\nnum1 only.\nboth num2\xc2\xa0do itself.\n\n' (s) (p), wildcard \'?\' where:\n\n\'?\' character.\n\'*\' (includ sequence).\n\nth "*"\noutput: true\nexplanation:\xc2\xa0\'*\' sequence.\n\nexampl "cb", "?a"\noutput: false\nexplanation:\xc2\xa0\'?\' second \'a\', \'b\'.\n\n\xc2\xa0\nconstraints:\n\n0 s.length, p.length 2000\n \'*\'.\n\n' initi array.\neach jump position.\nyour goal reach last jumps.\nyou alway index.\n\xc2\xa0\nexampl [2,3,1,1,4]\noutput: index.\n\nexampl [2,3,0,1,4]\noutput: 2\n\n\xc2\xa0\nconstraints:\n\n1 permutations. [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nexampl [0,1]\noutput: [[0,1],[1,0]]\nexampl [[1]]\n\n\xc2\xa0\nconstraints:\n\n1 6\n-10 10\nall unique.\n\n' numbers, nums,\xc2\xa0that [1,1,2]\noutput:\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n\nexampl [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\n\xc2\xa0\nconstraints:\n\n1 8\n-10 10\n\n' 2d matrix image, imag degre (clockwise).\ny in-place, directly. do not rotation.\n\xc2\xa0\nexampl [[1,2,3],[4,5,6],[7,8,9]]\noutput: [[7,4,1],[8,5,2],[9,6,3]]\n\nexampl [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\noutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n\n\xc2\xa0\nconstraints:\n\nn matrix.length matrix[i].length\n1 20\n-1000 matrix[i][j] strs, group anagram order.\nan phrase phrase, typic origin once.\n\xc2\xa0\nexampl ["eat","tea","tan","ate","nat","bat"]\noutput: [["bat"],["nat","tan"],["ate","eat","tea"]]\nexampl [""]\noutput: [[""]]\nexampl ["a"]\noutput: [["a"]]\n\n\xc2\xa0\nconstraints:\n\n1 100\nstrs[i] pow(x, n), calcul rais power xn).\n\xc2\xa0\nexampl 2.00000, 1024.00000\n\nexampl 2.10000, 9.26100\n\nexampl -2\noutput: 0.25000\nexplanation: 2-2 1/22 1/4 0.25\n\n\xc2\xa0\nconstraints:\n\n-100.0 100.0\n-231 231-1\n-104 xn n-queen queen chessboard attack other.\ngiven puzzle. order.\neach configur n-queens\' placement, \'q\' space, respectively.\n\xc2\xa0\nexampl [[".q..","...q","q...","..q."],["..q.","q...","...q",".q.."]]\nexplanation: exist 4-queen above\n\nexampl [["q"]]\n\n\xc2\xa0\nconstraints:\n\n1 9\n\n' the\xc2\xa0n-queen puzzle.\n\xc2\xa0\nexampl shown.\n\nexampl contigu subarray (contain number) sum.\na array.\n\xc2\xa0\nexampl [-2,1,-3,4,-1,2,1,-5,4]\noutput: [4,-1,2,1] 6.\n\nexampl [5,4,-1,7,8]\noutput: 23\n\n\xc2\xa0\nconstraints:\n\n1 105\n-104 104\n\n\xc2\xa0\nfollow figur tri conquer approach, subtle.\n' matrix, spiral [1,2,3,6,9,8,7,4,5]\n\nexampl [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\noutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n\xc2\xa0\nconstraints:\n\nm matrix.length\nn m, 10\n-100 b"you array' index, position.\nreturn fals otherwise.\n\xc2\xa0\nexampl [3,2,1,0,4]\noutput: arriv what. index.\n\n\xc2\xa0\nconstraints:\n\n1 105\n\n" array\xc2\xa0of intervals\xc2\xa0wher intervals[i] [starti, endi], overlap intervals, non-overlap interv [[1,3],[2,6],[8,10],[15,18]]\noutput: [[1,6],[8,10],[15,18]]\nexplanation: [1,3] [2,6] overlap, [1,6].\n\nexampl [[1,4],[4,5]]\noutput: [[1,5]]\nexplanation: [1,4] [4,5] overlapping.\n\n\xc2\xa0\nconstraints:\n\n1 intervals.length 104\nintervals[i].length 2\n0 starti endi endi] starti. newinterv [start, end] interval.\ninsert still (merg necessary).\nreturn insertion.\n\xc2\xa0\nexampl [[1,3],[6,9]], [2,5]\noutput: [[1,5],[6,9]]\n\nexampl [[1,2],[3,5],[6,7],[8,10],[12,16]], [4,8]\noutput: [[1,2],[3,10],[12,16]]\nexplanation: new [4,8] [3,5],[6,7],[8,10].\n\n\xc2\xa0\nconstraints:\n\n0 105\ninterv order.\nnewinterval.length spaces, string.\na maxim non-spac only.\n\xc2\xa0\nexampl "hello world"\noutput: 5\nexplanation: "world" 5.\n\nexampl fli moon "\noutput: "moon" 4.\n\nexampl "luffi joyboy"\noutput: "joyboy" 6.\n\n\xc2\xa0\nconstraints:\n\n1 \'.\nthere s.\n\n' n2 [[1,2,3],[8,9,4],[7,6,5]]\n\nexampl 20\n\n' ...,\xc2\xa0n] total n! permutations.\nbi label get 3:\n\n"123"\n"132"\n"213"\n"231"\n"312"\n"321"\n\ngiven kth "213"\nexampl 4, "2314"\nexampl "123"\n\n\xc2\xa0\nconstraints:\n\n1 9\n1 n!\n\n' linked\xc2\xa0list, places.\n\xc2\xa0\nexampl [4,5,1,2,3]\n\nexampl [0,1,2], [2,0,1]\n\n\xc2\xa0\nconstraints:\n\nth 500].\n-100 robot grid. locat top-left grid[0][0]). move bottom-right grid[m 1][n 1]). point time.\ngiven path corner.\nth case 109.\n\xc2\xa0\nexampl 28\n\nexampl corner, corner:\n1. down down\n2. right\n3. down\n\n\xc2\xa0\nconstraints:\n\n1 grid[m-1][n-1]). time.\nan obstacl mark respect cannot includ squar obstacle.\nreturn testcas obstaclegrid [[0,0,0],[0,1,0],[0,0,0]]\noutput: middl above.\nther right\n\nexampl [[0,1],[0,0]]\noutput: 1\n\n\xc2\xa0\nconstraints:\n\nm obstaclegrid.length\nn obstaclegrid[i].length\n1 100\nobstaclegrid[i][j] 1.\n\n' bottom along path.\nnote: time.\n\xc2\xa0\nexampl [[1,3,1],[1,5,1],[4,2,1]]\noutput: 7\nexplanation: \xe2\x86\x92 sum.\n\nexampl [[1,2,3],[4,5,6]]\noutput: 12\n\n\xc2\xa0\nconstraints:\n\nm grid.length\nn grid[i].length\n1 grid[i][j] compon (in order):\n\na decim integer.\n(optional) an \'e\' \'e\', integer.\n\na order):\n\n(optional) (either \'+\' \'-\').\none formats:\n\t\non dot \'.\'.\none digits.\na digits.\n\n\n\nan digits.\n\nfor numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90e3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].\ngiven number.\n\xc2\xa0\nexampl "0"\noutput: "e"\noutput: false\n\nexampl "."\noutput: 20\n (both uppercas lowercase), plu minu larg digits[i] signific left-to-right 0's.\nincrement digits.\n\xc2\xa0\nexampl [1,2,4]\nexplanation: 123.\nincrement give 124.\nthus, [1,2,4].\n\nexampl [4,3,2,1]\noutput: [4,3,2,2]\nexplanation: 4321.\nincrement 4321 4322.\nthus, [4,3,2,2].\n\nexampl [9]\noutput: [1,0]\nexplanation: 9.\nincrement 10.\nthus, [1,0].\n\n\xc2\xa0\nconstraints:\n\n1 9\ndigit 0's.\n\n" binari string.\n\xc2\xa0\nexampl "11", b "1"\noutput: "100"\nexampl "1010", "1011"\noutput: "10101"\n\n\xc2\xa0\nconstraints:\n\n1 a.length, b.length 104\na consist\xc2\xa0onli \'0\' \'1\' characters.\neach maxwidth, format text maxwidth fulli (left right) justified.\ny pack greedi approach; is, mani line. pad characters.\nextra distribut evenli possible. words, assign right.\nfor text, left-justifi words.\nnote:\n\na only.\neach word\' maxwidth.\nth word.\n\n\xc2\xa0\nexampl ["this", "is", "an", "example", "of", "text", "justification."], 16\noutput:\n[\n\xc2\xa0 \xc2\xa0"thi \xc2\xa0 \xc2\xa0i \xc2\xa0an",\n\xc2\xa0 \xc2\xa0"exampl \xc2\xa0of text",\n\xc2\xa0 \xc2\xa0"justification. \xc2\xa0"\n]\nexampl ["what","must","be","acknowledgment","shall","be"], "what be",\n\xc2\xa0 "acknowledg \xc2\xa0",\n\xc2\xa0 "shall \xc2\xa0"\n]\nexplanation: be", fully-justified.\nnot becas word.\nexampl ["science","is","what","we","understand","well","enough","to","explain","to","a","computer.","art","is","everything","else","we","do"], 20\noutput:\n[\n\xc2\xa0 "scienc \xc2\xa0what we",\n "understand \xc2\xa0well",\n\xc2\xa0 "enough explain to",\n\xc2\xa0 "a \xc2\xa0computer. \xc2\xa0art is",\n\xc2\xa0 "everyth \xc2\xa0els \xc2\xa0we",\n\xc2\xa0 "do \xc2\xa0"\n]\n\xc2\xa0\nconstraints:\n\n1 300\n1 20\nwords[i] symbols.\n1 100\nwords[i].length maxwidth\n\n' x,\xc2\xa0comput root x.\nsinc type\xc2\xa0i truncated, result\xc2\xa0i returned.\nnote:\xc2\xa0y expon operator, 0.5) or\xc2\xa0x ** 0.5.\n\xc2\xa0\nexampl 8 2.82842..., returned.\n\xc2\xa0\nconstraints:\n\n0 climb staircase. top.\neach steps. top?\n\xc2\xa0\nexampl top.\n1. step\n2. steps\n\nexampl steps\n3. step\n\n\xc2\xa0\nconstraints:\n\n1 45\n\n' path, absolut (start slash \'/\') file directori unix-styl system, simplifi canon path.\nin period refer directory, doubl \'..\' level, consecut \'//\') treat \'/\'. \'...\' file/directori names.\nth format:\n\nth \'/\'.\nani separ \'/\'.\nthe trail \'..\')\n\nreturn path.\n\xc2\xa0\nexampl "/home/"\noutput: "/home"\nexplanation: name.\n\nexampl "/../"\noutput: "/"\nexplanation: level no-op, highest go.\n\nexampl "/home//foo/"\noutput: "/home/foo"\nexplanation: one.\n\n\xc2\xa0\nconstraints:\n\n1 path.length 3000\npath \'/\' \'_\'.\npath unix path.\n\n' word1 word2, oper requir word2.\nyou permit word:\n\ninsert character\ndelet character\nreplac character\n\n\xc2\xa0\nexampl "horse", word2 "ros"\noutput: \nhors rors (replac \'h\' \'r\')\nrors rose (remov \'r\')\nrose ro \'e\')\n\nexampl "intention", "execution"\noutput: \nintent inent \'t\')\ninent enent \'i\' \'e\')\nenent exent \'n\' \'x\')\nexent exect \'c\')\nexect execut (insert \'u\')\n\n\xc2\xa0\nconstraints:\n\n0 word1.length, word2.length 500\nword1 0's.\nyou place.\n\xc2\xa0\nexampl [[1,1,1],[1,0,1],[1,1,1]]\noutput: [[1,0,1],[0,0,0],[1,0,1]]\n\nexampl [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\noutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n\n\xc2\xa0\nconstraints:\n\nm matrix[0].length\n1 200\n-231 up:\n\na straightforward o(mn) probabl bad idea.\na simpl improv o(m best solution.\ncould devis solution?\n\n" effici search matrix. properties:\n\ninteg right.\nth row.\n\n\xc2\xa0\nexampl [[1,3,5,7],[10,11,16,20],[23,30,34,60]], 13\noutput: false\n\n\xc2\xa0\nconstraints:\n\nm 100\n-104 matrix[i][j], object color red, white, blue, adjacent, blue.\nw respectively.\ny library' function.\n\xc2\xa0\nexampl [2,0,2,1,1,0]\noutput: [0,0,1,1,2,2]\n\nexampl [2,0,1]\noutput: [0,1,2]\n\n\xc2\xa0\nconstraints:\n\nn nums.length\n1 300\nnums[i] 2.\n\n\xc2\xa0\nfollow up:\xc2\xa0could one-pass only\xc2\xa0const window duplicates) window. "".\nthe unique.\na "adobecodebanc", "abc"\noutput: "banc"\nexplanation: "banc" \'b\', \'c\' t.\n\nexampl "a"\nexplanation: window.\n\nexampl "aa"\noutput: both window.\nsinc string.\n\n\xc2\xa0\nconstraints:\n\nm s.length\nn t.length\n1 n\xc2\xa0<= 105\n letters.\n\n\xc2\xa0\nfollow time?' n].\nyou 2\noutput:\n[\n [2,4],\n [3,4],\n [2,3],\n [1,2],\n [1,3],\n [1,4],\n]\n\nexampl n\n\n' elements, subset (the set).\nth subsets. [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\nexampl [[],[0]]\n\n\xc2\xa0\nconstraints:\n\n1 10\n-10 of\xc2\xa0num word, grid.\nth construct sequenti cells, horizont neighboring. [["a","b","c","e"],["s","f","c","s"],["a","d","e","e"]], "abcced"\noutput: "see"\noutput: 3:\n\ninput: "abcb"\noutput: board.length\nn board[i].length\n1 6\n1 word.length 15\nboard prune faster board?\n' twice. [1,1,1,2,2,3]\noutput: [1,1,2,2,3,_]\nexplanation: [0,0,1,1,1,1,2,3,3]\noutput: [0,0,1,1,2,3,3,_,_]\nexplanation: values).\nbefor (0 [0,1,2,4,4,4,5,6,6,7] [4,5,6,6,7,0,1,2,4,4].\ngiven decreas possible.\n\xc2\xa0\nexampl [2,5,6,0,0,1,2], true\nexampl pivot.\n-104 similar to\xc2\xa0search but\xc2\xa0num duplicates. affect complexity? how why?\n' well.\n\xc2\xa0\nexampl [1,2,3,3,4,4,5]\noutput: [1,2,5]\n\nexampl [1,1,1,2,3]\noutput: [2,3]\n\n\xc2\xa0\nconstraints:\n\nth 300].\n-100 100\nthe [1,1,2,3,3]\noutput: [1,2,3]\n\n\xc2\xa0\nconstraints:\n\nth histogram' rectangl histogram.\n\xc2\xa0\nexampl [2,1,5,6,2,3]\noutput: 10\nexplanation: histogram 1.\nthe red area, 10 units.\n\nexampl [2,4]\noutput: heights.length heights[i] 104\n\n" cols\xc2\xa0binari 0\' 1\'s, area.\n\xc2\xa0\nexampl [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]\noutput: picture.\n\nexampl [["0"]]\noutput: 0\n\nexampl [["1"]]\noutput: 1\n\n\xc2\xa0\nconstraints:\n\nrow matrix.length\ncol row, col 200\nmatrix[i][j] \'1\'.\n\n' partit x.\nyou preserv partitions.\n\xc2\xa0\nexampl [1,4,3,2,5,2], [1,2,2,4,3,5]\n\nexampl [2,1], [1,2]\n\n\xc2\xa0\nconstraints:\n\nth 200].\n-100 100\n-200 200\n\n' b'we scrambl algorithm:\n\nif stop.\nif > following:\n\t\nsplit random i.e., y.\nrandomly\xc2\xa0decid keep step, x.\nappli y.\n\n\n\ngiven s1 s2 length, s1, otherwise, false.\n\xc2\xa0\nexampl "great", "rgeat"\noutput: scenario is:\n"great" --> "gr/eat" index.\n"gr/eat" decis order.\n"gr/eat" "g/r e/at" substrings. them.\n"g/r "r/g order.\n"r/g e/ a/t" recursively, "at" "a/t".\n"r/g now, "rgeat" s2.\na led s2, true.\n\nexampl "abcde", "caebd"\noutput: true\n\n\xc2\xa0\nconstraints:\n\ns1.length s2.length\n1 s1.length 30\ns1 nums2, respectively.\nmerg insid nums1. to accommod this, denot merged, ignored. n.\n\xc2\xa0\nexampl [1,2,3,0,0,0], [2,5,6], [1,2,2,3,5,6]\nexplanation: [2,5,6].\nthe [1,2,2,3,5,6] nums1.\n\nexampl [1]\nexplanation: [1] [].\nthe [1].\n\nexampl [] [1].\nthe [1].\nnote ensur fit nums1.\n\n\xc2\xa0\nconstraints:\n\nnums1.length n\nnums2.length 200\n1 nums2[j] 109\n\n\xc2\xa0\nfollow time?\n' b'an n-bit gray 2n where:\n\neveri inclus 1],\nthe 0,\nan sequence,\nth represent bit, and\nth bit.\n\ngiven [0,1,3,2]\nexplanation:\nth [0,1,3,2] [00,01,11,10].\n- 00 bit\n- 11 bit\n[0,2,3,1] sequence, whose [00,10,11,01].\n- bit\n\nexampl [0,1]\n\n\xc2\xa0\nconstraints:\n\n1 16\n\n' [1,2,2]\noutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\nexampl messag a-z encod mapping:\n\'a\' "1"\n\'b\' "2"\n...\n\'z\' "26"\n\nto decod message, back (there ways). "11106" into:\n\n"aajf" 6)\n"kjf" (11 6)\n\nnote 06) invalid "06" \'f\' "6" "06".\ngiven it.\nth "12"\noutput: "ab" 2) "l" (12).\n\nexampl "226"\noutput: "226" "bz" 26), "vf" (22 6), "bbf" 6).\n\nexampl "06"\noutput: 0\nexplanation: "f" ("6" "06").\n\n\xc2\xa0\nconstraints:\n\n1 100\n zero(s).\n\n' singli [1,4,3,2,5]\n\nexampl [5], [5]\n\n\xc2\xa0\nconstraints:\n\nth 500\n-500 500\n1 n\n\n\xc2\xa0\nfollow pass?' ip address dots. each 255 (inclusive) zeros.\n\nfor "0.1.2.201" "192.168.1.1" addresses, "0.011.255.245", "192.168.1.312" "192.168@1.1" addresses.\n\ngiven s. reorder "25525511135"\noutput: ["255.255.11.135","255.255.111.35"]\n\nexampl "0000"\noutput: ["0.0.0.0"]\n\nexampl "101023"\noutput: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]\n\n\xc2\xa0\nconstraints:\n\n1 only.\n\n' tree, inord travers nodes' values.\n\xc2\xa0\nexampl [1,null,2,3]\noutput: tree 100].\n-100 100\n\n\xc2\xa0\nfollow trivial, iteratively?" structur bst' (binari trees), [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nexampl 8\n\n" trees) 5\n\nexampl 19\n\n" s3, whether s3 interleav s2.\nan that:\n\n ... sn\nt t1 t2 tm\n|n m| 1\nthe t3 ...\n\nnote: b.\n\xc2\xa0\nexampl "aabcc", "dbbca", "aadbbcbcac"\noutput: "aadbbbaccc"\noutput: "", true\n\n\xc2\xa0\nconstraints:\n\n0 s1.length, s2.length s3.length 200\ns1, o(s2.length) addit space?\n' (bst).\na bst follows:\n\nth subtre key node' key.\nth key.\nboth trees.\n\n\xc2\xa0\nexampl [2,1,3]\noutput: [5,1,4,null,null,3,6]\noutput: child' 4.\n\n\xc2\xa0\nconstraints:\n\nth 104].\n-231 1\n\n" (bst), mistake. recov structure.\n\xc2\xa0\nexampl [1,3,null,null,2]\noutput: [3,1,null,null,2]\nexplanation: child 1. valid.\n\nexampl [3,1,4,null,null,2]\noutput: [2,1,4,null,null,3]\nexplanation: 3. valid.\n\n\xc2\xa0\nconstraints:\n\nth [2, 1000].\n-231 pretti straight-forward. solution?' q, check not.\ntwo identical, value.\n\xc2\xa0\nexampl q [1,null,2]\noutput: [1,2,1], false\n\n\xc2\xa0\nconstraints:\n\nth 100].\n-104 mirror symmetr around center).\n\xc2\xa0\nexampl [1,2,2,3,4,4,3]\noutput: [1,2,2,null,3,null,3]\noutput: 1000].\n-100 iteratively?' values. level).\n\xc2\xa0\nexampl [3,9,20,null,null,15,7]\noutput: [[3],[9,20],[15,7]]\n\nexampl [[1]]\n\nexampl []\n\n\xc2\xa0\nconstraints:\n\nth 2000].\n-1000 1000\n\n" altern between).\n\xc2\xa0\nexampl [[3],[20,9],[15,7]]\n\nexampl 2000].\n-100 depth.\na tree' depth\xc2\xa0i farthest leaf node.\n\xc2\xa0\nexampl 3\n\nexampl 2\n\n\xc2\xa0\nconstraints:\n\nth 104].\n-100 preorder tree.\n\xc2\xa0\nexampl [3,9,20,15,7], [9,3,15,20,7]\noutput: [3,9,20,null,null,15,7]\n\nexampl [-1], [-1]\noutput: [-1]\n\n\xc2\xa0\nconstraints:\n\n1 preorder.length 3000\ninorder.length preorder.length\n-3000 preorder[i], inorder[i] 3000\npreorder values.\neach preorder.\npreord tree.\ninord tree.\n\n' postord [9,3,15,20,7], [9,15,7,20,3]\noutput: inorder.length 3000\npostorder.length inorder.length\n-3000 inorder[i], postorder[i] 3000\ninord inorder.\ninord tree.\npostord bottom-up root).\n\xc2\xa0\nexampl [[15,7],[9,20],[3]]\n\nexampl height-balanc tree.\na depth never one.\n\xc2\xa0\nexampl [-10,-3,0,5,9]\noutput: [0,-3,9,-10,null,5]\nexplanation: [0,-10,5,null,-3,null,9] accepted:\n\n\nexampl [1,3]\noutput: [3,1]\nexplanation: [1,null,3] [3,1] bsts.\n\n\xc2\xa0\nconstraints:\n\n1 increas balanc bst.\nfor 1.\n\xc2\xa0\nexampl [0,-3,9,-10,null,5], bst.\n\nexampl 104].\n-105 height-balanced.\nfor as:\n\na 1.\n\n\xc2\xa0\nexampl [1,2,2,3,3,null,null,4,4]\noutput: true\n\n\xc2\xa0\nconstraints:\n\nth 5000].\n-104 depth.\nth shortest nearest node.\nnote:\xc2\xa0a children.\n\xc2\xa0\nexampl [2,null,3,null,4,null,5,null,6]\noutput: 5\n\n\xc2\xa0\nconstraints:\n\nth 105].\n-1000 targetsum, root-to-leaf targetsum.\na [5,4,8,11,null,13,4,7,2,null,null,null,1], targetsum 22\noutput: tree:\n(1 2): 3.\n(1 3): 4.\nthere empty, paths.\n\n\xc2\xa0\nconstraints:\n\nth 5000].\n-1000 targetsum. values, references.\na node. [5,4,8,11,null,13,4,7,2,null,null,5,1], [[5,4,11,2],[5,8,4,5]]\nexplanation: targetsum:\n5 22\n5 22\n\nexampl flatten "link list":\n\nth list" treenod class pointer null.\nth pre-ord tree.\n\n\xc2\xa0\nexampl [1,2,5,3,4,null,6]\noutput: [1,null,2,null,3,null,4,null,5,null,6]\n\nexampl space)?' t, t.\na string\' (can none) disturb characters\' positions. "ace" "abcde" "aec" not).\nth "rabbbit", "rabbit"\noutput: 3\nexplanation:\na below, "rabbit" s.\nrabbbit\nrabbbit\nrabbbit\n\nexampl "babgbag", "bag"\noutput: 5\nexplanation:\na "bag" s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag\n\xc2\xa0\nconstraints:\n\n1 t.length perfect parent children. definition:\nstruct val;\n *left;\n *right;\n *next;\n}\n\npopul node, null.\ninitially, null.\n\xc2\xa0\nexampl [1,2,3,4,5,6,7]\noutput: [1,#,2,3,#,4,5,6,7,#]\nexplanation: (figur a), popul b. serial connect pointers, '#' signifi level.\n\nexampl 212 1].\n-1000 1000\n\n\xc2\xa0\nfollow-up:\n\ny space.\nth approach fine. implicit stack count problem.\n\n" tree\nstruct [1,2,3,4,5,null,7]\noutput: [1,#,2,3,#,4,5,7,#]\nexplanation: 6000].\n-100 100\n\n\xc2\xa0\nfollow-up:\n\ny numrows, pascal' triangle.\nin triangle, directli shown:\n\n\xc2\xa0\nexampl [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\nexampl 30\n\n" rowindex, rowindexth (0-indexed) rowindex [1,3,3,1]\nexampl [1]\nexampl [1,1]\n\n\xc2\xa0\nconstraints:\n\n0 33\n\n\xc2\xa0\nfollow optim o(rowindex) triangl bottom.\nfor row.\n\xc2\xa0\nexampl [[2],[3,4],[6,5,7],[4,1,8,3]]\noutput: 11\nexplanation: look like:\n 2\n 4\n 7\n4 3\nthe (underlin above).\n\nexampl [[-10]]\noutput: -10\n\n\xc2\xa0\nconstraints:\n\n1 triangle.length 200\ntriangle[0].length 1\ntriangle[i].length triangle[i 1].length 1\n-104 triangle[i][j] you\xc2\xa0do triangle?' price prices[i] stock day.\nyou profit choos day buy futur sell stock.\nreturn achiev transaction. profit, 0.\n\xc2\xa0\nexampl [7,1,5,3,6,4]\noutput: (price 1) 6-1 5.\nnote sell.\n\nexampl [7,6,4,3,1]\noutput: transact done 0.\n\n\xc2\xa0\nconstraints:\n\n1 prices.length day.\non day, decid and/or stock. share time. immedi day.\nfind achieve.\n\xc2\xa0\nexampl 5), 5-1 4.\nthen 6-3 3.\ntotal 7.\n\nexampl [1,2,3,4,5]\noutput: 4.\ntotal achieve. complet transactions.\nnote: engag simultan again).\n\xc2\xa0\nexampl [3,3,5,0,0,3,1,4]\noutput: 3), 3-0 3.\nthen 4), 4-1 3.\nexampl later, again.\n\nexampl done, i.e. b"a edg them. root.\nth path.\ngiven [-10,9,20,null,null,15,7]\noutput: 15 20 42.\n\n\xc2\xa0\nconstraints:\n\nth 104].\n-1000 if, non-alphanumer characters, forward backward. alphanumer numbers.\ngiven man, plan, canal: panama"\noutput: "amanaplanacanalpanama" "race car"\noutput: "raceacar" "" characters.\nsinc backward, palindrome.\n\n\xc2\xa0\nconstraints:\n\n1 printabl ascii transform beginword endword dictionari wordlist sk that:\n\neveri letter.\neveri si wordlist. wordlist.\nsk endword\n\ngiven endword, wordlist, exists. [beginword, sk].\n\xc2\xa0\nexampl "hit", "cog", ["hot","dot","dog","lot","log","cog"]\noutput: [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]\nexplanation:\xc2\xa0ther sequences:\n"hit" "hot" "dot" "dog" "cog"\n"hit" "lot" "log" "cog"\n\nexampl ["hot","dot","dog","lot","log"]\noutput: []\nexplanation: "cog" sequence.\n\n\xc2\xa0\nconstraints:\n\n1 beginword.length 5\nendword.length beginword.length\n1 wordlist.length 1000\nwordlist[i].length beginword.length\nbeginword, wordlist[i] letters.\nbeginword endword\nal exists.\n\xc2\xa0\nexampl "hit" cog", long.\n\nexampl 10\nendword.length 5000\nwordlist[i].length sequence.\ny in\xc2\xa0o(n)\xc2\xa0time.\n\xc2\xa0\nexampl [100,4,200,1,3,2]\noutput: 4]. [0,3,7,2,5,8,4,6,0,1]\noutput: 9\n\n\xc2\xa0\nconstraints:\n\n0 105\n-109 number.\n\nfor 123.\n\nreturn numbers. integer.\na 25\nexplanation:\nth 1->2 12.\nthe 1->3 13.\ntherefore, 13 25.\n\nexampl [4,9,0,5,1]\noutput: 1026\nexplanation:\nth 4->9->5 495.\nthe 4->9->1 491.\nthe 4->0 40.\ntherefore, 495 491 1026.\n\n\xc2\xa0\nconstraints:\n\nth 1000].\n0 9\nthe 10.\n\n' \'x\' \'o\', captur region 4-directionally\xc2\xa0surround \'x\'.\na flip \'o\' surround region.\n\xc2\xa0\nexampl [["x","x","x","x"],["x","o","o","x"],["x","x","o","x"],["x","o","x","x"]]\noutput: [["x","x","x","x"],["x","x","x","x"],["x","x","x","x"],["x","o","x","x"]]\nexplanation: border, border \'x\'. ani vertically.\n\nexampl [["x"]]\noutput: [["x"]]\n\n\xc2\xa0\nconstraints:\n\nm 200\nboard[i][j] \'o\'.\n\n' palindrome. s.\na "aab"\noutput: [["a","a","b"],["aa","b"]]\nexampl 16\n palindrome.\nreturn cut ["aa","b"] produc cut.\n\nexampl "ab"\noutput: undirect graph.\nreturn deep copi (clone) graph.\neach graph (int) (list[node]) neighbors.\nclass public list<node> neighbors;\n}\n\n\xc2\xa0\ntest format:\nfor simplicity, (1-indexed). on. list.\nan unord finit graph. describ neighbor graph.\nth clone graph.\n\xc2\xa0\nexampl adjlist [[2,4],[1,3],[2,4],[1,3]]\noutput: [[2,4],[1,3],[2,4],[1,3]]\nexplanation: graph.\n1st (val 1)' 2nd 4th 4).\n2nd 2)' 1st 3rd 3).\n3rd 3)' 4).\n4th 4)' 3).\n\nexampl [[]]\nexplanation: neighbors.\n\nexampl graph, nodes.\n\n\xc2\xa0\nconstraints:\n\nth 100].\n1 100\nnode.v node.\nther self-loop visit node.\n\n" b"there ga station circular route, gas[i].\ny car tank cost cost[i] travel (i 1)th station. begin journey stations.\ngiven cost, station' circuit clockwis direction, otherwis -1. unique\n\xc2\xa0\nexampl [3,4,5,1,2]\noutput: 3\nexplanation:\nstart (index gas. 4\ntravel 4. 8\ntravel 7\ntravel 6\ntravel 5\ntravel 5. enough 3.\ntherefore, [2,3,4], [3,4,3]\noutput: -1\nexplanation:\ny can't station.\nlet' 3\ntravel 3\nyou start.\n\n\xc2\xa0\nconstraints:\n\nn gas.length cost.length\n1 gas[i], children stand rate ratings.\ny candi subject requirements:\n\neach candy.\nchildren higher neighbors.\n\nreturn [1,0,2]\noutput: first, third respectively.\n\nexampl conditions.\n\n\xc2\xa0\nconstraints:\n\nn ratings.length\n1 ratings[i] non-empty\xc2\xa0array twice one. one.\ny must\xc2\xa0impl use\xc2\xa0onli constant\xc2\xa0extra [2,2,1]\noutput: 1\nexampl [4,1,2,1,2]\noutput: 104\n-3 104 104\neach once.\n\n' where\xc2\xa0everi one, it.\nyou [2,2,3,2]\noutput: [0,1,0,1,0,1,99]\noutput: 99\n\n\xc2\xa0\nconstraints:\n\n1 104\n-231 1\neach pointer, null.\nconstruct brand correspond state. none list.\nfor y x.random y, y.\nreturn list.\nth input/output nodes. [val, random_index] where:\n\nval: node.val\nrandom_index: (rang n-1) to, null node.\n\nyour [[7,null],[13,0],[11,4],[10,2],[1,0]]\noutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n\nexampl [[1,1],[2,1]]\noutput: [[1,1],[2,1]]\n\nexampl [[3,null],[3,0],[3,null]]\noutput: [[3,null],[3,0],[3,null]]\n\n\xc2\xa0\nconstraints:\n\n0 104\nnode.random list.\n\n' worddict, segment space-separ words.\nnot reus segmentation.\n\xc2\xa0\nexampl "leetcode", worddict ["leet","code"]\noutput: "leetcode" "leet code".\n\nexampl "applepenapple", ["apple","pen"]\noutput: "applepenapple" "appl pen apple".\nnot word.\n\nexampl "catsandog", ["cats","dog","sand","and","cat"]\noutput: worddict.length worddict[i].length worddict[i] letters.\nal sentenc word. order.\nnot "catsanddog", ["cat","cats","and","sand","dog"]\noutput: ["cat dog","cat sand dog"]\n\nexampl "pineapplepenapple", ["apple","pen","applepen","pine","pineapple"]\noutput: ["pine appl apple","pineappl apple","pin applepen apple"]\nexplanation: 10\n head, cycl it.\nther continu the\xc2\xa0next\xc2\xa0pointer. internally, pos\xc2\xa0i that\xc2\xa0tail's\xc2\xa0next\xc2\xa0point to.\xc2\xa0not that\xc2\xa0pos\xc2\xa0i parameter.\nreturn\xc2\xa0tru [3,2,0,-4], po tail (0-indexed).\n\nexampl 0th node.\n\nexampl -1\noutput: list.\n\n\xc2\xa0\nconstraints:\n\nth 105\npo linked-list.\n\n\xc2\xa0\nfollow constant) memory?\n" begins. cycle, null.\nther pointer. tail' cycle. parameter.\ndo cycle\nexplanation: linked-list. as:\nl0 \xe2\x80\xa6 ln ln\n\nreorder form:\nl0 \xe2\x80\xa6\n\ny onli [1,4,2,3]\n\nexampl [1,5,2,4,3]\n\n\xc2\xa0\nconstraints:\n\nth 104].\n1 iteratively?\n" a\xc2\xa0binari [3,2,1]\n\nexampl b'design data constraint recent (lru) cache.\nimpl lrucach class:\n\nlrucache(int capacity) lru cach capacity.\nint get(int key) exists, -1.\nvoid put(int key, value)\xc2\xa0upd key-valu cache. exce capac operation, evict key.\n\nth functions\xc2\xa0get\xc2\xa0and\xc2\xa0put\xc2\xa0must averag 1:\ninput\n["lrucache", "put", "get", "get"]\n[[2], 2], [3, 3], [4, 4], [3], [4]]\noutput\n[null, null, -1, 4]\n\nexplanation\nlrucach lrucache(2);\nlrucache.put(1, 1); {1=1}\nlrucache.put(2, 2); {1=1, 2=2}\nlrucache.get(1); 1\nlrucache.put(3, 3); 3=3}\nlrucache.get(2); found)\nlrucache.put(4, 4); {4=4, 3=3}\nlrucache.get(1); found)\nlrucache.get(3); 3\nlrucache.get(4); 3000\n0 105\nat 2\xc2\xa0* 105\xc2\xa0cal put.\n\n' sort, head.\nth algorithm:\n\ninsert iterates, consum repetit grow list.\nat iteration, data, belong there.\nit remain.\n\nth graphic algorithm. partial (black) (red) iteration.\n\n\xc2\xa0\nexampl [4,2,1,3]\noutput: [1,2,3,4]\n\nexampl [-1,5,3,4,0]\noutput: [-1,0,3,4,5]\n\n\xc2\xa0\nconstraints:\n\nth 5000].\n-5000 5000\n\n" [-1,0,3,4,5]\n\nexampl 105\n\n\xc2\xa0\nfollow o(n logn) space)?\n' points[i] [xi, yi] x-i plane, lie straight line.\n\xc2\xa0\nexampl [[1,1],[2,2],[3,3]]\noutput: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\noutput: points.length 300\npoints[i].length 2\n-104 xi, yi b'evalu arithmet polish notation.\nvalid +, -, *, /. operand expression.\nnot zero.\nit rpn valid. that evalu result, operation.\n\xc2\xa0\nexampl token ["2","1","+","3","*"]\noutput: 9\nexplanation: ((2 9\n\nexampl ["4","13","5","/","+"]\noutput: (4 (13 5)) 6\n\nexampl ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]\noutput: 22\nexplanation: ((10 (6 ((9 -11))) 17) 5\n= (12 -132)) 17 22\n\n\xc2\xa0\nconstraints:\n\n1 tokens.length 104\ntokens[i] operator: "+", "-", "*", "/", [-200, 200].\n\n' words.\na characters. space.\nreturn space.\nnot words. spaces.\n\xc2\xa0\nexampl "the sky blue"\noutput: "blue the"\n\nexampl hello world "world hello"\nexplanation: spaces.\n\nexampl good example"\noutput: "exampl a"\nexplanation: reduc string.\n\n\xc2\xa0\nconstraints:\n\n1 (upper-cas lower-case), s.\n\n\xc2\xa0\nfollow-up:\xc2\xa0if mutabl language, can\xc2\xa0y it\xc2\xa0in-place\xc2\xa0with\xc2\xa0o(1)\xc2\xa0extra product, product.\nth [2,3,-2,4]\noutput: [2,3] [-2,0,-1]\noutput: [-2,-1] subarray.\n\n\xc2\xa0\nconstraints:\n\n1 104\n-10 10\nthe suffix integer.\n\n' b'suppos become:\n\n[4,5,6,7,0,1,2] times.\n[0,1,2,4,5,6,7] times.\n\nnotic [a[0], a[1], a[2], a[n-1]] [a[n-1], a[0], a[n-2]].\ngiven array.\ny in\xc2\xa0o(log [1,2,3,4,5] times.\n\nexampl [4,5,6,7,0,1,2]\noutput: [11,13,15,17]\noutput: [11,13,15,17] \n\n\xc2\xa0\nconstraints:\n\nn 5000\n-5000 5000\nall times.\n\n' [0,1,4,4,5,6,7] become:\n\n[4,5,6,7,0,1,4] times.\n[0,1,4,4,5,6,7] [1,3,5]\noutput: [2,2,2,0,1]\noutput: 0\n\n\xc2\xa0\nconstraints:\n\nn 5000\nnum times.\n\n\xc2\xa0\nfollow to\xc2\xa0find why?\n\xc2\xa0\n' push, pop, top, retriev time.\nimpl minstack class:\n\nminstack() object.\nvoid push(int val) push onto stack.\nvoid pop() stack.\nint top() getmin() stack.\n\n\xc2\xa0\nexampl 1:\ninput\n["minstack","push","push","push","getmin","pop","top","getmin"]\n[[],[-2],[0],[-3],[],[],[],[]]\n\noutput\n[null,null,null,null,-3,null,0,-2]\n\nexplanation\nminstack minstack();\nminstack.push(-2);\nminstack.push(0);\nminstack.push(-3);\nminstack.getmin(); -3\nminstack.pop();\nminstack.top(); 0\nminstack.getmin(); -2\n\n\xc2\xa0\nconstraints:\n\n-231 1\nmethod getmin stacks.\nat getmin.\n\n' heada headb, intersect. intersect all, null.\nfor c1:\n\nthe anywher structure.\nnot retain returns.\ncustom (your inputs):\n\nintersectv occurs. node.\nlista list.\nlistb list.\nskipa skip ahead lista head) node.\nskipb listb node.\n\nth creat heads, headb\xc2\xa0to program. correctli intersectv [4,1,8,4,5], [5,6,1,8,4,5], skipa skipb '8'\nexplanation: (note intersect).\nfrom [4,1,8,4,5]. [5,6,1,8,4,5]. a; b.\n\nexampl [1,9,1,2,4], '2'\nexplanation: [1,9,1,2,4]. [3,2,4]. [2,6,4], [1,5], no intersection\nexplanation: [2,6,4]. [1,5]. intersect, arbitrari values.\nexplanation: null.\n\n\xc2\xa0\nconstraints:\n\nth m.\nthe 104\n1 <\xc2\xa0m\n0 <\xc2\xa0n\nintersectv intersect.\nintersectv lista[skipa] listb[skipb] intersect.\n\n\xc2\xa0\nfollow memory?" peak neighbors.\ngiven index. if\xc2\xa0th peaks, peaks.\nyou imagin nums[-1] nums[n] -\xe2\x88\x9e.\ny [1,2,3,1]\noutput: 2.\nexampl [1,2,1,3,5,6,4]\noutput: 6.\n\xc2\xa0\nconstraints:\n\n1 1000\n-231 1\nnums[i] nums[i 1] i.\n\n' success form. 0.\nyou [3,6,9,1]\noutput: [1,3,6,9], (3,6) (6,9) [10]\noutput: version numbers,\xc2\xa0version1 version2, compar them.\n\n\nvers revis join dot\xc2\xa0\'.\'. revision\xc2\xa0consist digits\xc2\xa0and zeros. character. 0-index leftmost example\xc2\xa02.5.33\xc2\xa0and\xc2\xa00.1\xc2\xa0ar numbers.\nto their\xc2\xa0integ revisions\xc2\xa01\xc2\xa0and\xc2\xa0001\xc2\xa0ar considered\xc2\xa0equal. specifi then\xc2\xa0treat as\xc2\xa00. version\xc2\xa01.0 version\xc2\xa01.1\xc2\xa0becaus 0s same, 1s are\xc2\xa00\xc2\xa0and\xc2\xa01\xc2\xa0respectively, and\xc2\xa00 following:\n\nif version1 -1.\nif 1.\notherwise, 0.\n\n\xc2\xa0\nexampl "1.01", version2 "1.001"\noutput: zeroes, "01" "001" "1".\n\nexampl "1.0", "1.0.0"\noutput: "0".\n\nexampl "0.1", "1.1"\noutput: -1\nexplanation: version1\' "0", version2\' "1". version2.\n\n\xc2\xa0\nconstraints:\n\n1 version1.length, version2.length 500\nversion1 version2\xc2\xa0onli \'.\'.\nversion1 version2\xc2\xa0ar numbers.\nal in\xc2\xa0version1 version2\xc2\xa0can in\xc2\xa0a\xc2\xa032-bit denomin fraction, format.\nif repeating, enclos parentheses.\nif them.\nit inputs.\n\xc2\xa0\nexampl "0.5"\n\nexampl "2"\n\nexampl 333\noutput: "0.(012)"\n\n\xc2\xa0\nconstraints:\n\n-231 <=\xc2\xa0numerator, 1\ndenomin 1-index specif number. let numbers[index1] numbers[index2] index1 index2 numbers.length.\nreturn index2, [index1, index2] 2.\nthe solution. twice.\nyour [1,2]\nexplanation: 9. we 2].\n\nexampl [1,3]\nexplanation: 6. 3].\n\nexampl [-1,0], 2].\n\n\xc2\xa0\nconstraints:\n\n2 numbers.length 104\n-1000 numbers[i] 1000\nnumber order.\n-1000 1000\nthe columnnumber, titl excel sheet.\nfor example:\na 1\nb 2\nc 3\n...\nz 26\naa 27\nab 28 \n...\n\n\xc2\xa0\nexampl columnnumb "a"\n\nexampl 28\noutput: "ab"\n\nexampl 701\noutput: "zy"\n\n\xc2\xa0\nconstraints:\n\n1 major element.\nth \xe2\x8c\x8an 2\xe2\x8c\x8b [3,2,3]\noutput: [2,2,1,1,1,2,2]\noutput: 2\n\n\xc2\xa0\nconstraints:\n\nn 109\n\n\xc2\xa0\nfollow-up: space?' columntitl sheet, number.\nfor "zy"\noutput: 701\n\n\xc2\xa0\nconstraints:\n\n1 columntitle.length 7\ncolumntitl letters.\ncolumntitl ["a", "fxshrxw"].\n\n' n!.\nnote (n 3! 6, zero.\n\nexampl 5! 120, work logarithm complexity?\n' bstiter iter in-ord (bst):\n\nbstiterator(treenod root) class. constructor. non-exist smaller bst.\nboolean hasnext() false.\nint next() pointer.\n\nnotic number, bst.\nyou called.\n\xc2\xa0\nexampl 1:\n\ninput\n["bstiterator", "next", "hasnext", "hasnext"]\n[[[7, 15, 20]], []]\noutput\n[null, true, 20, false]\n\nexplanation\nbstiter bstiterator([7, 20]);\nbstiterator.next(); 3\nbstiterator.next(); 7\nbstiterator.hasnext(); true\nbstiterator.next(); 9\nbstiterator.hasnext(); 15\nbstiterator.hasnext(); 20\nbstiterator.hasnext(); 105].\n0 106\nat 105 hasnext, next.\n\n\xc2\xa0\nfollow up:\n\ncould use\xc2\xa0o(h) memory, tree?\n\n' b"the demon princess imprison dungeon. dungeon room laid our valiant knight fight rescu princess.\nth health drop die immediately.\nsom guard (repres integers), upon enter rooms; magic orb knight' integers).\nto quickli rightward downward step.\nreturn princess.\nnot threat power-ups, even imprisoned.\n\xc2\xa0\nexampl [[-2,-3,3],[-5,-10,1],[10,30,-5]]\noutput: path: right-> down.\n\nexampl [[0]]\noutput: dungeon.length\nn dungeon[i].length\n1 200\n-1000 dungeon[i][j] b'sql schema' it.\nsinc large, [10,2]\noutput: "210"\n\nexampl [3,30,34,5,9]\noutput: "9534330"\n\n\xc2\xa0\nconstraints:\n\n1 dna compos seri nucleotid abbrevi \'g\', \'t\'.\n\nfor "acgaattccg" sequence.\n\nwhen studi dna, identifi dna.\ngiven 10-letter-long (substrings) molecule. "aaaaacccccaaaaaccccccaaaaagggttt"\noutput: ["aaaaaccccc","cccccaaaaa"]\nexampl "aaaaaaaaaaaaa"\noutput: ["aaaaaaaaaa"]\n\n\xc2\xa0\nconstraints:\n\n1 105\ns[i] \'t\'.\n\n' k.\nfind [2,4,1]\noutput: 4-2 [3,2,6,5,0,3]\noutput: 6-2 3.\n\n\xc2\xa0\nconstraints:\n\n0 steps, non-negative.\n\xc2\xa0\nexampl [1,2,3,4,5,6,7], [5,6,7,1,2,3,4]\nexplanation:\nrot right: [7,1,2,3,4,5,6]\nrotat [6,7,1,2,3,4,5]\nrotat [5,6,7,1,2,3,4]\n\nexampl [-1,-100,3,99], [3,99,-1,-100]\nexplanation: \nrotat [99,-1,-100,3]\nrotat [3,99,-1,-100]\n\n\xc2\xa0\nconstraints:\n\n1 1\n0 up:\n\ntri can. problem.\ncould space?\n\n' b"revers bit 32 unsign integer.\nnote:\n\nnot java, type. they implementation, integer' intern unsigned.\nin compil 2' complement notation. above, -3 -1073741825.\n\n\xc2\xa0\nexampl 00000010100101000001111010011100\noutput: 964176192 (00111001011110000010100101000000)\nexplanation: 00000010100101000001111010011100 43261596, 00111001011110000010100101000000.\n\nexampl 11111111111111111111111111111101\noutput: 3221225471 (10111111111111111111111111111111)\nexplanation: 11111111111111111111111111111101 4294967293, 10111111111111111111111111111111.\n\n\xc2\xa0\nconstraints:\n\nth 32\n\n\xc2\xa0\nfollow times, it?\n" b"write '1' (also known ham weight).\nnote:\n\nnot -3.\n\n\xc2\xa0\nexampl 00000000000000000000000000001011\noutput: 00000000000000000000000000001011 bits.\n\nexampl 00000000000000000000000010000000\noutput: 00000000000000000000000010000000 bit.\n\nexampl 31\nexplanation: thirti bits.\n\n\xc2\xa0\nconstraints:\n\nth 32.\n\n\xc2\xa0\nfollow it?" bash script words.txt.\nfor simplic sake, assume:\n\nwords.txt ' only.\nword characters.\n\nexample:\nassum words.txt content:\nth sunni the\nth is\n\nyour following, descend frequency:\nth 4\ni 3\nsunni 2\nday 1\n\nnote:\n\ndon't worri handl ties, word' unique.\ncould one-lin pipes?\n\n" file.txt phone (one per line), print numbers.\ny formats: (xxx) xxx-xxxx xxx-xxx-xxxx. (x digit)\ny white spaces.\nexample:\nassum content:\n987-123-4567\n123 456 7890\n(123) 456-7890\n\nyour numbers:\n987-123-4567\n(123) 456-7890\n\n' file.txt, transpos content.\ny columns, field character.\nexample:\nif content:\nnam age\nalic 21\nryan 30\n\noutput following:\nnam alic ryan\nag 21 file\xc2\xa0file.txt, print\xc2\xa0just 10th the\xc2\xa0file.\nexample:\nassum content:\nlin 1\nline 2\nline 3\nline 4\nline 5\nline 6\nline 7\nline 8\nline 9\nline 10\n\nyour tenth line, is:\nlin 10\n\nnote:\n1. lines, output?\n2. there' solutions. explor possibilities.\n" profession robber plan rob hous street. certain money stashed, secur system automat contact polic broken night.\ngiven house, tonight alert police.\n\xc2\xa0\nexampl (money 3).\ntotal [2,7,9,3,1]\noutput: 12\nexplanation: 2), 9) 1).\ntotal 12.\n\n\xc2\xa0\nconstraints:\n\n1 400\n\n' side it, see bottom.\n\xc2\xa0\nexampl [1,2,3,null,5,null,4]\noutput: [1,3,4]\n\nexampl [1,null,3]\noutput: [1,3]\n\nexampl (land) (water), islands.\nan island land vertically. water.\n\xc2\xa0\nexampl [\n ["1","1","1","1","0"],\n ["1","1","0","1","0"],\n ["1","1","0","0","0"],\n ["0","0","0","0","0"]\n]\noutput: ["0","0","1","0","0"],\n ["0","0","0","1","1"]\n]\noutput: 3\n\n\xc2\xa0\nconstraints:\n\nm 300\ngrid[i][j] [left, right], bitwis and range, inclusive.\n\xc2\xa0\nexampl 4\n\nexampl 2147483647\noutput: happy.\na happi process:\n\nstart digits.\nrepeat process (where stay), loop endlessli 1.\nthose happy.\n\nreturn not.\n\xc2\xa0\nexampl 19\noutput: true\nexplanation:\n12 92 82\n82 22 68\n62 82 100\n12 02 [1,2,6,3,4,5,6], [1,2,3,4,5]\n\nexampl [7,7,7,7], 50\n\n' prime isomorphic.\ntwo isomorph t.\nall character, "egg", "add"\noutput: "foo", "bar"\noutput: false\nexampl "paper", "title"\noutput: true\n\n\xc2\xa0\nconstraints:\n\n1 104\nt.length s.length\n character.\n\n' [5,4,3,2,1]\n\nexampl [1,2]\noutput: [2,1]\n\nexampl 5000\n\n\xc2\xa0\nfollow recursively. both?\n' numcours cours take, prerequisit prerequisites[i] [ai, bi] bi ai.\n\nfor 1.\n\nreturn finish courses. [[1,0]]\noutput: take. \nto so possible.\n\nexampl [[1,0],[0,1]]\noutput: impossible.\n\n\xc2\xa0\nconstraints:\n\n1 2000\n0 prerequisites.length 5000\nprerequisites[i].length ai, numcourses\nal trie (pronounc "try") dataset strings. variou applic structure, autocomplet spellchecker.\nimpl class:\n\ntrie() insert(str word) trie.\nboolean search(str before), otherwise.\nboolean startswith(str prefix) previous otherwise.\n\n\xc2\xa0\nexampl 1:\ninput\n["trie", "insert", "search", "startswith", "search"]\n[[], ["apple"], ["app"], ["app"]]\noutput\n[null, false, true]\n\nexplanation\ntri trie();\ntrie.insert("apple");\ntrie.search("apple"); true\ntrie.search("app"); false\ntrie.startswith("app"); true\ntrie.insert("app");\ntrie.search("app"); word.length, prefix.length 2000\nword letters.\nat insert, search, startswith.\n\n' [numsl, numsl+1, numsr-1, numsr] subarray, instead.\n\xc2\xa0\nexampl [2,3,1,2,4,3]\noutput: [4,3] constraint.\n\nexampl [1,4,4]\noutput: 11, [1,1,1,1,1,1,1,1]\noutput: 0\n\n\xc2\xa0\nconstraints:\n\n1 109\n1 105\n1 log(n)).' answers, courses, [0,1].\n\nexampl [[1,0],[2,0],[3,1],[3,2]]\noutput: [0,2,1,3]\nexplanation: taken 0.\nso [0,1,2,3]. [0,2,1,3].\n\nexampl [0]\n\n\xc2\xa0\nconstraints:\n\n1 (numcours 1)\nprerequisites[i].length numcourses\nai bi\nal distinct.\n\n' string.\nimpl worddictionari class:\n\nworddictionary()\xc2\xa0initi addword(word) later.\nbool search(word)\xc2\xa0return word\xc2\xa0or otherwise. letter.\n\n\xc2\xa0\nexample:\ninput\n["worddictionary","addword","addword","addword","search","search","search","search"]\n[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]\noutput\n[null,null,null,null,false,true,true,true]\n\nexplanation\nworddictionari worddictionary();\nworddictionary.addword("bad");\nworddictionary.addword("dad");\nworddictionary.addword("mad");\nworddictionary.search("pad"); false\nworddictionary.search("bad"); true\nworddictionary.search(".ad"); true\nworddictionary.search("b.."); 25\nword addword letters.\nword letters.\nther queries.\nat search.\n\n' board\xc2\xa0of board.\neach word.\n\xc2\xa0\nexampl [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], ["oath","pea","eat","rain"]\noutput: ["eat","oath"]\n\nexampl [["a","b"],["c","d"]], ["abcb"]\noutput: []\n\n\xc2\xa0\nconstraints:\n\nm 12\nboard[i][j] letter.\n1 10\nwords[i] stashed. all circle. meanwhile, connected, and\xc2\xa0it [2,3,2]\noutput: houses.\n\nexampl 3\n\n\xc2\xa0\nconstraints:\n\n1 front it.\nreturn perform transformation.\n\xc2\xa0\nexampl "aacecaaa"\noutput: "aaacecaaa"\nexampl "abcd"\noutput: "dcbabcd"\n\n\xc2\xa0\nconstraints:\n\n0 array.\nnot element.\n\xc2\xa0\nexampl [3,2,1,5,6,4], 5\nexampl [3,2,3,1,2,4,5,5,6], b'find condit true:\n\nonli used.\neach once.\n\nreturn combinations. twice, [[1,2,4]]\nexplanation:\n1 7\nthere combinations.\nexampl [[1,2,6],[1,3,5],[2,3,4]]\nexplanation:\n1 9\n2 9\nthere combinations.\nus [1,9], 1+2+3+4 combination.\n\n\xc2\xa0\nconstraints:\n\n2 60\n\n' distinct.\n\xc2\xa0\nexampl [1,1,1,3,3,4,3,2,4,2]\noutput: city\' skylin outer contour silhouett build citi view distance. buildings, collectively.\nth geometr inform buildings[i] [lefti, righti, heighti]:\n\nlefti coordin building.\nrighti building.\nheighti building.\n\ny ground flat surfac 0.\nthe "key points" x-coordin [[x1,y1],[x2,y2],...]. y-coordin skyline\' termin rightmost ends. contour.\nnote: skyline. instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] acceptable; such: 7],...]\n\xc2\xa0\nexampl [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\noutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nexplanation:\nfigur show input.\nfigur buildings. list.\n\nexampl [[0,2,3],[2,5,3]]\noutput: [[0,3],[5,0]]\n\n\xc2\xa0\nconstraints:\n\n1 buildings.length lefti righti 1\n1 heighti 1\nbuild in\xc2\xa0non-decreas abs(i j) k.\n\xc2\xa0\nexampl [1,2,3,1], [1,0,1,1], [1,2,3,1,2,3], 109\n0 abs(nums[i] nums[j]) [1,5,9,1,5,9], [["0","1"],["1","0"]]\noutput: 0\n\n\xc2\xa0\nconstraints:\n\nm 300\nmatrix[i][j] tree.\naccord wikipedia, last, far 2h h.\ndesign than\xc2\xa0o(n)\xc2\xa0tim [1,2,3,4,5,6]\noutput: 1\n\n\xc2\xa0\nconstraints:\n\nth 104].\n0 104\nthe complete.\n\n' rectilinear rectangles.\nth bottom-left (ax1, ay1) top-right (ax2, ay2).\nth (bx1, by1) (bx2, by2).\n\xc2\xa0\nexampl ax1 -3, ay1 ax2 ay2 bx1 by1 bx2 by2 45\n\nexampl -2, 16\n\n\xc2\xa0\nconstraints:\n\n-104 ax1, ay1, ax2, ay2, bx1, by1, bx2, expression, basic evaluation.\nnote: mathemat expressions, eval().\n\xc2\xa0\nexampl "1 1"\noutput: 2-1 "(1+(4+5+2)-3)+(6+8)"\noutput: \'.\n expression.\n\'+\' unari "+1" "+(2 3)" invalid).\n\'-\' "-1" "-(2 valid).\nther input.\neveri last-in-first-out (lifo) queues. normal (push, empty).\nimpl mystack class:\n\nvoid x) it.\nint stack.\nboolean empty() otherwise.\n\nnotes:\n\ny standard queue, back, peek/pop front, valid.\ndepend queue natively. simul dequ (double-end queue) long queue\' operations.\n\n\xc2\xa0\nexampl 1:\ninput\n["mystack", "push", "top", "pop", "empty"]\n[[], false]\n\nexplanation\nmystack mystack();\nmystack.push(1);\nmystack.push(2);\nmystack.top(); 2\nmystack.pop(); 2\nmystack.empty(); 9\nat 100 empty.\nal pop valid.\n\n\xc2\xa0\nfollow-up: queue?\n' invert root.\n\xc2\xa0\nexampl [4,2,7,1,3,6,9]\noutput: [4,7,2,9,6,3,1]\n\nexampl [2,3,1]\n\nexampl value.\xc2\xa0\nth zero.\ny intermedi 1].\nnote: "3+2*2"\noutput: 7\nexampl 3/2 3+5 5\n\n\xc2\xa0\nconstraints:\n\n1 (\'+\', spaces.\n expression.\nal 1].\nthe nums.\na [a,b] (inclusive).\nreturn exactly. ranges, nums.\neach as:\n\n"a->b" b\n"a" b\n\n\xc2\xa0\nexampl [0,1,2,4,5,7]\noutput: ["0->2","4->5","7"]\nexplanation: are:\n[0,2] "0->2"\n[4,5] "4->5"\n[7,7] "7"\n\nexampl [0,2,3,4,6,8,9]\noutput: ["0","2->4","6","8->9"]\nexplanation: are:\n[0,0] "0"\n[2,4] "2->4"\n[6,6] "6"\n[8,9] "8->9"\n\n\xc2\xa0\nconstraints:\n\n0 20\n-231 1\nall \xe2\x8c\x8a n/3 \xe2\x8c\x8b times.\n\xc2\xa0\nexampl [3]\n\nexampl [1]\n\nexampl [1,2]\n\n\xc2\xa0\nconstraints:\n\n1 (1-indexed) [3,1,4,null,2], [5,3,6,2,4,null,null,1], 3\n\n\xc2\xa0\nconstraints:\n\nth often operations) frequently, optimize?\n' two. false.\nan two, 2x.\n\xc2\xa0\nexampl 16\noutput: 24 16\n\nexampl false\n\n\xc2\xa0\nconstraints:\n\n-231 loops/recursion?' (fifo) stacks. peek, myqueu queue.\nint peek() queue.\nboolean stack, size, stack\' 1:\ninput\n["myqueue", "peek", false]\n\nexplanation\nmyqueu myqueue();\nmyqueue.push(1); is: [1]\nmyqueue.push(2); 2] (leftmost queue)\nmyqueue.peek(); 1\nmyqueue.pop(); [2]\nmyqueue.empty(); 100\xc2\xa0cal peek amort longer.\n' palindrome.\n\xc2\xa0\nexampl [1,2,2,1]\noutput: 9\n\n\xc2\xa0\nfollow ancestor (lca) bst.\naccord definit lca wikipedia: \xe2\x80\x9cth t itself).\xe2\x80\x9d\n\xc2\xa0\nexampl [6,2,8,0,4,7,9,null,null,3,5], definition.\n\nexampl 105].\n-109 109\nall unique.\np q\np bst.\n\n' [3,5,1,6,2,0,8,null,null,7,4], singly-link access directly.\nit [4,5,1,9], [4,1,9]\nexplanation: function.\n\nexampl [4,5,9]\nexplanation: function.\n\n\xc2\xa0\nconstraints:\n\nth 1000].\n-1000 unique.\nth node\n\n' answer[i] nums[i].\nth in\xc2\xa0o(n)\xc2\xa0tim [24,12,8,6]\nexampl [-1,1,0,-3,3]\noutput: [0,0,9,0,0]\n\n\xc2\xa0\nconstraints:\n\n2 105\n-30 30\nthe integer.\n\n\xc2\xa0\nfollow up:\xc2\xa0can o(1)\xc2\xa0extra\xc2\xa0spac analysis.)\n' integers\xc2\xa0nums, slide window.\n\xc2\xa0\nexampl [1,3,-1,-3,5,3,6,7], [3,3,5,5,6,7]\nexplanation: \nwindow max\n--------------- -----\n[1 -1] 3\n [3 -3] [-1 5] 5\n [-3 3] [5 6] 6\n 7] 7\n\nexampl [1]\n\n\xc2\xa0\nconstraints:\n\n1 nums.length\n\n' right.\ninteg bottom.\n\n\xc2\xa0\nexampl [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], 20\noutput: 300\n-109 order.\nal order.\n-109 operators, operators. "2-1-1"\noutput: [0,2]\nexplanation:\n((2-1)-1) \n(2-(1-1)) "2*3-4*5"\noutput: [-34,-14,-10,-10,10]\nexplanation:\n(2*(3-(4*5))) -34 \n((2*3)-(4*5)) -14 \n((2*(3-4))*5) -10 \n(2*((3-4)*5)) \n(((2*3)-4)*5) 10\n\n\xc2\xa0\nconstraints:\n\n1 expression.length 20\nexpress \'*\'.\nall 99].\n\n' otherwise.\nan "anagram", "nagaram"\noutput: "rat", "car"\noutput: what unicod characters? adapt case?\n' [1,2,3,null,5]\noutput: ["1->2->5","1->3"]\n\nexampl ["1"]\n\n\xc2\xa0\nconstraints:\n\nth num, repeatedli digit, 38\noutput: is\n38 11\n11 \nsinc it.\n\nexampl loop/recurs runtime?\n' an\xc2\xa0algorithm uses\xc2\xa0onli [1,2,1,3,2,5]\noutput: [3,5]\nexplanation: [5, [-1,0]\noutput: [-1,0]\n\nexampl [1,0]\n\n\xc2\xa0\nconstraints:\n\n2 ugli factor limit 5.\ngiven \xc3\x97 factors, 14\noutput: 14 7.\n\n\xc2\xa0\nconstraints:\n\n-231 12] numbers.\n\nexampl 5.\n\n\xc2\xa0\nconstraints:\n\n1 1690\n\n' n], [3,0,1]\noutput: [0,3]. nums.\n\nexampl [0,2]. [9,6,4,2,3,5,7,0,1]\noutput: 8\nexplanation: [0,9]. nums.\n\n\xc2\xa0\nconstraints:\n\nn n\nall unique.\n\n\xc2\xa0\nfollow b'convert representation.\n\xc2\xa0\nexampl "one hundr twenti three"\n\nexampl 12345\noutput: "twelv thousand forti five"\n\nexampl 1234567\noutput: million sixti seven"\n\n\xc2\xa0\nconstraints:\n\n0 citat citations[i] research receiv paper, researcher' h-index.\naccord h-index scientist paper each, each.\nif sever h, h-index.\n\xc2\xa0\nexampl [3,0,6,1,5]\noutput: [3,0,6,1,5] respectively.\nsinc [1,3,1]\noutput: citations.length\n1 citations\xc2\xa0i h-index.\ny [0,1,3,5,6]\noutput: [0,1,3,5,6] [1,2,100]\noutput: 1000\ncitat order.\n\n" manag team develop product. unfortunately, latest fail qualiti check. version, bad.\nsuppos n] bad.\nyou api bool isbadversion(version) bad. version. api.\n\xc2\xa0\nexampl 4\nexplanation:\ncal isbadversion(3) false\ncal isbadversion(5)\xc2\xa0-> true\ncal isbadversion(4)\xc2\xa0-> true\nthen version.\n\nexampl n.\na integer; itself. 16 12\noutput: 9.\n\n\xc2\xa0\nconstraints:\n\n1 value.\nnot zeros.\n\xc2\xa0\nexampl ["1*2*3","1+2+3"]\nexplanation: "1*2*3" "1+2+3" "232", ["2*3+2","2+3*2"]\nexplanation: "2*3+2" "2+3*2" 8.\n\nexampl "3456237490", 9191\noutput: "3456237490" 9191.\n\n\xc2\xa0\nconstraints:\n\n1 num.length 10\nnum digits.\n-231 0' maintain non-zero elements.\nnot [0,1,0,3,12]\noutput: [1,3,12,0,0]\nexampl done?" hasnext operations.\nimpl peekingiter class:\n\npeekingiterator(iterator<int> nums) iterator.\nint element.\nboolean array.\nint pointer.\n\nnote: languag constructor iterator, boolean functions.\n\xc2\xa0\nexampl 1:\ninput\n["peekingiterator", "hasnext"]\n[[[1, 3]], false]\n\nexplanation\npeekingiter peekingiterator([1, 3]); [1,2,3]\npeekingiterator.next(); [1,2,3].\npeekingiterator.peek(); [1,2,3].\npeekingiterator.next(); [1,2,3]\npeekingiterator.hasnext(); 1000\nall valid.\nat 1000 next, peek.\n\n\xc2\xa0\nfollow extend design types, integer?' containing\xc2\xa0n inclusive.\nther this\xc2\xa0repeated\xc2\xa0number.\ny [1,3,4,2,2]\noutput: [3,1,3,4,2]\noutput: 105\nnums.length precis up:\n\nhow prove nums?\ncan complexity?\n\n' b'accord to\xc2\xa0wikipedia\' article: game life, cellular automaton british mathematician john horton conway 1970."\nthe state: live dead 0). interact eight (horizontal, vertical, diagonal) rule (taken wikipedia article):\n\nani fewer under-population.\nani generation.\nani dies, over-population.\nani cell, reproduction.\n\nth state state, birth death simultaneously. board, state.\n\xc2\xa0\nexampl [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\noutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n\nexampl [[1,1],[1,0]]\noutput: [[1,1],[1,1]]\n\n\xc2\xa0\nconstraints:\n\nm 25\nboard[i][j] 1.\n\n\xc2\xa0\nfollow in-place? rememb updat simultaneously: cells.\nin question, principle, infinite, activ encroach border). problems?\n\n' s\xc2\xa0follow pattern.\nher full match, biject "abba", "dog cat dog"\noutput: fish"\noutput: "aaaa", pattern.length 300\npattern 3000\n spaces.\nal space.\n\n' play nim friend:\n\ninitially, heap stone table.\ny friend turns, first.\non turn, person turn heap.\nth winner.\n\ngiven heap, win optimally, these outcomes:\n1. stone. stones, wins.\n2. stones. wins.\n3. wins.\nin outcomes, wins.\n\nexampl even, values.\n\nfor 3.\nfor [2,3], 2.5.\n\nimplement medianfind class:\n\nmedianfinder() addnum(int num) stream structure.\ndoubl findmedian() far. 10-5 actual accepted.\n\n\xc2\xa0\nexampl 1:\ninput\n["medianfinder", "addnum", "findmedian", "findmedian"]\n[[], 1.5, 2.0]\n\nexplanation\nmedianfind medianfinder();\nmedianfinder.addnum(1); [1]\nmedianfinder.addnum(2); 2]\nmedianfinder.findmedian(); 1.5 2)\nmedianfinder.addnum(3); arr[1, 3]\nmedianfinder.findmedian(); 2.0\n\n\xc2\xa0\nconstraints:\n\n-105 105\nthere findmedian.\nat addnum findmedian.\n\n\xc2\xa0\nfollow up:\n\nif 100], solution?\nif 99% solution?\n\n' b'serial buffer, transmit across network reconstruct later environment.\ndesign deseri tree. restrict serialization/deseri work. structure.\nclarification: leetcod format, pleas creativ yourself.\n\xc2\xa0\nexampl [1,2,3,null,null,4,5]\noutput: [1,2,3,null,null,4,5]\n\nexampl bull cow friend.\nyou secret guess is. when guess, provid hint info:\n\nth "bulls", position.\nth "cows", wrong position. non-bul bulls.\n\ngiven friend\' guess.\nth "xayb", cows. "1807", "7810"\noutput: "1a3b"\nexplanation: \'|\' underlined:\n"1807"\n |\n"7810"\nexampl "1123", "0111"\noutput: "1a1b"\nexplanation: underlined:\n"1123" "1123"\n | |\n"0111" "0111"\nnote unmatch bull.\n\n\xc2\xa0\nconstraints:\n\n1 secret.length, guess.length 1000\nsecret.length guess.length\nsecret subsequence.\na deriv elements. [3,6,2,7] [0,3,1,6,2,2,7].\n\xc2\xa0\nexampl [10,9,2,5,3,7,101,18]\noutput: [2,3,7,101], [0,1,0,3,2,3]\noutput: [7,7,7,7,7,7,7]\noutput: 2500\n-104 in\xc2\xa0o(n log(n)) valid.\nreturn results. "()())()"\noutput: ["(())()","()()()"]\n\nexampl "(a)())()"\noutput: ["(a())()","(a)()()"]\n\nexampl ")("\noutput: [""]\n\n\xc2\xa0\nconstraints:\n\n1 25\n \')\'.\nthere queri type:\n\ncalcul right.\n\nimpl numarray class:\n\nnumarray(int[] nums.\nint sumrange(int nums[left] nums[left nums[right]).\n\n\xc2\xa0\nexampl 1:\ninput\n["numarray", "sumrange", "sumrange"]\n[[[-2, -5, -1]], 5], 5]]\noutput\n[null, -3]\n\nexplanation\nnumarray numarray([-2, -1]);\nnumarray.sumrange(0, (-2) 1\nnumarray.sumrange(2, 5); (-5) (-1) -1\nnumarray.sumrange(0, -3\n\n\xc2\xa0\nconstraints:\n\n1 104\n-105 nums.length\nat sumrange.\n\n' upper (row1, col1) lower (row2, col2).\n\nimpl nummatrix class:\n\nnummatrix(int[][] matrix) matrix.\nint sumregion(int row1, col1, row2, col2) col2).\n\n\xc2\xa0\nexampl 1:\n\ninput\n["nummatrix", "sumregion", "sumregion"]\n[[[[3, 7], 5]]], 4]]\noutput\n[null, 12]\n\nexplanation\nnummatrix nummatrix([[3, 5]]);\nnummatrix.sumregion(2, (i.e rectangle)\nnummatrix.sumregion(1, green blue rectangle)\n\n\xc2\xa0\nconstraints:\n\nm 200\n-105 sum(matrix[i][j]) row1 row2 m\n0 col1 col2 n\nat sumregion.\n\n' sequence.\na two.\ngiven otherwise.\nnote: zeros, 03 02, invalid.\n\xc2\xa0\nexampl "112358"\noutput: \nthe sequence: \n1 8\n\nexampl "199100199"\noutput: 99, 100, 199.\xc2\xa0\n1 99 199\n\n\xc2\xa0\nconstraints:\n\n1 35\nnum digits.\n\n\xc2\xa0\nfollow overflow integers?\n' types:\n\nupd nums.\ncalcul nums.\nvoid update(int nums[index] val.\nint "update", "sumrange"]\n[[[1, 5]], 2]]\noutput\n[null, 8]\n\nexplanation\nnumarray numarray([1, 5]);\nnumarray.sumrange(0, 9\nnumarray.update(1, 5]\nnumarray.sumrange(0, 8\n\n\xc2\xa0\nconstraints:\n\n1 nums.length\n-100 times) restrictions:\n\naft stock, cooldown day).\n\nnote: [1,2,3,0,2]\noutput: [buy, sell, cooldown, buy, sell]\n\nexampl by\xc2\xa0exactly\xc2\xa0on path. tree.\ngiven nodes\xc2\xa0label of\xc2\xa0n 1\xc2\xa0edg edges[i] nodes\xc2\xa0ai and\xc2\xa0bi tree,\xc2\xa0y root. select root, h. trees, min(h))\xc2\xa0 (mhts).\nreturn mhts' labels.\xc2\xa0y leaf.\n\xc2\xa0\nexampl [[1,0],[1,2],[1,3]]\noutput: as shown, mht.\n\nexampl [[3,0],[3,1],[3,2],[3,4],[5,4]]\noutput: [3,4]\n\n\xc2\xa0\nconstraints:\n\n1 104\nedges.length n\nai (ai, bi) distinct.\nth edges.\n\n" balloons, balloon paint burst balloons.\nif balloon, coins. goe bound coin wisely.\n\xc2\xa0\nexampl [3,1,5,8]\noutput: 167\nexplanation:\nnum [3,1,5,8] [3,5,8] [3,8] [8] []\ncoin 3*1*5 3*5*8 1*3*8 1*8*1 167\nexampl [1,5]\noutput: 10\n\n\xc2\xa0\nconstraints:\n\nn 300\n0 super primes.\ngiven primes, number.\nth 12, [2,7,13,19]\noutput: 32\nexplanation: [1,2,4,7,8,13,14,16,19,26,28,32] [2,7,13,19].\n\nexampl [2,3,5]\noutput: [2,3,5].\n\n\xc2\xa0\nconstraints:\n\n1 primes.length 100\n2 primes[i] 1000\nprimes[i] number.\nal properti counts[i] nums[i].\n\xc2\xa0\nexampl [5,2,6,1]\noutput: [2,1,1,0]\nexplanation:\nto 1).\nto (1).\nto element.\n\nexampl [-1,-1]\noutput: [0,0]\n\n\xc2\xa0\nconstraints:\n\n1 sure results.\n\xc2\xa0\nexampl "bcabc"\noutput: "abc"\n\nexampl "cbacdcbc"\noutput: "acdb"\n\n\xc2\xa0\nconstraints:\n\n1 letters.\n\n\xc2\xa0\nnote: 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n' length(word[i]) length(word[j]) letters. exist, ["abcw","baz","foo","bar","xtfn","abcdef"]\noutput: 16\nexplanation: "abcw", "xtfn".\n\nexampl ["a","ab","abc","d","cd","bcd","abcd"]\noutput: "cd".\n\nexampl ["a","aa","aaa","aaaa"]\noutput: words.\n\n\xc2\xa0\nconstraints:\n\n2 1000\nwords[i] bulb off. bulbs, then\xc2\xa0y bulb.\non round, toggl (turn on). bulb. bulb.\nreturn rounds.\n\xc2\xa0\nexampl at [off, off, off].\naft [on, on, on].\naft off]. \nso on.\nexampl 1\n\n\xc2\xa0\nconstraints:\n\n0 109\n\n" k.\ncreat preserved.\nreturn answer.\n\xc2\xa0\nexampl [3,4,6,5], [9,1,2,5,8,3], [9,8,6,5,3]\n\nexampl [6,7], [6,0,4], [6,7,6,0,4]\n\nexampl [3,9], [8,9], [9,8,9]\n\n\xc2\xa0\nconstraints:\n\nm nums1.length\nn nums2.length\n1 500\n0 money.\nreturn fewest amount. coins, -1.\nyou infinit kind coin.\n\xc2\xa0\nexampl [1,2,5], 11\noutput: -1\n\nexampl coins.length 12\n1 coins[i] nums[2] nums[3]....\nyou [1,5,1,1,6,4]\noutput: [1,6,1,5,1,4]\nexplanation: [1,4,1,5,1,6] accepted.\n\nexampl [1,3,2,2,3,1]\noutput: [2,3,1,3,1,2]\n\n\xc2\xa0\nconstraints:\n\n1 5000\nit nums.\n\n\xc2\xa0\nfollow three. three, 3x.\n\xc2\xa0\nexampl 27\noutput: true\n\n\xc2\xa0\nconstraints:\n\n-231 upper, [lower, upper] inclusive.\nrang s(i, j.\n\xc2\xa0\nexampl [-2,5,-1], are: [0,0], [2,2], [0,2] 1\n-105 105\nthe odd indices, odd, on.\nnot input.\ny problem\xc2\xa0in o(1)\xc2\xa0extra [1,3,5,2,4]\n\nexampl [2,1,3,5,6,4,7]\noutput: [2,3,6,7,1,5,4]\n\n\xc2\xa0\nconstraints:\n\nth 104].\n-106 matrix.\nfrom directions: up, down. diagon boundari wrap-around allowed).\n\xc2\xa0\nexampl [[9,9,4],[6,6,8],[2,1,1]]\noutput: 9].\n\nexampl [[3,4,5],[3,2,6],[2,2,1]]\noutput: 6]. allowed.\n\nexampl [[1]]\noutput: add/patch array.\nreturn patch required.\n\xc2\xa0\nexampl 1\nexplanation:\ncombin of: 4.\nnow [1,2,3].\npossibl 6].\nso patch.\n\nexampl [1,5,10], 4].\n\nexampl [1,2,2], order.\n1 b'one traversal. encount non-nul record node\' value. sentinel \'#\'.\n\nfor "9,3,4,#,#,1,#,#,2,#,6,#,#", \'#\' node.\ngiven comma-separ preorder, tree.\nit pointer.\ny valid.\n\nfor commas, "1,,3".\n\nnote:\xc2\xa0y "9,3,4,#,#,1,#,#,2,#,6,#,#"\noutput: "1,#"\noutput: "9,#,#,1"\noutput: 104\npreorder 100] comma \',\'.\n\n' airlin ticket tickets[i] [fromi, toi] departur airport flight. itinerari it.\nal man depart "jfk", thus, "jfk". itineraries, lexic string.\n\nfor ["jfk", "lga"] "lgb"].\n\nyou itinerary. [["muc","lhr"],["jfk","muc"],["sfo","sjc"],["lhr","sfo"]]\noutput: ["jfk","muc","lhr","sfo","sjc"]\n\nexampl [["jfk","sfo"],["jfk","atl"],["sfo","atl"],["atl","jfk"],["atl","sfo"]]\noutput: ["jfk","atl","jfk","sfo","atl","sfo"]\nexplanation: ["jfk","sfo","atl","jfk","atl","sfo"] order.\n\n\xc2\xa0\nconstraints:\n\n1 tickets.length 300\ntickets[i].length 2\nfromi.length 3\ntoi.length 3\nfromi toi letters.\nfromi toi\n\n' tripl k) nums[k]. [5,4,3,2,1]\noutput: exists.\n\nexampl [2,1,5,0,4,6]\noutput: (3, 5) nums[3] nums[4] nums[5] distance.\ny (0,0) plane distance[0] meter north, distance[1] west, distance[2] south, distance[3] east, move, direct counter-clockwise.\nreturn cross itself, distanc [2,1,1,2]\noutput: [1,1,1,1]\noutput: <=\xc2\xa0distance.length <=\xc2\xa0distance[i] the\xc2\xa0distinct words\xc2\xa0words[i] words[j] ["abcd","dcba","lls","s","sssll"]\noutput: [[0,1],[1,0],[3,2],[2,4]]\nexplanation: ["dcbaabcd","abcddcba","slls","llssssll"]\n\nexampl ["bat","tab","cat"]\noutput: [[0,1],[1,0]]\nexplanation: ["battab","tabbat"]\n\nexampl ["a",""]\noutput: [[0,1],[1,0]]\n\n\xc2\xa0\nconstraints:\n\n1 300\nwords[i] thief thieveri again. entranc root.\nbesid house. after tour, smart realiz directly-link [3,2,3,null,3,null,1]\noutput: [3,4,5,1,3,null,1]\noutput: 9.\n\n\xc2\xa0\nconstraints:\n\nth ans[i] 1' i.\n\xc2\xa0\nexampl [0,1,1]\nexplanation:\n0 0\n1 1\n2 10\n\nexampl [0,1,1,2,1,2]\nexplanation:\n0 10\n3 11\n4 100\n5 101\n\n\xc2\xa0\nconstraints:\n\n0 up:\n\nit easi log n). pass?\ncan __builtin_popcount c++)?\n\n" nest nestedlist. lists. it.\nimpl nestediter class:\n\nnestediterator(list<nestedinteger> nestedlist) nestedlist.\nint list.\nboolean otherwise.\n\nyour pseudocode:\niniti nestedlist\nr []\nwhile iterator.hasnext()\n append iterator.next() res\nreturn res\n\nif re correct.\n\xc2\xa0\nexampl nestedlist [[1,1],2,[1,1]]\noutput: [1,1,2,1,1]\nexplanation: by be: [1,1,2,1,1].\n\nexampl [1,[4,[6]]]\noutput: [1,4,6]\nexplanation: [1,4,6].\n\n\xc2\xa0\nconstraints:\n\n1 nestedlist.length 500\nthe [-106, 106].\n\n' four, 4x.\n\xc2\xa0\nexampl break >= integers.\nreturn get.\n\xc2\xa0\nexampl 36\nexplanation: 36.\n\n\xc2\xa0\nconstraints:\n\n2 58\n\n' s.\nyou ["h","e","l","l","o"]\noutput: ["o","l","l","e","h"]\nexampl ["h","a","n","n","a","h"]\noutput: ["h","a","n","n","a","h"]\n\n\xc2\xa0\nconstraints:\n\n1 vowel \'i\', \'u\', cases.\n\xc2\xa0\nexampl "hello"\noutput: "holle"\nexampl "leetcode"\noutput: "leotcede"\n\n\xc2\xa0\nconstraints:\n\n1 frequent [1,1,1,2,2,3], [1,2]\nexampl 105\nk array].\nit algorithm' size.\n" intersection. [1,2,2,1], [2,2]\noutput: [2]\n\nexampl [4,9,5], [9,4,9,8,4]\noutput: [9,4]\nexplanation: [4,9] accepted.\n\n\xc2\xa0\nconstraints:\n\n1 nums1.length, nums2.length [2,2]\n\nexampl [4,9]\nexplanation: [9,4] 1000\n\n\xc2\xa0\nfollow up:\n\nwhat sorted? algorithm?\nwhat nums1' small nums2' size? which better?\nwhat disk, load once?\n\n" a1, a2, an, summar seen disjoint intervals.\nimpl summaryrang class:\n\nsummaryranges() stream.\nvoid stream.\nint[][] getintervals() summari endi].\n\n\xc2\xa0\nexampl 1:\ninput\n["summaryranges", "getintervals", "getintervals"]\n[[], [7], [6], [[1, 1]], [7, 7]], [6, 7]]]\n\nexplanation\nsummaryrang summaryranges();\nsummaryranges.addnum(1); [1]\nsummaryranges.getintervals(); 1]]\nsummaryranges.addnum(3); 3]\nsummaryranges.getintervals(); 3]]\nsummaryranges.addnum(7); 7]\nsummaryranges.getintervals(); 7]]\nsummaryranges.addnum(2); 7]]\nsummaryranges.addnum(6); 7]]\n\n\xc2\xa0\nconstraints:\n\n0 104\nat getintervals.\n\n\xc2\xa0\nfollow lot stream?\n' envelop envelopes[i] [wi, hi] envelope.\non envelope' height.\nreturn russian doll put other).\nnote: envelope.\n\xc2\xa0\nexampl [[5,4],[6,4],[6,7],[2,3]]\noutput: ([2,3] => [5,4] [6,7]).\n\nexampl [[1,1],[1,1],[1,1]]\noutput: envelopes.length 105\nenvelopes[i].length 2\n1 wi, hi twitter user post tweets, follow/unfollow user, abl tweet user\' news feed.\nimpl class:\n\ntwitter() posttweet(int userid, tweetid) id tweetid userid. tweetid.\nlist<integer> getnewsfeed(int userid) feed. item feed themself. recent.\nvoid follow(int followerid, followeeid) followerid followeeid.\nvoid unfollow(int unfollow followeeid.\n\n\xc2\xa0\nexampl 1:\ninput\n["twitter", "posttweet", "getnewsfeed", "follow", "unfollow", "getnewsfeed"]\n[[], 6], [1]]\noutput\n[null, [5]]\n\nexplanation\ntwitt twitter();\ntwitter.posttweet(1, (id 5).\ntwitter.getnewsfeed(1); [5]. [5]\ntwitter.follow(1, 2.\ntwitter.posttweet(2, 6); 6).\ntwitter.getnewsfeed(1); 5]. 5.\ntwitter.unfollow(1, 2.\ntwitter.getnewsfeed(1); longer 2.\n\n\xc2\xa0\nconstraints:\n\n1 followeeid ids.\nat posttweet, getnewsfeed, follow, unfollow.\n\n' 10n.\n\xc2\xa0\nexampl 91\nexplanation: \xe2\x89\xa4 exclud 11,22,33,44,55,66,77,88,99\n\nexampl k.\nit [[1,0,1],[0,-2,3]], [[0, [-2, 3]] (k [[2,2,-1]], 100\n-100 100\n-105 columns?\n' jug jug1capac jug2capac liters. suppli available. measur targetcapac liter jugs.\nif measurable, bucket end.\noper allowed:\n\nfil water.\nempti jugs.\npour till full, empty.\n\n\xc2\xa0\nexampl famou hard \n\nexampl jug1capacity, jug2capacity, els false.\nfollow sqrt.\n\xc2\xa0\nexampl 2^31 (answer[i], answer[j]) satisfies:\n\nanswer[i] % answer[j] or\nanswer[j] 0\n\nif solutions, them.\n\xc2\xa0\nexampl [1,2,4,8]\noutput: [1,2,4,8]\n\n\xc2\xa0\nconstraints:\n\n1 -.\n\xc2\xa0\nexampl 5\n\n\xc2\xa0\nconstraints:\n\n-1000 b'your task ab 1337 extrem [3]\noutput: [1,0]\noutput: 1024\n\nexampl [4,3,3,8,5,2]\noutput: b[i] 9\nb k.\ndefin (u, v) (u1, v1), (u2, v2), (uk, vk) sums.\n\xc2\xa0\nexampl [1,7,11], [2,4,6], [[1,2],[1,4],[1,6]]\nexplanation: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n\nexampl [1,1,2], [[1,1],[1,1]]\nexplanation: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n\nexampl [[1,3],[2,3]]\nexplanation: [1,3],[2,3]\n\n\xc2\xa0\nconstraints:\n\n1 109\nnums1 game. follows:\ni pick picked.\neveri wrong, tell guess.\nyou pre-defin guess(int num), results:\n\n-1: pick).\n1: pick).\n0: pick).\n\nreturn picked.\n\xc2\xa0\nexampl follows:\n\ni between\xc2\xa01\xc2\xa0and\xc2\xa0n.\ny number.\nif game.\nif lower, guessing.\neveri number\xc2\xa0x, pay\xc2\xa0x\xc2\xa0dollars. money, game.\n\ngiven particular\xc2\xa0n, return\xc2\xa0th to\xc2\xa0guarante regardless pick.\n\xc2\xa0\nexampl strategi follows:\n- [1,10]. 7.\n\xc2\xa0 $0. pay $7.\n\xc2\xa0 higher, [8,10]. 9.\n\xc2\xa0 $7. $9.\n\xc2\xa0 10. $7 $9 $16.\n\xc2\xa0 [1,6]. 3.\n\xc2\xa0 $3.\n\xc2\xa0 [4,6]. 5.\n\xc2\xa0 $3 $10. $5.\n\xc2\xa0 $5 $15.\n\xc2\xa0 [1,2]. 1.\n\xc2\xa0 $1.\n\xc2\xa0 $1 $11.\nthe worst $16. hence, $16 win.\n\nexampl 0\nexplanation:\xc2\xa0ther anything.\n\nexampl 1\nexplanation:\xc2\xa0ther 2.\n- $1.\nthe $1.\n\n\xc2\xa0\nconstraints:\n\n1 wiggl negative. exists) non-equ trivial sequences.\n\nfor (6, -7, negative.\nin contrast, sequences. positive, zero.\n\na obtain (possibl zero) order.\ngiven nums.\n\xc2\xa0\nexampl [1,7,4,9,2,5]\noutput: [1,17,5,10,13,15,10,5,16,8]\noutput: length.\non 17, 13, 16, 8] (16, -8).\n\nexampl [1,2,3,4,5,6,7,8,9]\noutput: to\xc2\xa0target.\nth 7\nexplanation:\nth are:\n(1, 1)\n(1, 2)\n(1, 3)\n(2, 1)\n(2, 2)\n(3, 1)\nnote [9], unique.\n1 array? problem? numbers?\n' matrix.\nnot element.\ny o(n2).\n\xc2\xa0\nexampl [[1,5,9],[10,11,13],[12,13,15]], 13\nexplanation: [1,5,9,10,11,12,13,13,15], 8th 13\n\nexampl [[-5]], -5\n\n\xc2\xa0\nconstraints:\n\nn n2\n\n\xc2\xa0\nfollow complexity)?\ncould advanc interview fun.\n\n' randomizedset class:\n\nrandomizedset() object.\nbool insert(int present. present, otherwise.\nbool remove(int otherwise.\nint getrandom() (it\' method called). returned.\n\ny in\xc2\xa0average\xc2\xa0o(1)\xc2\xa0tim 1:\ninput\n["randomizedset", "remove", "getrandom", "getrandom"]\n[[], 2]\n\nexplanation\nrandomizedset randomizedset();\nrandomizedset.insert(1); set. successfully.\nrandomizedset.remove(2); set.\nrandomizedset.insert(2); set, true. [1,2].\nrandomizedset.getrandom(); randomly.\nrandomizedset.remove(1); [2].\nrandomizedset.insert(2); false.\nrandomizedset.getrandom(); 2.\n\n\xc2\xa0\nconstraints:\n\n-231 1\nat *\xc2\xa0105 remove, getrandom.\nther getrandom called.\n\n' b'randomizedcollect multiset). element.\nimpl randomizedcollect class:\n\nrandomizedcollection() multiset, multiset them.\nint linearli relat contains.\n\ny complexity.\nnote: randomizedcollection.\n\xc2\xa0\nexampl 1:\ninput\n["randomizedcollection", 1]\n\nexplanation\nrandomizedcollect randomizedcollection();\nrandomizedcollection.insert(1); 1.\n collection.\nrandomizedcollection.insert(1); collection. [1,1].\nrandomizedcollection.insert(2); 2.\n [1,1,2].\nrandomizedcollection.getrandom(); should:\n 2/3, or\n 1/3.\nrandomizedcollection.remove(1); [1,2].\nrandomizedcollection.getrandom(); likely.\n\n\xc2\xa0\nconstraints:\n\n-231 chosen.\nimpl class:\n\nsolution(listnod head.\nint randomli chosen.\n\n\xc2\xa0\nexampl 1:\n\ninput\n["solution", "getrandom"]\n[[[1, 3]\n\nexplanation\nsolut solution([1, 3]);\nsolution.getrandom(); 1\nsolution.getrandom(); 3\nsolution.getrandom(); 2\nsolution.getrandom(); 3\n// randomly. returning.\n\n\xc2\xa0\nconstraints:\n\nth 104].\n-104 getrandom.\n\n\xc2\xa0\nfollow you?\ncould ransomnot magazine, magazin otherwise.\neach ransomnote.\n\xc2\xa0\nexampl "b"\noutput: ransomnote.length, magazine.length 105\nransomnot shuffl shuffling.\nimpl class:\n\nsolution(int[] nums.\nint[] reset() reset it.\nint[] shuffle() array.\n\n\xc2\xa0\nexampl 1:\ninput\n["solution", "shuffle", "reset", "shuffle"]\n[[[1, 2]]\n\nexplanation\nsolut 3]);\nsolution.shuffle(); result.\n returned.\n example: 2]\nsolution.reset(); [1,2,3]. 3]\nsolution.shuffle(); 2]\n\n\n\xc2\xa0\nconstraints:\n\n1 50\n-106 106\nall unique.\nat shuffle.\n\n' parser nestedinteger.\neach lists.\n\xc2\xa0\nexampl "324"\noutput: 324\nexplanation: nestedinteg 324.\n\nexampl "[123,[456,[789]]]"\noutput: [123,[456,[789]]]\nexplanation: elements:\n1. 123.\n2. elements:\n i. 456.\n element:\n a. 789\n\n\xc2\xa0\nconstraints:\n\n1 "[]", \',\'.\n nestedinteger.\nal space.\xc2\xa0\n\xc2\xa0\nexampl [1,10,11,12,13,2,3,4,5,6,7,8,9]\nexampl non-rep -1.\n\xc2\xa0\nexampl 0\nexampl "loveleetcode"\noutput: "aabb"\noutput: directories. picture:\n\nhere, dir subdirectories, subdir1 subdir2. file1.ext subdirectori subsubdir1. subdir2 subsubdir2, file2.ext.\nin form, \xe2\x9f\xb6 tab character):\ndir\n\xe2\x9f\xb6 subdir1\n\xe2\x9f\xb6 file1.ext\n\xe2\x9f\xb6 subsubdir1\n\xe2\x9f\xb6 subdir2\n\xe2\x9f\xb6 subsubdir2\n\xe2\x9f\xb6 file2.ext\n\nif code, "dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext". \'\\n\' \'\\t\' new-lin characters.\neveri open \'/\'s. file2.ext "dir/subdir2/subsubdir2/file2.ext". name spaces. name.extension, extens spaces.\ngiven abstract system. 0.\nnote "dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext"\noutput: 20\nexplanation: file, "dir/subdir2/file.ext" 20.\n\nexampl "dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext"\noutput: files:\n"dir/subdir1/file1.ext" 21\n"dir/subdir2/subsubdir2/file2.ext" 32.\nwe file.\n\nexampl files, "a".\n\n\xc2\xa0\nconstraints:\n\n1 input.length 104\ninput \'\\n\', \'\\t\', digits.\nal length.\n\n' t.\nstring t.\n\xc2\xa0\nexampl "abcd", "abcde"\noutput: "e"\nexplanation: added.\n\nexampl "y"\noutput: "y"\n\n\xc2\xa0\nconstraints:\n\n0 1000\nt.length 1\n arr:\n\nstart afterward list.\nrepeat again, numbers.\nkeep remains.\n\ngiven arr.\n\xc2\xa0\nexampl 6\nexplanation:\narr 9]\narr 8]\narr 6]\narr [6]\n\nexampl rectangles[i] yi, axis-align rectangle. (xi, yi) bi).\nreturn exact rectangular [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\noutput: region.\n\nexampl [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\noutput: gap regions.\n\nexampl [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\noutput: other.\n\n\xc2\xa0\nconstraints:\n\n1 rectangles.length 104\nrectangles[i].length 4\n-105 otherwise.\na not).\n\xc2\xa0\nexampl "ahbgdc"\noutput: "axc", false\n\n\xc2\xa0\nconstraints:\n\n0 suppos incom 109, subsequence. scenario, code?' utf-8 translat characters).\na utf8 byte long, rules:\n\nfor 1-byte code.\nfor n-byte one's, 10.\n\nthi work:\n octet sequence\n (binary)\n --------------------+-----------------------------------------\n 0xxxxxxx\n 110xxxxx 10xxxxxx\n 1110xxxx 10xxxxxx 11110xxx 10xxxxxx\n\nx 1.\nnote: data. data.\n\xc2\xa0\nexampl [197,130,1]\noutput: 11000101 10000010 00000001.\nit 2-byte character.\n\nexampl [235,140,4]\noutput: 11101011 10001100 00000100.\nthe one' 3-byte character.\nth that' correct.\nbut invalid.\n\n\xc2\xa0\nconstraints:\n\n1 data.length data[i] 255\n\n" string.\nth k[encoded_string], encoded_str valid; well-formed, etc. furthermore, k. 3a 2[4].\nthe 105.\n\xc2\xa0\nexampl "3[a]2[bc]"\noutput: "aaabcbc"\n\nexampl "3[a2[c]]"\noutput: "accaccacc"\n\nexampl "2[abc]3[cd]ef"\noutput: "abcabccdcdcdef"\n\n\xc2\xa0\nconstraints:\n\n1 \'[]\'.\n input.\nal 300].\n\n' "aaabb", "aaa", "ababbc", "ababb", \'b\' times.\n\n\xc2\xa0\nconstraints:\n\n1 n.\nassum arrk clock-wise. f follow:\n\nf(k) arrk[0] arrk[1] arrk[n 1].\n\nreturn f(0), f(1), f(n-1).\nthe [4,3,2,6]\noutput: 26\nexplanation:\nf(0) 4) (3 6) 18 25\nf(1) 16\nf(2) 23\nf(3) 26\nso f(2), f(3) 26.\n\nexampl [100]\noutput: 105\n-100 n,\xc2\xa0you following\xc2\xa0operations:\n\nif 2.\nif 1\nor array.\nimpl pick(int target) i\'s, returning.\n\n\xc2\xa0\nexampl "pick", "pick"]\n[[[1, [3]]\noutput\n[null, 2]\n\nexplanation\nsolut 3]);\nsolution.pick(3); returning.\nsolution.pick(1); 1.\nsolution.pick(3); returning.\n\n\xc2\xa0\nconstraints:\n\n1 1\ntarget nums.\nat pick.\n\n' variabl equat real equations[i] values[i] ai values[i]. variable.\ny queries, queries[j] [cj, dj] jth cj dj ?.\nreturn queries. determined, -1.0.\nnote: contradiction.\n\xc2\xa0\nexampl [["a","b"],["b","c"]], [2.0,3.0], [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]\noutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nexplanation: \ngiven: 2.0, 3.0\nqueri ?, e ?\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]\n\nexampl [["a","b"],["b","c"],["bc","cd"]], [1.5,2.5,5.0], [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]\noutput: [3.75000,0.40000,5.00000,0.20000]\n\nexampl [["a","b"]], [0.5], [["a","b"],["b","a"],["a","c"],["x","y"]]\noutput: [0.50000,2.00000,-1.00000,-1.00000]\n\n\xc2\xa0\nconstraints:\n\n1 equations.length 20\nequations[i].length ai.length, bi.length 5\nvalues.length equations.length\n0.0 20.0\n1 queries.length 20\nqueries[i].length cj.length, dj.length 5\nai, bi, cj, digits.\n\n' ...].\n\xc2\xa0\nexampl 11th 10.\n\n\xc2\xa0\nconstraints:\n\n1 watch hour (0-11), represent\xc2\xa0th minut (0-59). right.\n\nfor "4:51".\n\n\ngiven turnedon (ignor pm), zero.\n\nfor "01:00" "1:00".\n\nthe "10:2" "10:02".\n\n\xc2\xa0\nexampl ["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]\nexampl num.\n\xc2\xa0\nexampl "1432219", "1219"\nexplanation: 1219 smallest.\n\nexampl "10200", "200"\nexplanation: 200. zeroes.\n\nexampl "10", "0"\nexplanation: noth 105\nnum digits.\nnum frog river. river units, unit, stone, water.\ngiven stones' units) initially, unit.\nif frog' units. direction.\n\xc2\xa0\nexampl [0,1,3,5,6,8,12,17]\noutput: 6th 7th stone.\n\nexampl [0,1,2,3,4,8,9,11]\noutput: 5th large.\n\n\xc2\xa0\nconstraints:\n\n2 stones.length stones[i] 1\nstones[0] 0\nstones\xc2\xa0i leaves.\na 24\nexplanation: 0\n\n\xc2\xa0\nconstraints:\n\nth hexadecim representation. two\xe2\x80\x99 used.\nal itself.\nnote:\xc2\xa0y problem.\n\xc2\xa0\nexampl 26\noutput: "1a"\nexampl "ffffffff"\n\n\xc2\xa0\nconstraints:\n\n-231 people, attribut peopl order). people[i] [hi, ki] ki hi.\nreconstruct people. queue[j] [hj, kj] (queue[0] queue).\n\xc2\xa0\nexampl [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\noutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nexplanation:\nperson taller front.\nperson 1.\nperson 3.\nperson 1.\nhenc [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] queue.\n\nexampl [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\noutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n\n\xc2\xa0\nconstraints:\n\n1 people.length 106\n0 people.length\nit reconstructed.\n\n' heightmap map, volum [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\noutput: rain, blocks.\nw pond trapped.\nth [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\noutput: 10\n\n\xc2\xa0\nconstraints:\n\nm heightmap.length\nn heightmap[i].length\n1 heightmap[i][j] palindrome\xc2\xa0that built letters.\nlett sensitive, example,\xc2\xa0"aa" here.\n\xc2\xa0\nexampl "abccccdd"\noutput: 7\nexplanation:\non "dccaccd", "bb"\noutput: english\xc2\xa0lett subarrays.\nwrit subarrays.\n\xc2\xa0\nexampl [7,2,5,10,8], 18\nexplanation:\nther subarrays.\nth [7,2,5] [10,8],\nwhere 18.\n\nexampl [1,4,4], 106\n1 min(50, nums.length)\n\n' where:\n\nanswer[i] "fizzbuzz" 5.\nanswer[i] "fizz" 3.\nanswer[i] "buzz" (a true.\n\n\xc2\xa0\nexampl ["1","2","fizz"]\nexampl ["1","2","fizz","4","buzz"]\nexampl 15\noutput: ["1","2","fizz","4","buzz","fizz","7","8","fizz","buzz","11","fizz","13","14","fizzbuzz"]\n\n\xc2\xa0\nconstraints:\n\n1 same.\n\nfor [1,3,5,7,9], [3,-1,-5,-9] sequences.\n\ngiven slice nums: 4] itself.\n\nexampl 5000\n-1000 1\nexplanation:\nth 3.\nthe 2\nexplanation:\nth (2) instead.\n\nexampl [2,2,3,1]\noutput: value).\nth 1.\n\n\xc2\xa0\nconstraints:\n\n1 solution?" string.\nyou (such biginteger). "123"\noutput: "134"\n\nexampl "456", "77"\noutput: "533"\n\nexampl "0"\n\n\xc2\xa0\nconstraints:\n\n1 104\nnum1 digits.\nnum1 don\'t equal.\n\xc2\xa0\nexampl [1,5,11,5]\noutput: [11].\n\nexampl [1,2,3,5]\noutput: subsets.\n\n\xc2\xa0\nconstraints:\n\n1 pacif ocean atlant ocean. touch island' edges, edges.\nth cells. heights[r][c] sea (r, c).\nthe flow west cell' height. ocean.\nreturn result[i] [ri, ci] (ri, ci) oceans.\n\xc2\xa0\nexampl [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\noutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n\nexampl [[2,1],[1,2]]\noutput: [[0,0],[0,1],[1,0],[1,1]]\n\n\xc2\xa0\nconstraints:\n\nm heights.length\nn heights[r].length\n1 battleship board.\nbattleship board. shape columns) rows, column), size. battleships).\n\xc2\xa0\nexampl [["x",".",".","x"],[".",".",".","x"],[".",".",".","x"]]\noutput: [["."]]\noutput: \'x\'.\n\n\xc2\xa0\nfollow one-pass, password strong met:\n\nit characters.\nit letter, digit.\nit does\xc2\xa0not (i.e.,\xc2\xa0"...aaa..." weak, "...aa...a..." strong, met).\n\ngiven password, strong. 0.\nin can:\n\ninsert password,\ndelet or\nreplace\xc2\xa0on character.\n\n\xc2\xa0\nexampl "aa1"\noutput: "1337c0d3"\noutput: password.length 50\npassword dot\xc2\xa0\'.\' exclam \'!\'.\n\n' xor [3,10,5,25,2,8]\noutput: 28\nexplanation: 25 28.\n\nexampl [14,70,53,83,49,91,36,80,92,51,66,70]\noutput: 127\n\n\xc2\xa0\nconstraints:\n\n1 out-of-ord 0-9, "owoztneoer"\noutput: "012"\nexampl "fviefuro"\noutput: "45"\n\n\xc2\xa0\nconstraints:\n\n1 ["e","g","f","i","h","o","n","s","r","u","t","w","v","x","z"].\n valid.\n\n' times.\nreturn operations.\n\xc2\xa0\nexampl "abab", vice versa.\n\nexampl "aababba", "aabbbba".\nth "bbbb" letters.\n0 s.length\n\n' only. quad-tree.\nreturn quad-tre grid.\nnotic isleaf accept answer.\na besides, attributes:\n\nval: 0's.\nisleaf: children.\n\nclass isleaf;\n topleft;\n topright;\n bottomleft;\n bottomright;\n}\nw two-dimension steps:\n\nif 0's) sub-grid photo.\nrecurs proper sub-grid.\n\n\nif know quad-tree, wiki.\nquad-tre format:\nth traversal, below.\nit [isleaf, val].\nif val] [[0,1],[1,0]]\noutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\nexplanation: explan below:\nnotic represnt photo quad-tree.\n\n\nexampl [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\noutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nexplanation: same. sub-grids.\nth topleft, bottomleft bottomright value.\nth topright value.\nexplan below:\n\n\n\xc2\xa0\nconstraints:\n\nn grid.length grid[i].length\nn 2x 6\n\n" n-ari values.\nnary-tre (see examples).\n\xc2\xa0\nexampl [1,null,3,2,4,null,5,6]\noutput: [[1],[3,2,4],[5,6]]\n\nexampl [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\noutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n\n\xc2\xa0\nconstraints:\n\nth 104]\n\n" doubli special own, multilevel below.\ngiven single-level, curr curr.next list.\nreturn [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\noutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nexplanation: shown.\naft becomes:\n\n\nexampl [1,2,null,3]\noutput: [1,3,2]\nexplanation: input.\n\n\xc2\xa0\nconstraints:\n\nth 1000.\n1 105\n\n\xc2\xa0\nhow cases:\nw above:\n 1---2---3---4---5---6--null\n |\n 7---8---9---10--null\n 11--12--null\nth follows:\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n\nto together, level. becomes:\n[1, null]\n |\n[null, |\n[ null]\n\nmerg obtain:\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n\n' strings\' abil counts.\nimpl allon class:\n\nallone() structure.\ninc(str increment 1.\ndec(str decrement decrement, structure. decrement.\ngetmaxkey() count. "".\ngetminkey() "".\n\nnote 1:\ninput\n["allone", "inc", "getmaxkey", "getminkey", "getminkey"]\n[[], ["hello"], ["leet"], "leet"]\n\nexplanation\nallon allone();\nallone.inc("hello");\nallone.inc("hello");\nallone.getmaxkey(); "hello"\nallone.getminkey(); "hello"\nallone.inc("leet");\nallone.getmaxkey(); "leet"\n\n\xc2\xa0\nconstraints:\n\n1 key.length 10\nkey letters.\nit dec, structure.\nat 104\xc2\xa0cal inc, getmaxkey, getminkey.\n\n' gene 8-charact choic \'t\'.\nsuppos investig mutat "aaccggtt" "aaccggta" mutation.\n\nther bank mutations. string.\ngiven bank, end. mutation, -1.\nnote valid, bank.\n\xc2\xa0\nexampl "aaccggtt", "aaccggta", ["aaccggta"]\noutput: "aaacggta", ["aaccggta","aaccgcta","aaacggta"]\noutput: "aaaaaccc", "aacccccc", ["aaaacccc","aaaccccc","aacccccc"]\noutput: 3\n\n\xc2\xa0\nconstraints:\n\nstart.length 8\nend.length 8\n0 bank.length 10\nbank[i].length 8\nstart, bank[i] [\'a\', \'t\'].\n\n' "hello, john"\noutput: ["hello,", "my", "name", "john"]\n\nexampl 300\n "!@#$%^&*()_+-=\',.:".\nthe \'.\n\n' non-overlapping.\n\xc2\xa0\nexampl [[1,2],[2,3],[3,4],[1,3]]\noutput: non-overlapping.\n\nexampl [[1,2],[1,2],[1,2]]\noutput: [1,2] [[1,2],[2,3]]\noutput: they'r non-overlapping.\n\n\xc2\xa0\nconstraints:\n\n1 105\nintervals[i].length 2\n-5 startj minimized. j.\nreturn i, [[1,2]]\noutput: [-1]\nexplanation: collection, -1.\n\nexampl [[3,4],[2,3],[1,2]]\noutput: [-1,0,1]\nexplanation: [3,4].\nthe [3,4] start0 end1 start1 end2 [[1,4],[2,3],[3,4]]\noutput: [-1,2,-1]\nexplanation: start2 3.\n\n\xc2\xa0\nconstraints:\n\n1 2\n-106 106\nthe values\xc2\xa0along equals\xc2\xa0targetsum.\nth leaf, nodes).\n\xc2\xa0\nexampl [10,5,-3,3,2,null,11,3,-2,null,1], 1000].\n-109 109\n-1000 p\' "cbaebabacd", [0,6]\nexplanation:\nth "cba", "abc".\nth "bac", "abc".\n\nexampl [0,1,2]\nexplanation:\nth "ab".\nth "ba", "ab".\n\n\xc2\xa0\nconstraints:\n\n1 n].\n\xc2\xa0\nexampl 9], 10.\n\nexampl staircas incomplete.\ngiven build.\n\xc2\xa0\nexampl incomplete, [4,3,2,7,8,2,3,1]\noutput: [2,3]\nexampl []\n\n\xc2\xa0\nconstraints:\n\nn n\neach twice.\n\n' chars, compress algorithm:\nbegin chars:\n\nif group\' s.\notherwise, length.\n\nth separately, chars. chars.\naft char ["a","a","b","b","c","c","c"]\noutput: ["a","2","b","2","c","3"]\nexplanation: "bb", "ccc". "a2b2c3".\n\nexampl ["a"]\nexplanation: uncompress it\' ["a","b","b","b","b","b","b","b","b","b","b","b","b"]\noutput: ["a","b","1","2"].\nexplanation: "bbbbbbbbbbbb". "ab12".\n\xc2\xa0\nconstraints:\n\n1 chars.length 2000\nchars[i] symbol.\n\n' [7,2,4,3], [7,8,0,7]\n\nexampl [8,0,7]\n\nexampl zeros.\n\n\xc2\xa0\nfollow lists?\n' -9] sequences.\nfor sequence.\n\na array.\n\nfor [2,5,10] [1,2,1,2,4,1,5,10].\n\nthe [2,4,6,8,10]\noutput: are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n\nexampl [7,7,7,7,7]\noutput: arithmetic.\n\n\xc2\xa0\nconstraints:\n\n1\xc2\xa0 distinct, yi]. boomerang tupl matters).\nreturn boomerangs.\n\xc2\xa0\nexampl [[0,0],[1,0],[2,0]]\noutput: [[1,0],[0,0],[2,0]] [[1,0],[2,0],[0,0]].\n\nexampl [[1,1]]\noutput: points.length\n1 500\npoints[i].length [5,6]\nexampl [2]\n\n\xc2\xa0\nconstraints:\n\nn runtime? space.\n' structure.\nth compact [2,1,3]\nexampl bst. updated) bst.\nbasically, stages:\n\nsearch remove.\nif found, node.\n\n\xc2\xa0\nexampl [5,3,6,2,4,null,7], [5,4,6,2,null,null,7]\nexplanation: it.\non [5,4,6,2,null,null,7], bst.\npleas notic [5,2,6,null,4,null,7] accepted.\n\n\nexampl [5,3,6,2,4,null,7]\nexplanation: 0.\n\nexampl 105\neach value.\nroot tree.\n-105 o(height tree)?\n" string.\nreturn "tree"\noutput: "eert"\nexplanation: \'r\' \'t\' once.\nso \'t\'. "eetr" "cccaaa"\noutput: "aaaccc"\nexplanation: "cccaaa" "aaaccc" answers.\nnot "cacaca" incorrect, together.\n\nexampl "bbaa"\nexplanation: "bbaa" answer, "aabb" incorrect.\nnot characters.\n\n\xc2\xa0\nconstraints:\n\n1 spheric tape wall xy-plane. [xstart, xend] diamet stretch xstart xend. balloons.\narrow shot y-direction) x-axis. xend arrow shot. infinitely, points, balloons.\n\xc2\xa0\nexampl [[10,16],[2,8],[1,6],[7,12]]\noutput: arrows:\n- shoot [2,8] [1,6].\n- [10,16] [7,12].\n\nexampl [[1,2],[3,4],[5,6],[7,8]]\noutput: arrows.\n\nexampl [[1,2],[2,3],[3,4],[4,5]]\noutput: [2,3].\n- [4,5].\n\n\xc2\xa0\nconstraints:\n\n1 105\npoints[i].length 2\n-231 equal.\nin (rememb elements):\n[1,2,3] [2,3,3] [3,4,3] [4,4,4]\n\nexampl [1,1,1]\noutput: 109\nthe nums1, nums3, nums4 l) n\nnums1[i] nums3[k] nums4[l] 0\n\n\xc2\xa0\nexampl [-2,-1], nums3 [-1,2], [0,2]\noutput: are:\n1. (0, nums1[0] nums2[0] nums3[0] nums4[1] 0\n2. (1, nums1[1] nums2[1] nums4[0] nums2.length\nn nums3.length\nn nums4.length\n1 200\n-228 nums2[i], nums3[i], nums4[i] 228\n\n' b'assum awesom cookies. but, cookie.\neach greed g[i], cooki content with; s[j]. s[j] content. g \nand though cookies, \nyou big gratifi children, g.length 132 nums[i], nums[j].\nreturn [3,1,4,2]\noutput: [-1,3,2,0]\noutput: 0] 0].\n\n\xc2\xa0\nconstraints:\n\nn involv forward/backward i:\n\nif forward, and\nif negative, backward.\n\nsinc circular, element.\na seq where:\n\nfollow movement seq[0] seq[1] seq[k ...\neveri nums[seq[j]] negative.\nk 1\n\nreturn [2,-1,1,2,2]\noutput: true\nexplanation:\nther ...\nthe cycle' [-1,2]\noutput: false\nexplanation:\nth sequence' 1.\nbi cycle.\n\nexampl [-2,1,-1,-2,-2]\noutput: negative.\neveri negative.\n\n\xc2\xa0\nconstraints:\n\n1 1000\nnums[i] 0\n\n\xc2\xa0\nfollow complexity?\n" liquid, poisonous. poisonous, (poor) pig liquid not. minutestotest poisonous.\ny steps:\n\nchoos feed.\nfor pig, it. time.\nwait minutestodi minutes. time.\naft passed, fed poison die, other survive.\nrepeat time.\n\ngiven buckets, minutestodie, minutestotest, allot 60\noutput: 30\noutput: <=\xc2\xa0minutestodi <=\xc2\xa0minutestotest together.\n\xc2\xa0\nexampl "abab"\noutput: twice.\n\nexampl "aba"\noutput: "abcabcabcabc"\noutput: "abc" "abcabc" twice.\n\n\xc2\xa0\nconstraints:\n\n1 (lfu) lfucach class:\n\nlfucache(int structure.\nint value) capacity, item. tie frequency), invalidated.\n\nto counter key.\nwhen cache, (due operation). 1:\ninput\n["lfucache", 4]\n\nexplanation\n// cnt(x) x\n// cache=[] tiebreak recent)\nlfucach lfu lfucache(2);\nlfu.put(1, cache=[1,_], cnt(1)=1\nlfu.put(2, cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1); cache=[1,2], cnt(1)=2\nlfu.put(3, cnt(2)=1 smallest, 2.\n\xc2\xa0 cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2); found)\nlfu.get(3); cnt(3)=2, cnt(1)=2\nlfu.put(4, cnt, lru, cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1); cache=[3,4], cnt(3)=3\nlfu.get(4); cnt(4)=2, cnt(3)=3\n\n\xc2\xa0\nconstraints:\n\n0 capacity\xc2\xa0<= 109\nat put.\n\n\xc2\xa0\n\xc2\xa0' different.\ngiven 2\nexplanation:\n1 1)\n4 0)\n \xe2\x86\x91 \xe2\x86\x91\nth different.\n\nexampl <=\xc2\xa0x, 1.\ntest 2\nexplanation:\nonli element):\n[1,2,3] [2,2,3] [2,2,2]\n\nexampl [1,10,2,9]\noutput: 16\n\n\xc2\xa0\nconstraints:\n\nn represents\xc2\xa0land water.\ngrid horizontally/vert diagonally). water, cells).\nth doesn\'t "lakes", isn\'t island. rectangular, 100. perimet island.\n\xc2\xa0\nexampl [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\noutput: yellow stripe above.\n\nexampl 4\n\n\xc2\xa0\nconstraints:\n\nrow grid.length\ncol 100\ngrid[i][j] 1.\nthere grid.\n\n' b'in "100 game" player adding, total, wins.\nwhat re-us integers?\nfor draw pool 100.\ngiven maxchoosableinteg desiredtotal, forc win, false. optimally.\n\xc2\xa0\nexampl desiredtot false\nexplanation:\nno choose, lose.\nth 10.\nif 10.\nthe desiredtotal.\nsam player, 20\n0 300\n\n' [s, times.\n\nfor =="abcabcabc".\n\nw s1.\n\nfor "abdbec" bold characters.\n\ny n1 n2. str1 [s1, n1] str2 [s2, n2].\nreturn [str2, m] str1.\n\xc2\xa0\nexampl "acb", 100\ns1 n1, wraparound "abcdefghijklmnopqrstuvwxyz", this:\n\n"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....".\n\ngiven present s.\n\nexampl "cac"\noutput: ("a", "c") "zab"\noutput: ("z", "za", "zab") s.\n\n\xc2\xa0\nconstraints:\n\n1 105\np queryip, "ipv4" ipv4 address, "ipv6" ipv6 "neither" type.\na "x1.x2.x3.x4" xi "192.168.1.0" "192.168.01.1", "192.168.1.00", addresses.\na "x1:x2:x3:x4:x5:x6:x7:x8" where:\n\n1 xi.length 4\nxi (\'a\' \'f\') upper-cas \'f\').\nlead xi.\n\nfor "2001:0db8:85a3:0000:0000:8a2e:0370:7334" "2001:db8:85a3:0:0:8a2e:0370:7334" "2001:0db8:85a3::8a2e:037j:7334" "02001:0db8:85a3:0000:0000:8a2e:0370:7334" addresses.\n\xc2\xa0\nexampl queryip "172.16.254.1"\noutput: "ipv4"\nexplanation: "ipv4".\n\nexampl "2001:0db8:85a3:0:0:8a2e:0370:7334"\noutput: "ipv6"\nexplanation: "ipv6".\n\nexampl "256.256.256.256"\noutput: "neither"\nexplanation: address.\n\n\xc2\xa0\nconstraints:\n\nqueryip \':\'.\n\n' rand7() uniform rand10() 10]. rand7(), api. language' api.\neach argument testing. rand10().\n\xc2\xa0\nexampl [2]\nexampl [2,8]\nexampl [3,8,10]\n\n\xc2\xa0\nconstraints:\n\n1 function?\ncould rand7()?\n\n" (without duplicates), compris shorter ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]\noutput: ["catsdogcats","dogcatsdog","ratcatdogcat"]\nexplanation: "catsdogcats" "cats", "cats"; \n"dogcatsdog" "dog", "cats" "dog"; \n"ratcatdogcat" "cat", "cat".\nexampl ["cat","dog","catdog"]\noutput: ["catdog"]\n\n\xc2\xa0\nconstraints:\n\n1 30\nwords[i] sum(words[i].length) matchstick matchsticks[i] matchstick. square. stick, time.\nreturn [1,1,2,2,2]\noutput: came stick [3,3,3,3,4]\noutput: matchsticks.\n\n\xc2\xa0\nconstraints:\n\n1 matchsticks.length 15\n1 108\n\n' n.\nreturn subset.\na y.\n\xc2\xa0\nexampl ["10","0001","111001","1","0"], {"10", "0001", "1", "0"}, 4.\nother {"0001", "1"} "0"}.\n{"111001"} ["10","0","1"], {"0", "1"}, 600\n1 \'1\'.\n1 b"winter coming! dure contest, job heater warm radiu houses.\neveri warmed, heater' range.\xc2\xa0\ngiven heaters\xc2\xa0so houses.\nnotic that\xc2\xa0al standard, same.\n\xc2\xa0\nexampl warmed.\n\nexampl [1,2,3,4], [1,4]\noutput: houses.length, heaters.length houses[i], heaters[i] representation.\n\nfor "101" "010" 2.\n\ngiven complement.\n\xc2\xa0\nexampl 101 bits), 010. 231\n\n\xc2\xa0\nnote: 1009: https://leetcode.com/problems/complement-of-base-10-integer/\n' [4,14,2]\noutput: representation, 0100, 1110, 0010 (just\nshow relev case).\nth be:\nhammingdistance(4, 14) hammingdistance(4, hammingdistance(14, [4,14,4]\noutput: center circle, randpoint circle.\nimpl class:\n\nsolution(doubl radius, x_center, y_center) circl (x_center, y_center).\nrandpoint() circumfer [x, y].\n\n\xc2\xa0\nexampl "randpoint", "randpoint"]\n[[1.0, 0.0, 0.0], [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n\nexplanation\nsolut solution(1.0, 0.0);\nsolution.randpoint(); -0.38077]\nsolution.randpoint(); 0.38945]\nsolution.randpoint(); 0.17248]\n\n\xc2\xa0\nconstraints:\n\n0 <\xc2\xa0radiu 108\n-107 y_center 107\nat randpoint.\n\n' n-digit modulo 1337.\n\xc2\xa0\nexampl 987\nexplanation: 91 9009, 9009 987\n\nexampl 9\n\n\xc2\xa0\nconstraints:\n\n1 examples, 2.5.\n\nyou [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\nexplanation: median\n--------------- -1\n [1,2,3,4,2,3,1,4,2], [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n\n\xc2\xa0\nconstraints:\n\n1 \'2\' obey rules:\n\nth itself.\n\nth "1221121221221121122\xe2\x80\xa6\xe2\x80\xa6". 2\' ......" ......". itself.\ngiven "122112" licens dashes. k.\nwe reformat group, dash groups, uppercase.\nreturn key.\n\xc2\xa0\nexampl "5f3z-2e-9-w", "5f3z-2e9w"\nexplanation: parts, characters.\nnot removed.\n\nexampl "2-5g-3-j", "2-5g-3j"\nexplanation: mention above.\n\n\xc2\xa0\nconstraints:\n\n1 \'-\'.\n1 n.\nwe 1\'s.\n\xc2\xa0\nexampl "13"\noutput: "3"\nexplanation: 111.\n\nexampl "4681"\noutput: "8"\nexplanation: 4681 11111.\n\nexampl "1000000000000000000"\noutput: "999999999999999999"\nexplanation: 1000000000000000000 999999999999999999 11.\n\n\xc2\xa0\nconstraints:\n\nn 1018].\nn [1,1,0,1,1,1]\noutput: 1s. [1,0,1,1,0,1]\noutput: 105\nnums[i] 1.\n\n" array: 2.\nplayer first. score nums[nums.length 1]) score. equal, winner, [1,5,2]\noutput: \nif (or 1), 2). \nso, \nhence, winner false.\n\nexampl [1,5,233,7]\noutput: 233.\nfinally, (234) (12), player1 win.\n\n\xc2\xa0\nconstraints:\n\n1 107\n\n' variat zuma.\nin zuma, ball \'r\', \'y\', \'w\'. hand.\nyour clear on turn:\n\npick hand row.\nif color, board.\n\t\nif left.\n\n\nif game.\nrepeat hand.\n\ngiven hand, "wrrbbw", "rb"\noutput: balls. is:\n- wrrrbbw. wrrrbbw wbbw.\n- wbbbw. wbbbw ww.\nthere insert.\nexampl "wwrrbbww", "wrbrw"\noutput: empty:\n- wwrrrbbww. wwrrrbbww wwbbww.\n- wwbbbww. wwbbbww wwww empty.\n2 board.\n\nexampl "g", "ggggg"\noutput: \'g\' gg.\n- ggg. ggg board.\n\n\xc2\xa0\nconstraints:\n\n1 board.length 16\n1 hand.length 5\nboard \'w\'.\nthe color.\n\n' [4,6,7,7]\noutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n\nexampl [4,4,3,2,1]\noutput: [[4,4]]\n\n\xc2\xa0\nconstraints:\n\n1 15\n-100 web page' so, page\xe2\x80\x99 page, w requirements:\n\nth page area.\nth w.\nthe possible.\n\nreturn [l, w] the\xc2\xa0web [2,2]\nexplanation: [1,4], [4,1]. \nbut illegal; [4,1] [2,2]. 37\noutput: [37,1]\n\nexampl 122122\noutput: [427,286]\n\n\xc2\xa0\nconstraints:\n\n1 107\n\n" integers.\n\nfor "+2-1".\n\nreturn build, target.\n\xc2\xa0\nexampl [1,1,1,1,1], 3.\n-1 3\n+1 sum(nums[i]) b"our hero teemo enemi ash attacks! ashe, durat seconds. [t, effect ends, timer reset, attack.\ny timeseries, timeseries[i] timeseries[i], duration.\nreturn poisoned.\n\xc2\xa0\nexampl timeseri teemo' attacks, 5.\nash total.\n\nexampl timer. 3.\nash total.\n\xc2\xa0\nconstraints:\n\n1 timeseries.length 107\ntimeseri nums2.\nfor nums1[i] nums2. -1.\nreturn nums1.length above.\n\xc2\xa0\nexampl [4,1,2], [1,3,4,2]\noutput: [-1,3,-1]\nexplanation: [1,3,4,2]. -1.\n- 3.\n- [2,4], [3,-1]\nexplanation: [1,2,3,4]. -1.\n\n\xc2\xa0\nconstraints:\n\n1 unique.\nal nums2.\n\n\xc2\xa0\nfollow o(nums1.length nums2.length) rect rects[i] rectangles. rectangle.\nani returned.\nnot coordinates.\nimpl class:\n\nsolution(int[][] rects) rects.\nint[] pick() [u, v] rectangles.\n\n\xc2\xa0\nexampl "pick"]\n[[[[-2, 6]]], -2], -1], 0]]\n\nexplanation\nsolut solution([[-2, 6]]);\nsolution.pick(); -2]\nsolution.pick(); -1]\nsolution.pick(); 0]\n\n\xc2\xa0\nconstraints:\n\n1 rects.length 100\nrects[i].length 4\n-109 109\nxi 2000\nyi 2000\nall overlap.\nat mat, mat [1,2,4,7,5,3,6,8,9]\n\nexampl [[1,2],[3,4]]\noutput: [1,2,3,4]\n\n\xc2\xa0\nconstraints:\n\nm mat.length\nn mat[i].length\n1 mat[i][j] alphabet american keyboard below.\nin keyboard:\n\nth "qwertyuiop",\nth "asdfghjkl", "zxcvbnm".\n\n\n\xc2\xa0\nexampl ["hello","alaska","dad","peace"]\noutput: ["alaska","dad"]\n\nexampl ["omk"]\noutput: ["adsdf","sfd"]\noutput: ["adsdf","sfd"]\n\n\xc2\xa0\nconstraints:\n\n1 100\nwords[i] uppercase).\xc2\xa0\n\n' (bst) mode(s) element) it.\nif mode, order.\nassum [1,null,2,2]\noutput: space? (assum incur due count)." ipo soon. ventur capital, project capit ipo. resources, help projects.\ny pure profits[i] capital[i] it.\ninitially, capital. project, capital.\npick capital.\nth [0,1,1]\noutput: 0.\nafter 1.\nwith 2.\nsinc projects, capital.\ntherefore, [0,1,2]\noutput: 6\n\n\xc2\xa0\nconstraints:\n\n1 109\nn profits.length\nn capital.length\n1 nums[0]), traversing-ord circularli [1,2,1]\noutput: [2,-1,2]\nexplanation: 2; circularly, [1,2,3,4,3]\noutput: [2,3,4,-1,4]\n\n\xc2\xa0\nconstraints:\n\n1 100\noutput: "202"\nexampl -7\noutput: "-10"\n\n\xc2\xa0\nconstraints:\n\n-107 score[i] athlet competition. scores, score, placement rank:\n\nth athlete\' rank "gold medal".\nth "silver "bronz medal".\nfor athlete, xth "x").\n\nreturn athlete.\n\xc2\xa0\nexampl ["gold medal","silv medal","bronz medal","4","5"]\nexplanation: [1st, 2nd, 3rd, 4th, 5th].\nexampl [10,3,8,9,4]\noutput: medal","5","bronz medal","4"]\nexplanation: 5th, 4th].\n\n\n\xc2\xa0\nconstraints:\n\nn score.length\n1 divisors, evenly.\ngiven 14\n1, sum. tie, itself).\n\xc2\xa0\nexampl [5,2,-3]\noutput: [2,-3,4]\n\nexampl [5,2,-5]\noutput: [2]\n\n\xc2\xa0\nconstraints:\n\nth fibonacci commonli f(n) ones, is,\nf(0) f(1) 1\nf(n) f(n 1.\n\ngiven f(n).\n\xc2\xa0\nexampl f(2) f(0) f(4) [1,2,3,4,null,5,6,null,null,7]\noutput: 7\n\n\xc2\xa0\nconstraints:\n\nth video fallout quest "road freedom" metal dial "freedom ring" spell keyword door.\ngiven ring engrav spelled, keyword.\ninitially, align "12:00" direction. anticlockwis press button.\nat stage key[i]:\n\ny place, step. ring\' key[i].\nif key[i] button spell, pressing, (next stage). spelling.\n\n\xc2\xa0\nexampl "godding", "gd"\noutput: 4\nexplanation:\nfor \nfor "godding" "ddinggo".\nalso, spelling.\nso "godding"\noutput: 13\n\n\xc2\xa0\nconstraints:\n\n1 ring.length, 100\nring ring.\n\n' (0-indexed).\n\xc2\xa0\nexampl [1,3,2,5,3,null,9]\noutput: [1,3,9]\n\nexampl [1,3]\n\n\xc2\xa0\nconstraints:\n\nth subsequence\' elements.\n\xc2\xa0\nexampl "bbbab"\noutput: "bbbb".\n\nexampl "bb".\n\n\xc2\xa0\nconstraints:\n\n1 wash machin dress empty.\nfor machines, dresses. [1,0,5]\noutput: 3\nexplanation:\n1st move: <-- 4\n2nd 3\n3rd [0,3,0]\noutput: 2\nexplanation:\n1st 0\n2nd [0,2,0]\noutput: -1\nexplanation:\nit' dresses.\n\n\xc2\xa0\nconstraints:\n\nn machines.length\n1 machines[i] coin.\nth [1,2,5]\noutput: amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1\n\nexampl unique.\n0 5000\n\n' initially. returned.\noptim complexity.\nimpl class:\n\nsolution(int n.\nint[] flip() [i, j] 1.\nvoid "flip", "flip"]\n[[3, 0], solution(3, 1);\nsolution.flip(); [1,0], [2,0] returned.\nsolution.flip(); [1,0] returned, [0,0]\nsolution.flip(); [0,0] returned.\nsolution.reset(); returned.\n\n\xc2\xa0\nconstraints:\n\n1 104\nthere free flip.\nat reset.\n\n' usag holds:\n\nal capitals, "usa".\nal "leetcode".\nonli "google".\n\ngiven right.\n\xc2\xa0\nexampl "usa"\noutput: "flag"\noutput: 100\nword uncommon -1.\nan other.\na s.\n\nfor "aebdc" "abc". "aebdc", "aeb", (empti string).\n\n\xc2\xa0\nexampl "aba", "cdc"\noutput: "cdc".\nnote "cdc" subsequence.\n\nexampl "bbb"\noutput: 3\nexplanation:\xc2\xa0th "aaa" "bbb".\n\nexampl "aaa"\noutput: -1\nexplanation:\xc2\xa0everi similarly, a.\n\n\xc2\xa0\nconstraints:\n\n1 100\na others.\na ["aba","cdc","eae"]\noutput: ["aaa","aaa","aa"]\noutput: -1\n\n\xc2\xa0\nconstraints:\n\n2 10\nstrs[i] [23,2,4,6,7], [23,2,6,4,7], [23, 42.\n42 integer.\n\nexampl dictionary, "abpcplea", ["ale","apple","monkey","plea"]\noutput: "apple"\n\nexampl ["a","b","c"]\noutput: dictionary.length dictionary[i].length dictionary[i] [0,1,0]\noutput: 0]) perm beauti true:\n\nperm[i] i.\ni perm[i].\n\ngiven construct.\n\xc2\xa0\nexampl [1,2]:\n perm[1] perm[2] 2\nthe [2,1]:\n 15\n\n' w[i] weight index.\ny pickindex(), w.length sum(w).\n\nfor 0.25 25%), 0.75 75%).\n\n\xc2\xa0\nexampl 1:\ninput\n["solution","pickindex"]\n[[[1]],[]]\noutput\n[null,0]\n\nexplanation\nsolut solution([1]);\nsolution.pickindex(); option w.\n\nexampl 2:\ninput\n["solution","pickindex","pickindex","pickindex","pickindex","pickindex"]\n[[[1,3]],[],[],[],[],[]]\noutput\n[null,1,1,1,1,0]\n\nexplanation\nsolut 3]);\nsolution.pickindex(); 3/4.\nsolution.pickindex(); 1\nsolution.pickindex(); 1/4.\n\nsinc allowed.\nal correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand on.\n\n\xc2\xa0\nconstraints:\n\n1 105\npickindex b'let\' minesweep (wikipedia, onlin game)!\ny where:\n\n\'m\' unrev mine,\n\'e\' square,\n\'b\' reveal blank mine diagonals),\ndigit (\'1\' \'8\') square, and\n\'x\' mine.\n\ny click [clickr, clickc] (\'m\' \'e\').\nreturn rules:\n\nif \'m\' revealed, over. \'x\'.\nif recursively.\nif mines.\nreturn revealed.\n\n\xc2\xa0\nexampl [["e","e","e","e","e"],["e","e","m","e","e"],["e","e","e","e","e"],["e","e","e","e","e"]], [3,0]\noutput: [["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]\n\nexampl [["b","1","e","1","b"],["b","1","m","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]], [["b","1","e","1","b"],["b","1","x","1","b"],["b","1","1","1","b"],["b","b","b","b","b"]]\n\n\xc2\xa0\nconstraints:\n\nm 50\nboard[i][j] \'m\', \'8\'.\nclick.length clickr clickc n\nboard[clickr][clickc] \'e\'.\n\n' [4,2,6,1,3]\noutput: [1,0,48,null,null,12,49]\noutput: 105\n\n\xc2\xa0\nnote: 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/\n' k-diff array.\na (nums[i], nums[j]), true:\n\n0 nums.length\ni j\nnums[i] k\n\nnotic |val| val.\n\xc2\xa0\nexampl [3,1,4,1,5], 2-diff 5).\nalthough input, pairs.\n\nexampl 1-diff (2, (4, 5).\n\nexampl [1,3,1,5,4], 0-diff 1).\n\n\xc2\xa0\nconstraints:\n\n1 104\n-107 107\n0 b'note: companion problem: tinyurl.\ntinyurl url shorten servic https://leetcode.com/problems/design-tinyurl short http://tinyurl.com/4e9iak. tini url.\nther encode/decod url.\nimpl class:\n\nsolution() system.\nstr encode(str longurl) longurl.\nstr decode(str shorturl) shorturl. shorturl object.\n\n\xc2\xa0\nexampl "https://leetcode.com/problems/design-tinyurl"\noutput: "https://leetcode.com/problems/design-tinyurl"\n\nexplanation:\nsolut obj solution();\nstr obj.encode(url); url.\nstr obj.decode(tiny); decond it.\n\n\xc2\xa0\nconstraints:\n\n1 url.length 104\nurl gurante url.\n\n' "real+imaginaryi" where:\n\nr [-100, 100].\nimaginari imaginari 100].\ni2 -1.\n\ngiven multiplications.\n\xc2\xa0\nexampl "1+1i", "1+1i"\noutput: "0+2i"\nexplanation: i) i2 2i, 0+2i.\n\nexampl "1+-1i", "1+-1i"\noutput: "0+-2i"\nexplanation: -2i, 0+-2i.\n\n\xc2\xa0\nconstraints:\n\nnum1 numbers.\n\n' bst.\na reminder, constraints:\n\nth [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\noutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n\nexampl [0,null,1]\noutput: [1,null,1]\n\n\xc2\xa0\nconstraints:\n\nth unique.\nroot tree.\n\n\xc2\xa0\nnote: 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\n" 24-hour clock "hh:mm" time-point timepoint ["23:59","00:00"]\noutput: ["00:00","23:59","00:00"]\noutput: 0\n\n\xc2\xa0\nconstraints:\n\n2 timepoints.length 104\ntimepoints[i] "hh:mm".\n\n' once.\nreturn once.\nyour [1,1,2,3,3,4,4,8,8]\noutput: [3,3,7,7,10,11,11]\noutput: 2k string.\nif original.\n\xc2\xa0\nexampl "abcdefg", "bacdfeg"\nexampl "bacd"\n\n\xc2\xa0\nconstraints:\n\n1 cell.\nth [[0,0,0],[0,1,0],[0,0,0]]\n\nexampl [[0,0,0],[0,1,0],[1,1,1]]\noutput: [[0,0,0],[0,1,0],[1,2,1]]\n\n\xc2\xa0\nconstraints:\n\nm 104\nmat[i][j] mat.\n\n' tree.\nth [4,2,1,3] [5,2,1,3].\n\nexampl box experi round boxes, points.\nreturn [1,3,2,2,2,3,4,3,1]\noutput: 23\nexplanation:\n[1, \n----> (3*3=9 points) (1*1=1 (2*2=4 points)\n\nexampl boxes.length boxes[i]\xc2\xa0<= cities. some indirectli c.\na provinc group.\nyou isconnect isconnected[i][j] otherwise.\nreturn provinces.\n\xc2\xa0\nexampl [[1,1,0],[1,1,0],[0,0,1]]\noutput: [[1,0,0],[0,1,0],[0,0,1]]\noutput: 200\nn isconnected.length\nn isconnected[i].length\nisconnected[i][j] 0.\nisconnected[i][i] 1\nisconnected[i][j] isconnected[j][i]\n\n' attend student absent, late, day. characters:\n\n\'a\': absent.\n\'l\': late.\n\'p\': present.\n\nth elig award meet criteria:\n\nth absent (\'a\') total.\nth late (\'l\') days.\n\nreturn award, "ppallp"\noutput: absenc days.\n\nexampl "ppalll"\noutput: days, award.\n\n\xc2\xa0\nconstraints:\n\n1 \'p\'.\n\n' present.\n\nani days.\n\ngiven award. 109 7.\n\xc2\xa0\nexampl award:\n"pp", "ap", "pa", "lp", "pl", "al", "la", "ll"\nonli "aa" 10101\noutput: 183236316\n\n\xc2\xa0\nconstraints:\n\n1 float division.\n\nfor "2/3/4".\n\nhowever, parenthesi prioriti operations. maximum.\nreturn format.\nnote: redund parenthesis.\n\xc2\xa0\nexampl [1000,100,10,2]\noutput: "1000/(100/10/2)"\nexplanation:\n1000/(100/10/2) 1000/((100/10)/2) 200\nhowever, "1000/((100/10)/2)" redundant, influenc priority. "1000/(100/10/2)".\nother cases:\n1000/(100/10)/2 50\n1000/(100/(10/2)) 50\n1000/100/10/2 0.5\n1000/100/(10/2) [2,3,4]\noutput: "2/(3/4)"\n\nexampl "2"\n\n\xc2\xa0\nconstraints:\n\n1 10\n2 1000\nthere iput.\n\n' brick bricks. unit) widths. same.\ndraw brick, crossed. wall, obvious bricks.\ngiven [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\noutput: [[1],[1],[1]]\noutput: 3\n\n\xc2\xa0\nconstraints:\n\nn wall.length\n1 wall[i].length sum(wall[i].length) 104\nsum(wall[i]) i.\n1 wall[i][j] 21\nexampl 21\noutput: "let\' contest"\noutput: "s\'tel ekat edocteel tsetnoc"\nexampl "god ding"\noutput: gnid"\n\n\xc2\xa0\nconstraints:\n\n1 characters.\n spaces.\nther s.\nall 1.\ngiven quadtree1 quadtree2. quadtree2 matrix.\nreturn logic or quadtree2.\nnotic 1:\n \ninput: [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\noutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nexplanation: above. quad-tree.\nif matric quad-tree.\nnotic illustration, tree.\n\n\nexampl [[1,0]], [[1,0]]\nexplanation: 1*1. zero.\nth 1*1 zero.\n\n\xc2\xa0\nconstraints:\n\nquadtree1 grid.\nn 9.\n\n" node.\nnary-tre 104].\nthe 1000.\n\n' k.\na [1,1,1], 1000\n-107 (a1, b1), (a2, b2), (an, bn) min(ai, maximized. sum.\n\xc2\xa0\nexampl [1,4,3,2]\noutput: elements) min(1, min(2, 3\n2. 3\n3. min(3, 4\nso 4.\nexampl [6,2,6,5,1,2]\noutput: 6). min(6, 104\nnums.length n\n-104 tilt.\nth tilt child, child.\n\xc2\xa0\nexampl \ntilt : |0-0| children)\ntilt |2-3| 3)\nsum [4,2,9,3,5,null,7]\noutput: 15\nexplanation: |3-5| 3; 5)\ntilt |0-7| 7)\ntilt |(3+5+2)-(9+7)| |10-16| 10; 16)\nsum 15\n\nexampl [21,7,14,1,1,2,2,3,3]\noutput: 9\n\n\xc2\xa0\nconstraints:\n\nth itself), one.\nth integers.\n\xc2\xa0\nexampl "121"\n\nexampl n.length 18\nn digits.\nn zeros.\nn 1018 1].\n\n' 1].\nyou s[k] {nums[k], nums[nums[k]], nums[nums[nums[k]]], } rule:\n\nth k.\nthe on.\nw s[k].\n\nreturn s[k].\n\xc2\xa0\nexampl [5,4,0,3,1,6,2]\noutput: \nnums[0] nums[6] 2.\none s[k]:\ns[0] {nums[0], nums[5], nums[6], nums[2]} {5, 0}\n\nexampl nums.length\nal matlab, handi reshap r data.\ny matrix.\nth row-travers were.\nif paramet legal, matrix; matrix.\n\xc2\xa0\nexampl [[1,2],[3,4]], [[1,2,3,4]]\n\nexampl [[1,2],[3,4]]\n\n\xc2\xa0\nconstraints:\n\nm 100\n-1000 r, otherwise.\nin s1\' s2.\n\xc2\xa0\nexampl "eidbaooo"\noutput: ("ba").\n\nexampl "eidboaoo"\noutput: 104\ns1 subroot, subroot descendants. [3,4,5,1,2], [4,1,2]\noutput: [3,4,5,1,2,null,null,null,null,0], 2000].\nthe 1000].\n-104 root.val subroot.v b"alic candies, candytype[i]. gain weight, doctor.\nth doctor advis eat even). much, doctor' advice.\ngiven candytyp [1,1,2,2,3,3]\noutput: candies. type.\n\nexampl [1,1,2,3]\noutput: types.\n\nexampl [6,6,6,6]\noutput: type.\n\n\xc2\xa0\nconstraints:\n\nn candytype.length\n2 104\nn\xc2\xa0i even.\n-105 candytype[i] ball. [startrow, startcolumn]. boundary). maxmov ball.\ngiven maxmove, startrow, startcolumn, boundary. startrow startcolumn 12\n\n\xc2\xa0\nconstraints:\n\n1 whole order.\nreturn length.\n\xc2\xa0\nexampl [2,6,4,8,10,9,15]\noutput: 9] order.\n\nexampl same.\nin "sea", "eat"\noutput: "sea" "ea" "eat" "ea".\n\nexampl "etco"\noutput: trees[i] garden.\ny fenc garden rope expensive. enclosed.\nreturn perimeter.\n\xc2\xa0\nexampl [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\noutput: [[1,1],[2,0],[3,3],[2,4],[4,2]]\n\nexampl [[1,2],[2,2],[4,2]]\noutput: [[4,2],[2,2],[1,2]]\n\n\xc2\xa0\nconstraints:\n\n1 3000\npoints[i].length 100\nall examples)\n\xc2\xa0\nexampl [1,3,5,6,2,4]\n\nexampl [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n\n\xc2\xa0\nconstraints:\n\nth 1000.\n\n\xc2\xa0\nfollow [5,6,3,2,4,1]\n\nexampl [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n\n\xc2\xa0\nconstraints:\n\nth snippet, tag valid.\na snippet hold:\n\nth wrap tag. invalid.\na valid) <tag_name>tag_content</tag_name>. them, <tag_name> tag, </tag_name> tag_nam tag_cont [1,9]. tags, cdata note1) <, tag_name. tag_name, versa. issu unbalanc nested.\na >. </, valid).\nth <![cdata[cdata_content]]>. cdata_cont <![cdata[ ]]>.\ncdata_cont forbid cdata_content, invalid), characters.\n\n\xc2\xa0\nexampl "<div>thi <![cdata[<div>]]></div>"\noutput: <div> </div>. cdata. \nalthough plain tag.\nso thu "<div>>> ![cdata[]] <![cdata[<div>]>]]>]]>>]</div>"\noutput: true\nexplanation:\nw start_tag|tag_content|end_tag.\nstart_tag "<div>"\nend_tag "</div>"\ntag_cont text1|cdata|text2.\ntext1 ">> "\ncdata "<![cdata[<div>]>]]>", "<div>]>"\ntext2 "]]>>]"\nthe reason start_tag "<div>>>" 6.\nthe "<![cdata[<div>]>]]>]]>" "<a> <b> </a> </b>"\noutput: unbalanced. "<a>" closed, "<b>" unmatched, versa.\n\n\xc2\xa0\nconstraints:\n\n1 code.length 500\ncode \'<\', \'>\', \'/\', \'!\', \'[\', subtraction, format.\nth irreduc fraction. 2/1.\n\xc2\xa0\nexampl "-1/2+1/2"\noutput: "0/1"\n\nexampl "-1/2+1/2+1/3"\noutput: "1/3"\n\nexampl "1/3-1/2"\noutput: "-1/6"\n\n\xc2\xa0\nconstraints:\n\nth \'9\', \'-\'. output.\neach (input output) \xc2\xb1numerator/denominator. omitted.\nth fractions, above.\nth 10].\nthe int.\n\n' p1, p2, p3 p4, square.\nth pi angl (90-degre angles).\n\xc2\xa0\nexampl p1 p2 [1,1], p4 [0,12]\noutput: [0,1], [0,-1]\noutput: true\n\n\xc2\xa0\nconstraints:\n\np1.length p2.length p3.length p4.length harmoni subsequences.\na [1,3,2,2,5,2,3,7]\noutput: [3,2,2,2,3].\n\nexampl 109\n' ops, ops[i] m[x][y] bi.\ncount op [[2,2],[3,3]]\noutput: m. [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\noutput: ops.length 104\nops[i].length m\n1 n\n\n" andi dori restaur dinner, favorit strings.\nyou interest requirement. ["shogun","tapioca express","burg king","kfc"], ["piatti","th grill torrey pines","hungri hunter steakhouse","shogun"]\noutput: ["shogun"]\nexplanation: "shogun".\n\nexampl ["kfc","shogun","burg king"]\noutput: "shogun" (0+1).\n\n\xc2\xa0\nconstraints:\n\n1 list1.length, list2.length list1[i].length, list2[i].length 30\nlist1[i] list2[i] sting list2\xc2\xa0ar ones.\n\xc2\xa0\nexampl 5\nexplanation:\nher representations:\n0 101\namong disobey (two ones) rule. flowerb plot planted, flower plant plots.\ngiven 1's, violat no-adjacent-flow rule.\n\xc2\xa0\nexampl [1,0,0,0,1], flowerbed.length 104\nflowerbed[i] flowerbed.\n0 flowerbed.length\n\n" way, it.\nomit one-to-on relationship "1(2(4))(3)"\nexplanation: originally, "1(2(4)())(3()())", omit unnecessari pairs. "1(2(4))(3)"\n\nexampl [1,2,3,null,4]\noutput: "1(2()(4))(3)"\nexplanation: almost output.\n\n\xc2\xa0\nconstraints:\n\nth info, paths. content.\na info format:\n\n"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) fn.txt(fn_content)"\n\nit (f1.txt, f2.txt fn.txt) (f1_content, f2_content fn_content) "root/d1/d2/.../dm". directory.\nth format:\n\n"directory_path/file_name.txt"\n\n\xc2\xa0\nexampl ["root/a 1.txt(abcd) 2.txt(efgh)","root/c 3.txt(abcd)","root/c/d 4.txt(efgh)","root 4.txt(efgh)"]\noutput: [["root/a/2.txt","root/c/d/4.txt","root/4.txt"],["root/a/1.txt","root/c/3.txt"]]\nexampl [["root/a/2.txt","root/c/d/4.txt"],["root/a/1.txt","root/c/3.txt"]]\n\n\xc2\xa0\nconstraints:\n\n1 paths.length paths[i].length 3000\n1 sum(paths[i].length) 105\npaths[i] \'.\nyou directory.\ny directory. info.\n\n\xc2\xa0\nfollow up:\n\nimagin files? df bfs?\nif (gb level), 1kb solution?\nwhat solution? time-consum memory-consum it? optimize?\nhow positive?\n\n' triangle.\n\xc2\xa0\nexampl [2,2,3,4]\noutput: \n2,3,4 (use 2)\n2,3,4 2)\n2,2,3\n\nexampl [4,2,3,4]\noutput: root1 root2.\nimagin other, tree.\nreturn tree.\nnote: trees.\n\xc2\xa0\nexampl [1,3,2,5], root2 [2,1,3,null,4,null,7]\noutput: [3,4,5,5,4,null,7]\n\nexampl [2,2]\n\n\xc2\xa0\nconstraints:\n\nth 2000].\n-104 tasks, cpu do, task. idle.\nhowever, integer\xc2\xa0n between\xc2\xa0two tasks\xc2\xa0(th array), tasks.\nreturn tasks.\n\xc2\xa0\nexampl ["a","a","a","b","b","b"], \na idl b\nthere tasks.\n\nexampl 0.\n["a","a","a","b","b","b"]\n["a","b","a","b","a","b"]\n["b","b","b","a","a","a"]\n...\nand on.\n\nexampl ["a","a","a","a","a","a","b","c","d","e","f","g"], \none is\na a\n\n\xc2\xa0\nconstraints:\n\n1 task.length 104\ntasks[i] letter.\nth 100].\n\n' queue. fifo (first out) "ring buffer".\non benefit but values.\nimplement mycircularqueu class:\n\nmycircularqueue(k) k.\nint front() -1.\nint rear() -1.\nboolean enqueue(int successful.\nboolean dequeue() isempty() not.\nboolean isfull() not.\n\nyou language.\xc2\xa0\n\xc2\xa0\nexampl 1:\ninput\n["mycircularqueue", "enqueue", "rear", "isfull", "dequeue", "rear"]\n[[3], [4], 4]\n\nexplanation\nmycircularqueu mycircularqueue(3);\nmycircularqueue.enqueue(1); true\nmycircularqueue.enqueue(2); true\nmycircularqueue.enqueue(3); true\nmycircularqueue.enqueue(4); false\nmycircularqueue.rear(); 3\nmycircularqueue.isfull(); true\nmycircularqueue.dequeue(); true\nmycircularqueue.rear(); 1000\nat 3000 to\xc2\xa0enqueue, dequeue,\xc2\xa0front,\xc2\xa0rear,\xc2\xa0isempty, and\xc2\xa0isfull.\n\n' depth, depth.\nnot is:\n\ngiven cur cur' root.\ncur' root.\nif root' subtree.\n\n\xc2\xa0\nexampl [4,2,6,3,1,5], [4,1,1,2,null,null,6,3,1,5]\n\nexampl [4,2,null,3,1], [4,2,null,1,1,3,null,null,1]\n\n\xc2\xa0\nconstraints:\n\nth product.\n\xc2\xa0\nexampl 6\nexampl 24\nexampl [-1,-2,-3]\noutput: -6\n\n\xc2\xa0\nconstraints:\n\n3 <=\xc2\xa0104\n-1000 b'for invers nums[j].\ngiven huge, [1,3,2] [2,1,3] pair.\n\n\xc2\xa0\nconstraints:\n\n1 courses[i] [durationi, lastdayi] durationi lastdayi.\ny simultaneously.\nreturn take.\n\xc2\xa0\nexampl [[100,200],[200,1300],[1000,1250],[2000,3200]]\noutput: \nthere most:\nfirst, course, 100th readi 101st day.\nsecond, 1100th 1101st \nthird, 200 1300th 3300th date.\n\nexampl [[3,2],[4,3]]\noutput: courses.length durationi, lastdayi non-decreasing\xc2\xa0order. lists.\nw [a, b] [c, d] c.\n\xc2\xa0\nexampl [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\noutput: [20,24]\nexplanation: \nlist 24,26], [20,24].\nlist 20], 18, 22, 30], [20,24].\n\nexampl [[1,2,3],[1,2,3],[1,2,3]]\noutput: [1,1]\n\n\xc2\xa0\nconstraints:\n\nnums.length k\n1 3500\n1 nums[i].length 50\n-105 nums[i][j] 105\nnums[i]\xc2\xa0i there'r a2 b2 b'on single-thread cpu, functions. n-1.\nfunction stack: starts, stack. executed. id, ended, timestamp.\ny logs, logs[i] "{function_id}:{"start" "end"}:{timestamp}". "0:start:3" timestamp "1:end:2" recursively.\na function\' exclus 3.\nreturn ["0:start:0","1:start:2","1:end:5","0:end:6"]\noutput: [3,4]\nexplanation:\nfunct 1.\nfunction 5.\nfunction resum time.\nso spend executing, executing.\n\nexampl ["0:start:0","0:start:2","0:end:5","0:start:6","0:end:6","0:end:7"]\noutput: [8]\nexplanation:\nfunct itself.\nfunct (recurs call) time.\nfunct (initi again.\nfunct (2nd ["0:start:0","0:start:2","0:end:5","1:start:6","1:end:6","0:end:7"]\noutput: [7,1]\nexplanation:\nfunct 6.\nfunction executing.\n\n\xc2\xa0\nconstraints:\n\n1 logs.length function_id 109\nno event happen timestamp.\nno timestamp.\neach "end" "start" log.\n\n' [3.00000,14.50000,11.00000]\nexplanation: 14.5, 11.\nhenc 11].\n\nexampl [3,9,20,15,7]\noutput: [3.00000,14.50000,11.00000]\n\n\xc2\xa0\nconstraints:\n\nth store, sell. price. offers, offer sale price.\ny price[i] item, needs[i] piec buy.\nyou special[i] special[i][j] special[i][n] array) offer.\nreturn given, offers. want, want.\n\xc2\xa0\nexampl [2,5], [[3,0,5],[1,2,10]], [3,2]\noutput: 14\nexplanation: items, their $2 \nin 0b\nin $10 1a 2b. 2b, 2b (special #2), $4 2a.\n\nexampl [[1,1,0,4],[2,2,1,9]], $2, c. 1b, 2a ,2b 1c. 1c, 1b #1), 1c.\n\n\xc2\xa0\nconstraints:\n\nn price.length\nn needs.length\n1 6\n0 10\n0 10\n1 special.length 100\nspecial[i].length "06".\nin \'9\' (\'0\' excluded). "1*" "12", "13", "14", "15", "16", "17", "18", "19". equival represent.\ngiven "3", "4", "5", "6", "7", "8", "9".\neach "c", "d", "e", "f", "h", "i" respectively.\nhence, "*".\n\nexampl "1*"\noutput: 18\nexplanation: "19".\neach (e.g. "k").\nhence, "1*".\n\nexampl "2*"\noutput: "21", "22", "23", "24", "25", "26", "27", "28", "29".\n"21", "26" decoded, "29" way.\nhence, "2*".\n\n\xc2\xa0\nconstraints:\n\n1 b'solv "x=#value". coefficient. "no solution" equation, "infinit solutions" equation.\nif "x+5-3+x=6+x-2"\noutput: "x=2"\n\nexampl "x=x"\noutput: solutions"\n\nexampl "2x=x"\noutput: "x=0"\n\n\xc2\xa0\nconstraints:\n\n3 equation.length 1000\nequat \'=\'.\nequat \'x\'.\n\n' double-end (deque).\nimpl mycirculardequ class:\n\nmycirculardeque(int k.\nboolean insertfront() deque. successful, insertlast() rear deletefront() deletelast() getfront() empty.\nint getrear() empty.\nboolean 1:\ninput\n["mycirculardeque", "insertlast", "insertfront", "getrear", "deletelast", "getfront"]\n[[3], 4]\n\nexplanation\nmycirculardequ mycirculardeque(3);\nmycirculardeque.insertlast(1); true\nmycirculardeque.insertlast(2); true\nmycirculardeque.insertfront(3); true\nmycirculardeque.insertfront(4); full.\nmycirculardeque.getrear(); 2\nmycirculardeque.isfull(); true\nmycirculardeque.deletelast(); true\nmycirculardeque.getfront(); 2000 insertfront, insertlast, deletefront, deletelast, getfront, getrear, isempty, isfull.\n\n' error [1,12,-5,-6,50,3], 12.75000\nexplanation: 50) 51 12.75\n\nexampl 5.00000\n\n\xc2\xa0\nconstraints:\n\nn error, got loss number.\ny statu error.\nfind [1,2,2,4]\noutput: [1,2]\n\n\xc2\xa0\nconstraints:\n\n2 pairs[i] righti] righti.\na chain fashion.\nreturn formed.\ny intervals. [[1,2],[2,3],[3,4]]\noutput: [3,4].\n\nexampl [[1,2],[7,8],[4,5]]\noutput: [7,8].\n\n\xc2\xa0\nconstraints:\n\nn pairs.length\n1 it.\na forward.\na strings: "c".\n\nexampl "aaa".\n\n\xc2\xa0\nconstraints:\n\n1 english, concept let\' successor. "an" successor "other", "another".\ngiven length.\nreturn replacement.\n\xc2\xa0\nexampl ["cat","bat","rat"], cattl rattl battery"\noutput: rat bat"\n\nexampl ["a","b","c"], "aadsfasf absb bbab cadsfafs"\noutput: c"\n\n\xc2\xa0\nconstraints:\n\n1 100\ndictionary[i] sentence.length 106\nsentenc spaces.\nth 1000]\nthe 1000]\neveri space.\nsent dota2, parties: radiant dire.\nth dota2 senat parties. now vote round-bas procedure. exercis rights:\n\nban senator\' rounds.\nannounc victory: party, announc victori parti belonging. \'d\' dire party. senators, n.\nthe procedur voting. lost procedure.\nsuppos predict "radiant" "dire".\n\xc2\xa0\nexampl "rd"\noutput: "radiant"\nexplanation: ban can\'t anymor banned. guy vote.\n\nexampl "rdd"\noutput: "dire"\nexplanation: vote.\n\n\xc2\xa0\nconstraints:\n\nn senate.length\n1 104\nsenate[i] \'d\'.\n\n' 'a' screen notepad. notepad step:\n\ncopi all: allowed).\npaste: past screen.\n\xc2\xa0\nexampl 'a'.\nin operation.\nin 'aa'.\nin 'aaa'.\n\nexampl root\xc2\xa0of subtrees.\nfor subtrees, them.\ntwo [1,2,3,4,null,2,4,null,null,4]\noutput: [[2,4],[4]]\n\nexampl [2,1,1]\noutput: [2,2,2,3,null,3,null]\noutput: [[2,3],[3]]\n\n\xc2\xa0\nconstraints:\n\nth 10^4]\n-200 104].\n-104\xc2\xa0<= 104\nroot tree.\n-105\xc2\xa0<= algorithm:\n\ncr nums.\nrecurs value.\nrecurs value.\n\nreturn [3,2,1,6,0,5]\noutput: [6,3,5,null,2,0,null,null,1]\nexplanation: follow:\n- [3,2,1,6,0,5] [0,5].\n [2,1].\n child.\n [2,1] [1].\n [0,5] [0] [].\n 0.\n child.\n\nexampl [3,null,2,null,1]\n\n\xc2\xa0\nconstraints:\n\n1 layout height\xc2\xa0and 2height+1 1.\nplace (more res[0][(n-1)/2]).\nfor res[r][c], res[r+1][c-2height-r-1] res[r+1][c+2height-r-1].\ncontinu placed.\nani "".\n\nreturn res.\n\xc2\xa0\nexampl \n[["","1",""],\n\xc2\xa0["2","",""]]\n\nexampl \n[["","","","1","","",""],\n\xc2\xa0["","2","","","","3",""],\n\xc2\xa0["","","4","","","",""]]\n\n\xc2\xa0\nconstraints:\n\nth 210].\n-99 99\nthe 10].\n\n' 0), origin, plane. moves, moves.\ny moves[i] move. (right), \'l\' (left), \'u\' (up), (down).\nreturn "facing" irrelevant. also, magnitud robot\' move.\n\xc2\xa0\nexampl "ud"\noutput: magnitude, started. "moves" origin. moves.\n\n\xc2\xa0\nconstraints:\n\n1 moves.length 104\nmove \'r\'.\n\n' arr, closer if:\n\n|a x| |b x|, or\n|a [1,2,3,4]\nexampl [1,2,3,4]\n\n\xc2\xa0\nconstraints:\n\n1 arr.length\n1 arr.length 104\narr arr[i], order.\ndetermin true:\n\neach integer).\nal more.\n\nreturn conditions, [1,3,5] [1,2,3,3,4,5]\noutput: subsequences:\n[1,2,3,3,4,5] 3\n[1,2,3,3,4,5] [1,2,3,3,4,4,5,5]\noutput: subsequences:\n[1,2,3,3,4,4,5,5] 5\n[1,2,3,3,4,4,5,5] [1,2,3,4,4,5]\noutput: more.\n\n\xc2\xa0\nconstraints:\n\n1 1000\nnum smoother filter nine smoother). smoother).\n\ngiven img grayscal [[0,0,0],[0,0,0],[0,0,0]]\nexplanation:\nfor (0,0), (0,2), (2,0), (2,2): floor(3/4) floor(0.75) 0\nfor (0,1), (1,0), (1,2), (2,1): floor(5/6) floor(0.83333333) (1,1): floor(8/9) floor(0.88888889) [[100,200,100],[200,50,200],[100,200,100]]\noutput: [[137,141,137],[141,138,141],[137,141,137]]\nexplanation:\nfor floor((100+200+200+50)/4) floor(137.5) 137\nfor floor((200+200+50+200+100+100)/6) floor(141.666667) 141\nfor floor((50+200+200+200+200+100+100+100+100)/9) floor(138.888889) 138\n\n\xc2\xa0\nconstraints:\n\nm img.length\nn img[i].length\n1 img[i][j] 255\n\n' levels.\nth end-nod nodes), calculation.\nit (5,3,null,9).\n\nexampl [1,3,2,5,null,null,9,6,null,7]\noutput: fourth (6,null,null,null,null,null,7).\n\nexampl [1,3,2,5]\noutput: (3,2).\n\n\xc2\xa0\nconstraints:\n\nth 3000].\n-100 strang printer properties:\n\nth time.\nat characters.\n\ngiven "aaabbb"\noutput: \'a\'.\n\n\xc2\xa0\nconstraints:\n\n1 element.\nw (0-based) 2).\n\xc2\xa0\nexampl [4,2,3]\noutput: array.\n\nexampl [4,2,1]\noutput: element.\n\n\xc2\xa0\nconstraints:\n\nn requirement:\n\nsuppos =\xc2\xa0[a1, a3, , an], [|a1 a2|, |a2 a3|, |a3 a4|, |an-1 an|] integers.\n\nreturn answer. [1,2,3]\nexplanation: [1,1] integer: integers: b'nearli everyon table. tabl (1-indexed).\ngiven table.\n\xc2\xa0\nexampl low high, trim [low, high]. descendant). proven answer.\nreturn depend bounds.\n\xc2\xa0\nexampl [1,0,2], high [1,null,2]\n\nexampl [3,0,4,null,2,null,null,1], [3,2,null,1]\n\n\xc2\xa0\nconstraints:\n\nth tree.\n0 num. number.\nreturn 2736\noutput: 7236\nexplanation: 9973\noutput: 9973\nexplanation: swap.\n\n\xc2\xa0\nconstraints:\n\n0 sub-node. sub-nodes, sub-nodes. property\xc2\xa0root.v min(root.left.val, root.right.val)\xc2\xa0alway holds.\ngiven tree.\nif instead.\n\xc2\xa0\n\xc2\xa0\nexampl [2,2,5,null,null,5,7]\noutput: [2,2,2]\noutput: value.\n\n\xc2\xa0\nconstraints:\n\nth 25].\n1 1\nroot.val root.right.val)\xc2\xa0for tree.\n\n" wall. where:\n\nbutton bulbs.\nbutton ...).\nbutton 4: 3k ...).\n\nyou total. press, press.\ngiven presses, status presses.\n\xc2\xa0\nexampl be:\n- [off] 1\n- [on] off] 2\n- on] 3\n- array\xc2\xa0nums, subsequences.\nnotic increasing.\n\xc2\xa0\nexampl [1,3,5,4,7]\noutput: 7].\n\nexampl [2,2,2,2,2]\noutput: subsequences' 5.\n\n\n\xc2\xa0\nconstraints:\n\n1 106\n\n" subarray). increasing.\na (l r) [nums[l], nums[l nums[r nums[r]] 1].\n\xc2\xa0\nexampl 3.\neven [1,3,5,7] subsequence, element\n4.\n\nexampl [2] strictly\nincreasing.\n\n\xc2\xa0\nconstraints:\n\n1 forest golf event. matrix:\n\n0 walk through.\n1 through.\na through, height.\n\nin west. off.\nyou tallest. (an cell).\nstart trees. height, off.\n\xc2\xa0\nexampl [[1,2,3],[0,0,4],[7,6,5]]\noutput: tallest steps.\n\nexampl [[1,2,3],[0,0,0],[7,6,5]]\noutput: blocked.\n\nexampl [[2,3,4],[0,0,5],[8,7,6]]\noutput: trees.\nnot steps.\n\n\xc2\xa0\nconstraints:\n\nm forest.length\nn forest[i].length\n1 forest[i][j] structure.\nimpl the\xc2\xa0magicdictionary\xc2\xa0class:\n\nmagicdictionary()\xc2\xa0initi builddict(string[]\xc2\xa0dictionary)\xc2\xa0set structure\xc2\xa0with dictionary.\nbool searchword) searchword false.\n\n\xc2\xa0\nexampl 1:\ninput\n["magicdictionary", "builddict", [["hello", "leetcode"]], ["hhllo"], ["hell"], ["leetcoded"]]\noutput\n[null, false]\n\nexplanation\nmagicdictionari magicdictionari magicdictionary();\nmagicdictionary.builddict(["hello", "leetcode"]);\nmagicdictionary.search("hello"); false\nmagicdictionary.search("hhllo"); "hello" true\nmagicdictionary.search("hell"); false\nmagicdictionary.search("leetcoded"); <=\xc2\xa0dictionary.length <=\xc2\xa0dictionary[i].length in\xc2\xa0dictionary\xc2\xa0ar <=\xc2\xa0searchword.length 100\nsearchword\xc2\xa0consist letters.\nbuilddict\xc2\xa0wil search.\nat following:\n\nmap value.\nreturn string.\n\nimpl mapsum class:\n\nmapsum() key-val map. existed, overridden one.\nint sum(str pairs\' prefix.\n\n\xc2\xa0\nexampl 1:\ninput\n["mapsum", "sum", "sum"]\n[[], ["apple", ["ap"], ["app", ["ap"]]\noutput\n[null, 5]\n\nexplanation\nmapsum mapsum();\nmapsum.insert("apple", \nmapsum.sum("ap"); (appl 3)\nmapsum.insert("app", app 5)\n\n\xc2\xa0\nconstraints:\n\n1 key.length, 50\nkey 50 sum.\n\n' characters: \')\' valid.\nth string:\n\nani \')\'.\nani \'(\'.\nleft \')\'.\n\'*\' "".\n\n\xc2\xa0\nexampl "(*)"\noutput: "(*))"\noutput: 100\ns[i] card cards, 9]. [\'+\', \'/\'] 24.\nyou division.\n\n\t\nfor 12.\n\n\neveri particular, operator.\n\t\nfor "-1 1" allowed.\n\n\ny together\n\t\nfor "12 12" valid.\n\n\n\nreturn 24, [4,1,8,7]\noutput: (8-4) (7-1) 24\n\nexampl [1,2,1,2]\noutput: false\n\n\xc2\xa0\nconstraints:\n\ncards.length 4\n1 cards[i] "abca"\noutput: \'c\'.\n\nexampl basebal rules. rounds, rounds\' scores.\nat game, record. following:\n\nan x.\n"+" scores. scores.\n"d" score.\n"c" score.\n\nreturn ["5","2","c","d","+"]\noutput: 30\nexplanation:\n"5" record, [5].\n"2" 2].\n"c" [5].\n"d" 10].\n"+" 15].\nthe 30.\n\nexampl ["5","-2","4","c","d","9","+","+"]\noutput: 27\nexplanation:\n"5" [5].\n"-2" -2 -2].\n"4" 4].\n"c" -2].\n"d" -4 -4].\n"9" -4, 9].\n"+" 5].\n"+" 14].\nthe 27.\n\nexampl ["1","c"]\noutput: 0\nexplanation:\n"1" [1].\n"c" [].\nsinc 1000\nops[i] 104, 104].\nfor record.\nfor "c" record.\n\n' cycles.\ny added. existed. [[1,2],[1,3],[2,3]]\noutput: [2,3]\n\nexampl [[1,2],[2,3],[3,4],[1,4],[1,5]]\noutput: [1,4]\n\n\xc2\xa0\nconstraints:\n\nn edges.length\n3 1000\nedges[i].length edges.length\nai bi\nther connected.\n\n' that, parent, parents.\nth existed.\nth 2d-array edges. [ui, vi] ui vi, vi.\nreturn 2d-array.\n\xc2\xa0\nexampl [[1,2],[2,3],[3,4],[4,1],[1,5]]\noutput: [4,1]\n\n\xc2\xa0\nconstraints:\n\nn ui, vi n\nui vi\n\n' b\xe2\x80\x8b\xe2\x80\x8b\xe2\x80\x8b\xe2\x80\x8b\xe2\x80\x8b\xe2\x80\x8b -1.\nnotice: "abcabc".\n\xc2\xa0\nexampl "cdabcdab"\noutput: "abcdabcdabcd", [5,4,5,1,1,5]\noutput: [1,4,5,4,4,5]\noutput: chessboard, (row, column) attempt moves. 0-indexed, 1).\na chess make, illustr cardin orthogon direction.\n\neach uniformli (even chessboard) there.\nth chessboard.\nreturn moving.\n\xc2\xa0\nexampl 0.06250\nexplanation: (to (2,1)) board.\nfrom positions, board.\nth stay 0.0625.\n\nexampl 1.00000\n\n\xc2\xa0\nconstraints:\n\n1 25\n0 them.\nreturn [1,2,1,2,6,7,5,1], [0,3,5]\nexplanation: 5].\nwe larger.\n\nexampl [1,2,1,2,1,2,1,2,1], [0,2,4]\n\n\xc2\xa0\nconstraints:\n\n1 <\xc2\xa0216\n1 floor(nums.length 3)\n\n' employe information, employee' import subordinates' ids.\nyou where:\n\nemployees[i].id employee.\nemployees[i].import employee.\nemployees[i].subordin subordin employee.\n\ngiven indirect subordinates.\n\xc2\xa0\nexampl [[1,5,[2,3]],[2,3,[]],[3,3,[]]], subordinates: 3.\nthey 3.\nthus, 11.\n\nexampl [[1,2,[5]],[5,-3,[]]], -3\nexplanation: subordinates.\nthus, -3.\n\n\xc2\xa0\nconstraints:\n\n1 employees.length 2000\n1 employees[i].id unique.\n-100 employees[i].import 100\none leader subordinates.\nth employees[i].subordin ids.\n\n" stickers. sticker individu quantiti sticker.\nreturn impossible, -1.\nnote: cases, us words.\n\xc2\xa0\nexampl ["with","example","science"], "thehat"\noutput: 3\nexplanation:\nw "with" stickers, "example" sticker.\naft "thehat".\nalso, string.\n\nexampl ["notice","possible"], "basicbasic"\noutput: -1\nexplanation:\nw "basicbasic" stickers.\n\n\xc2\xa0\nconstraints:\n\nn stickers.length\n1 stickers[i].length target.length 15\nstickers[i] strings.\nreturn lowest. ["i","love","leetcode","i","love","coding"], ["i","love"]\nexplanation: "love" ["the","day","is","sunny","the","the","the","sunny","is","is"], ["the","is","sunny","day"]\nexplanation: "the", "sunny" "day" respectively.\n\n\xc2\xa0\nconstraints:\n\n1 words[i] letters.\nk words[i]]\n\n\xc2\xa0\nfollow-up: log(k)) bits: namely, 101\n\nexampl 111.\nexampl 1011.\n\xc2\xa0\nconstraints:\n\n1 land) 4-direct (horizont vertical.) water.\nth island.\nreturn island, [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\noutput: 4-directionally.\n\nexampl [[0,0,0,0,0,0,0,0]]\noutput: 50\ngrid[i][j] consecutively.\nsubstr occur.\n\xc2\xa0\nexampl "00110011"\noutput: 0\'s: "0011", "01", "1100", "01".\nnotic occur.\nalso, "00110011" (and 1\'s) "10101"\noutput: substrings: 0\'s.\n\n\xc2\xa0\nconstraints:\n\n1 elements.\nyour (contiguous) [1,2,2,3,1]\noutput: twice.\nof degree:\n[1, 2]\nthe [1,2,2,3,1,4,2]\noutput: times.\nso [2,2,3,1,4,2] 6.\n\n\xc2\xa0\nconstraints:\n\nnums.length 50,000.\nnums[i] 49,999.\n\n' [4,3,2,3,5,2,1], (5), (2,3), (2,3) sums.\n\nexampl 4].\n\n' plane.\ny positions[i] sidelengthi] sidelengthi lefti.\neach squares. fall (neg direction) brush left/right onc lands, freez moved.\naft dropped, squares.\nreturn square.\n\xc2\xa0\nexampl [[1,2],[2,3],[6,1]]\noutput: [2,5,5]\nexplanation:\naft drop, 2.\nafter 5.\nafter 5.\nthus, 5].\n\nexampl [[100,100],[200,100]]\noutput: [100,100]\nexplanation:\naft 100.\nafter 100.\nthus, [100, 100].\nnote positions.length 108\n1 val.\nfind [4,2,7,1,3], [2,1,3]\n\nexampl 5000].\n1 107\nroot tree.\n1 insertion. bst.\nnotice\xc2\xa0that exist\xc2\xa0multipl the\xc2\xa0insertion, [4,2,7,1,3,5]\nexplanation: is:\n\n\nexampl [40,20,60,10,30,50,70], 25\noutput: [40,20,60,10,30,50,70,null,null,25]\n\nexampl [4,2,7,1,3,null,null,null,null,null,null], [4,2,7,1,3,5]\n\n\xc2\xa0\nconstraints:\n\nth in\xc2\xa0th [0,\xc2\xa0104].\n-108 108\nall unique.\n-108 108\nit' bst.\n\n" stream. kthlargest class:\n\nkthlargest(int int[] add(int stream.\n\n\xc2\xa0\nexampl 1:\ninput\n["kthlargest", "add", "add"]\n[[3, 2]], [10], 8]\n\nexplanation\nkthlargest kthlargest(3, 2]);\nkthlargest.add(3); 4\nkthlargest.add(5); 5\nkthlargest.add(10); 5\nkthlargest.add(9); 8\nkthlargest.add(4); add.\nit element.\n\n' [-1,0,3,5,9,12], hashset hash libraries.\nimpl myhashset add(key) hashset.\nbool contains(key) not.\nvoid remove(key) hashset. hashset, nothing.\n\n\xc2\xa0\nexampl 1:\ninput\n["myhashset", "contains", "contains"]\n[[], [2]]\noutput\n[null, false]\n\nexplanation\nmyhashset myhashset();\nmyhashset.add(1); [1]\nmyhashset.add(2); 2]\nmyhashset.contains(1); true\nmyhashset.contains(3); found)\nmyhashset.add(2); 2]\nmyhashset.contains(2); true\nmyhashset.remove(2); [1]\nmyhashset.contains(2); (alreadi removed)\n\xc2\xa0\nconstraints:\n\n0 add, contains.\n\n' hashmap myhashmap class:\n\nmyhashmap() map.\nvoid (key, hashmap. value.\nint mapped, key.\nvoid key.\n\n\xc2\xa0\nexampl 1:\ninput\n["myhashmap", "get"]\n[[], -1]\n\nexplanation\nmyhashmap myhashmap();\nmyhashmap.put(1, [[1,1]]\nmyhashmap.put(2, [[1,1], [2,2]]\nmyhashmap.get(1); [2,2]]\nmyhashmap.get(3); found), [2,2]]\nmyhashmap.put(2, [2,1]] value)\nmyhashmap.get(2); [2,1]]\nmyhashmap.remove(2); [[1,1]]\nmyhashmap.get(2); [[1,1]]\n\n\xc2\xa0\nconstraints:\n\n0 put, get, remove.\n\n' list.\na attributes: next. pointer/refer node.\nif prev 0-indexed.\nimpl mylinkedlist class:\n\nmylinkedlist() object.\nint index) indexth invalid, addathead(int insertion, list.\nvoid addattail(int addatindex(int inserted.\nvoid deleteatindex(int valid.\n\n\xc2\xa0\nexampl 1:\ninput\n["mylinkedlist", "addathead", "addattail", "addatindex", "deleteatindex", 3]\n\nexplanation\nmylinkedlist mylinkedlist();\nmylinkedlist.addathead(1);\nmylinkedlist.addattail(3);\nmylinkedlist.addatindex(1, 1->2->3\nmylinkedlist.get(1); 2\nmylinkedlist.deleteatindex(1); 1->3\nmylinkedlist.get(1); 3\n\n\xc2\xa0\nconstraints:\n\n0 1000\npleas linkedlist library.\nat addathead, addattail, addatindex deleteatindex.\n\n' letter.\n\xc2\xa0\nexampl "hello"\n\nexampl "here"\noutput: "here"\n\nexampl "lovely"\noutput: "lovely"\n\n\xc2\xa0\nconstraints:\n\n1 blacklist. blacklist language.\nimpl blacklist) blacklist.\nint blacklist.\n\n\xc2\xa0\nexampl "pick"]\n[[7, 4]\n\nexplanation\nsolut solution(7, 5]);\nsolution.pick(); [0,1,4,6] ok. pick,\n 1/4).\nsolution.pick(); 4\nsolution.pick(); 1\nsolution.pick(); 6\nsolution.pick(); 0\nsolution.pick(); blacklist.length <- min(105, 1)\n0 blacklist[i] and\xc2\xa0s2, 231\nexplanation: "s" (115) sum.\ndelet "t" 116 sum.\nat 115 this.\n\nexampl "delete", "leet"\noutput: 403\nexplanation: "dee" "delete" "let",\nadd 100[d] 101[e] "e" "leet" "let", 100+101+101+101 403.\nif "lee" "eet", 433 417, higher.\n\n\xc2\xa0\nconstraints:\n\n1 1000\ns1 [10,5,2,6], are:\n[10], [10, 6]\nnote k.\n\nexampl fee fee.\nfind like, transaction.\nnote: [1,3,2,8,4,9], by:\n- prices[0] prices[3] 8\n- prices[4] 4\n- prices[5] ((8 [1,3,7,5,10,3], modul track half-open them.\na right.\nimpl rangemodul class:\n\nrangemodule() structure.\nvoid addrange(int right), interval. tracked.\nboolean queryrange(int tracked, otherwise.\nvoid removerange(int right).\n\n\xc2\xa0\nexampl 1:\ninput\n["rangemodule", "addrange", "removerange", "queryrange", "queryrange"]\n[[], [14, 16], 14], [13, 15], [16, 17]]\noutput\n[null, true]\n\nexplanation\nrangemodul rangemodule();\nrangemodule.addrange(10, 20);\nrangemodule.removerange(14, 16);\nrangemodule.queryrange(10, 14); true,(everi tracked)\nrangemodule.queryrange(13, 15); false,(numb 14, 14.03, 14.17 15) tracked)\nrangemodule.queryrange(16, 17); despit operation)\n\n\xc2\xa0\nconstraints:\n\n1 addrange, queryrange, removerange.\n\n' characters:\n\nth (10 11).\n\ngiven one-bit character.\n\xc2\xa0\nexampl [1,0,0]\noutput: two-bit character.\nso [1,1,1,0]\noutput: character.\n\n\xc2\xa0\nconstraints:\n\n1 bits.length 1000\nbits[i] arrays.\n\xc2\xa0\nexampl [1,2,3,2,1], [3,2,1,4,7]\noutput: [3,2,1].\n\nexampl [0,0,0,0,0], [0,0,0,0,0]\noutput: b.\ngiven nums.length.\n\xc2\xa0\nexampl [1,3,1], here pairs:\n(1,3) 2\n(1,1) 0\n(3,1) 2\nthen (1,1), [1,6,1], 5\n\n\xc2\xa0\nconstraints:\n\nn nums.length\n2 2\n\n' words.\nif ["w","wo","wor","worl","world"]\noutput: "world"\nexplanation: "w", "wo", "wor", "worl".\n\nexampl ["a","banana","app","appl","ap","apply","apple"]\noutput: "apple"\nexplanation: "apply" "apple" dictionary. "apply".\n\n\xc2\xa0\nconstraints:\n\n1 account accounts[i] accounts[i][0] name, email account.\nnow, accounts. name. name.\naft accounts, format: [["john","johnsmith@mail.com","john_newyork@mail.com"],["john","johnsmith@mail.com","john00@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]\noutput: [["john","john00@mail.com","john_newyork@mail.com","johnsmith@mail.com"],["mary","mary@mail.com"],["john","johnnybravo@mail.com"]]\nexplanation:\nth john\' "johnsmith@mail.com".\nth mari accounts.\nw [[\'mary\', \'mary@mail.com\'], [\'john\', \'johnnybravo@mail.com\'], \n[\'john\', \'john00@mail.com\', \'john_newyork@mail.com\', \'johnsmith@mail.com\']] [["gabe","gabe0@m.co","gabe3@m.co","gabe1@m.co"],["kevin","kevin3@m.co","kevin5@m.co","kevin0@m.co"],["ethan","ethan5@m.co","ethan4@m.co","ethan0@m.co"],["hanzo","hanzo3@m.co","hanzo1@m.co","hanzo0@m.co"],["fern","fern5@m.co","fern1@m.co","fern0@m.co"]]\noutput: [["ethan","ethan0@m.co","ethan4@m.co","ethan5@m.co"],["gabe","gabe0@m.co","gabe1@m.co","gabe3@m.co"],["hanzo","hanzo0@m.co","hanzo1@m.co","hanzo3@m.co"],["kevin","kevin0@m.co","kevin3@m.co","kevin5@m.co"],["fern","fern0@m.co","fern1@m.co","fern5@m.co"]]\n\n\xc2\xa0\nconstraints:\n\n1 accounts.length 1000\n2 accounts[i].length accounts[i][j].length 30\naccounts[i][0] letters.\naccounts[i][j] (for email.\n\n' c++ program, comment sourc source[i] code. newlin \'\\n\'.\nin c++, comments, block comments.\n\nth "//" comment, ignored.\nth "/*" (non-overlapping) "*/" (here, order: right.) clear, "/*/" yet beginning.\n\nth others.\n\nfor ignored.\nsimilarly, ignored.\n\nif non-empty.\nther control quote, quot characters.\n\nfor "string "/* comment. */";" case.\n\nalso, macro interfer comments.\nit eventu comment.\nfinally, comments. details.\naft format.\n\xc2\xa0\nexampl ["/*test */", "int main()", "{ ", declar c;", test", multilin "}"]\noutput: ["int main()","{ "," ","int c;","a c;","}"]\nexplanation: visual below:\n/*test */\nint main()\n{ \n \nint c;\n/* test\n */\na c;\n}\nthe /* 6-9. comments.\nth below:\nint c;\na c;\n}\n\nexampl ["a/*comment", "line", "more_comment*/b"]\noutput: ["ab"]\nexplanation: "a/*comment\\nline\\nmore_comment*/b", deletion, deleted, delimit ["ab"].\n\n\xc2\xa0\nconstraints:\n\n1 source.length source[i].length 80\nsource[i] closed.\nther single-quot or\xc2\xa0double-quot input.\n\n' array.\nth index' right.\nif [1,7,3,6,5,6]\noutput: 3\nexplanation:\nth 3.\nleft 11\nright 11\n\nexampl -1\nexplanation:\nther statement.\nexampl [2,1,-1]\noutput: 0\nexplanation:\nth 0.\nleft 0)\nright 1000\n\n\xc2\xa0\nnote: as\xc2\xa01991:\xc2\xa0https://leetcode.com/problems/find-the-middle-index-in-array/\n" parts.\nth possible: earlier later.\nreturn parts.\n\xc2\xa0\nexampl [[1],[2],[3],[],[]]\nexplanation:\nth output[0] output[0].v output[0].next output[4] listnod [].\n\nexampl [1,2,3,4,5,6,7,8,9,10], [[1,2,3,4],[5,6,7],[8,9,10]]\nexplanation:\nth parts.\n\n\xc2\xa0\nconstraints:\n\nth formula chemic formula, atom.\nth atom name.\non element\' follow.\n\nfor "h2o" "h2o2" "h1o2" impossible.\n\ntwo formula.\n\nfor "h2o2he3mg4" formula.\n\na (option added) "(h2o2)" "(h2o2)3" formulas.\n\nreturn form: order), on.\nth "h2o"\noutput: "h2o"\nexplanation: {\'h\': \'o\': 1}.\n\nexampl "mg(oh)2"\noutput: "h2mgo2"\nexplanation: \'mg\': 2}.\n\nexampl "k4(on(so3)2)2"\noutput: "k4n2o14s4"\nexplanation: {\'k\': \'n\': \'s\': 4}.\n\n\xc2\xa0\nconstraints:\n\n1 formula.length 1000\nformula \')\'.\nformula self-divid contains.\n\nfor 128 0.\n\na zero.\ngiven right].\n\xc2\xa0\nexampl [1,2,3,4,5,6,7,8,9,11,12,15,22]\nexampl 47, 85\noutput: [48,55,66,77]\n\n\xc2\xa0\nconstraints:\n\n1 calendar. booking.\na book moment events.).\nth end), end.\nimpl mycalendar class:\n\nmycalendar() calendar object.\nboolean book(int start, end) booking. calendar.\n\n\xc2\xa0\nexampl 1:\ninput\n["mycalendar", "book", "book"]\n[[], [15, 25], [20, 30]]\noutput\n[null, true]\n\nexplanation\nmycalendar mycalendar();\nmycalendar.book(10, 20); true\nmycalendar.book(15, 25); event.\nmycalendar.book(20, 30); booked, 20.\n\xc2\xa0\nconstraints:\n\n0 book.\n\n' 7.\na reversed.\ntwo b1, b2, bi.\n\xc2\xa0\nexampl "bccb"\noutput: \'bb\', \'cc\', \'bcb\', \'bccb\'.\nnote \'bcb\' "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"\noutput: 104860361\nexplanation: 3104860382 subsequences, 104860361 7.\n\n\xc2\xa0\nconstraints:\n\n1 mycalendartwo class:\n\nmycalendartwo() 1:\ninput\n["mycalendartwo", [50, 60], 40], 10], [25, 55]]\noutput\n[null, true]\n\nexplanation\nmycalendartwo mycalendartwo();\nmycalendartwo.book(10, booked. \nmycalendartwo.book(50, 60); \nmycalendartwo.book(10, 40); \nmycalendartwo.book(5, booking.\nmycalendartwo.book(5, 10); booked.\nmycalendartwo.book(25, 55); 40) event, [40, 55) event.\n\n\xc2\xa0\nconstraints:\n\n0 k-book events.)\ny events.\nimpl mycalendarthre class:\n\nmycalendarthree() 1:\ninput\n["mycalendarthree", 3]\n\nexplanation\nmycalendarthre mycalendarthree();\nmycalendarthree.book(10, disjoint, 1-booking.\nmycalendarthree.book(50, 1-booking.\nmycalendarthree.book(10, 2-booking.\nmycalendarthree.book(5, 3-booking.\nmycalendarthree.book(5, 3\nmycalendarthree.book(25, image[i][j] pixel image.\ny sr, sc, newcolor. flood image[sr][sc].\nto fill, pixel, color), aforement newcolor.\nreturn fill.\n\xc2\xa0\nexampl [[1,1,1],[1,1,0],[1,0,1]], sr sc newcolor [[2,2,2],[2,2,0],[2,0,1]]\nexplanation: (sr, sc) pixel), pixels) color.\nnot pixel.\n\nexampl [[0,0,0],[0,0,0]], [[2,2,2],[2,2,2]]\n\n\xc2\xa0\nconstraints:\n\nm image.length\nn image[i].length\n1 image[i][j], 216\n0 <\xc2\xa0n\n\n' asteroid row.\nfor asteroid, (posit left). speed.\nfind collisions. meet, explode. meet.\n\xc2\xa0\nexampl [5,10,-5]\noutput: [5,10]\nexplanation: -5 collid collide.\n\nexampl [8,-8]\noutput: -8 explod other.\n\nexampl [10,2,-5]\noutput: [10]\nexplanation: -5. 10.\n\n\xc2\xa0\nconstraints:\n\n2 asteroids.length asteroids[i] 1000\nasteroids[i] lisp-lik of.\nth syntax follows.\n\nan mult variable. integer.\n(an negative.)\na "(let v1 e1 v2 e2 vn en expr)", e1, e2, sequentially; expr.\nan "(add e2)" e2.\na "(mult "mult", e2.\nfor names. digits. additionally, convenience, "mult" protect names.\nfinally, scope. evaluated, context evaluation, innermost scope parentheses) variable, sequentially. legal. detail scope.\n\n\xc2\xa0\nexampl (mult (let (add y))))"\noutput: y), x,\nwe outermost evaluate.\nsinc x)"\noutput: statement sequentially.\n\nexampl y) y))"\noutput: x.\nthe 3+2 2000\nthere expression.\nth integer.\nth legal monoton y.\ngiven 1234\noutput: 1234\n\nexampl 332\noutput: 299\n\n\xc2\xa0\nconstraints:\n\n0 temperatur daili temperatures, wait warmer temperature. [73,74,75,71,69,72,76,73]\noutput: [1,1,4,2,1,1,0,0]\nexampl [30,40,50,60]\noutput: [1,1,1,0]\nexampl [30,60,90]\noutput: [1,1,0]\n\n\xc2\xa0\nconstraints:\n\n1 <=\xc2\xa0temperatures.length 105\n30 <=\xc2\xa0temperatures[i] times:\n\npick earn points. afterwards, [3,4,2]\noutput: operations:\n- consequently, deleted. [2].\n- [].\nyou points.\n\nexampl [2,2,3,3,3,4]\noutput: 4' [3,3].\n- [3].\n- points.\n\xc2\xa0\nconstraints:\n\n1 cherries, integers.\n\n0 through,\n1 cherri or\n-1 thorn way.\n\nreturn below:\n\nstart (cell 1).\nafter cells.\nwhen cherry, 0.\nif collected.\n\n\xc2\xa0\nexampl [[0,1,-1],[1,0,-1],[1,1,1]]\noutput: went down, 2).\n4 trip, [[0,1,-1],[0,0,-1],[0,0,0]].\nthen, home, cherry.\nth [[1,1,-1],[1,-1,1],[-1,1,1]]\noutput: 1.\ngrid[0][0] -1\ngrid[n -1\n\n' times[i] (ui, wi), wi signal target.\nw send signal. signal, [[2,1,1],[2,3,1],[3,4,1]], [[1,2,1]], times.length 6000\ntimes[i].length 3\n1 vi\n0 vi) unique. edges.)\n\n' target.\nnot around.\n\nfor \'z\' \'b\'], \'a\'.\n\n\xc2\xa0\nexampl ["c","f","j"], "c"\n\nexampl "c"\noutput: "f"\n\nexampl "d"\noutput: "f"\n\n\xc2\xa0\nconstraints:\n\n2 letters.length 104\nletters[i] letter.\nlett order.\nlett characters.\ntarget letter.\n\n' suffix.\nimpl wordfilt class:\n\nwordfilter(string[] words) dictionary.\nf(str suffix) suffix. -1.\n\n\xc2\xa0\nexampl 1:\ninput\n["wordfilter", "f"]\n[[["apple"]], "e"]]\noutput\n[null, 0]\n\nexplanation\nwordfilt wordfilter(["apple"]);\nwordfilter.f("a", "e"); \'e".\n\n\xc2\xa0\nconstraints:\n\n1 15000\n1 prefix.length, suffix.length 10\nwords[i], only.\nat 15000 f.\n\n' steps.\nyou floor.\n\xc2\xa0\nexampl [10,15,20]\noutput: 1.\n- top.\nth 15.\n\nexampl [1,100,1,1,1,100,1,1,100,1]\noutput: 0.\n- 4.\n- 6.\n- 7.\n- 9.\n- 6.\n\n\xc2\xa0\nconstraints:\n\n2 cost.length 999\n\n' unique.\ndetermin [3,6,1,0]\noutput: integer.\nfor -1.\nexampl numbers.\n\n\xc2\xa0\nconstraints:\n\n1 licensepl licenseplate. licenseplate, insensitive. more.\nfor "abc 12c", case), "abccdef", "caaacab", "cbca".\nreturn "1s3 pst", ["step","steps","stripe","stepple"]\noutput: "steps"\nexplanation: \'s\', \'p\', \'s\' \'t\'.\n"step" \'s\'.\n"steps" \'t\', characters.\n"stripe" \'s\'.\n"stepple" \'s\'.\nsinc "steps" 456", ["looks","pest","stew","show"]\noutput: "pest"\nexplanation: \'s\'. "pest", "stew", "show" shortest. "pest" earliest licenseplate.length 7\nlicensepl (uppercas \'.\n1 15\nwords[i] viru spread rapidly, quarantin infect instal walls.\nth model isinfected, isinfected[i][j] uninfect contamin virus. wall) boundary.\neveri night, unless resourc limited. (continu cells) threaten night). tie.\nreturn regions. infected, used.\n\xc2\xa0\nexampl isinfect [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\noutput: regions.\non viral is:\n\non contained.\n\n\nexampl saved, built.\nnotic cells.\n\nexampl [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\noutput: walls.\n\n\xc2\xa0\nconstraints:\n\nm ==\xc2\xa0isinfected.length\nn ==\xc2\xa0isinfected[i].length\n1 50\nisinfected[i][j] throughout uncontamin round.\n\n' lock wheels. wheel slots: \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\'. freeli around: slot.\nth \'0000\', wheels.\nyou deadend codes, unabl it.\ngiven unlock lock, impossible.\n\xc2\xa0\nexampl ["0201","0101","0102","1212","2002"], "0202"\noutput: "0000" "1000" "1100" "1200" "1201" "1202" "0202".\nnote "0001" "0002" "0102" "0202" invalid,\nbecaus stuck "0102".\n\nexampl ["8888"], "0009"\noutput: "0009".\n\nexampl ["8887","8889","8878","8898","8788","8988","7888","9888"], "8888"\noutput: stuck.\n\n\xc2\xa0\nconstraints:\n\n1 deadends.length 500\ndeadends[i].length 4\ntarget.length 4\ntarget deadends.\ntarget deadends[i] safe password. peculiar digit.\n\nfor "345" "012345":\n\n\t\nafter incorrect.\naft "012", "234", "345", unlocks.\n\n\n\nreturn "10"\nexplanation: safe.\n\nexampl "01100"\nexplanation: password:\n- "00" digit.\n- "10" digit.\nthu "01100" safe. "01100", "10011", "11001" safe.\n\n\xc2\xa0\nconstraints:\n\n1 kn 4096\n\n' destin nummov that:\n\non right.\ndur nummoves), direction.\n\ngiven nummoves) destination.\n\xc2\xa0\nexampl 3\nexplanation:\non step).\non steps).\non steps).\n\nexampl 2\nexplanation:\non steps).\n\n\xc2\xa0\nconstraints:\n\n-109 109\ntarget pyramid. letter. beneath top.\nto pyramid aesthet pleasing, triangular allowed. blocks. given\xc2\xa0a of\xc2\xa0three-lett allowed, block.\n\nfor (left) (right) block. "bac" bottom.\n\ny bottom, pyramid.\ngiven "bcd", ["bcc","cde","cea","fff"]\noutput: right.\nstart (level "ce" pyramid, "bcc", "cde", "cea". ["aab","aac","bcd","bbe","def"]\noutput: possibilites, 1.\n\n\xc2\xa0\nconstraints:\n\n2 bottom.length allowed.length 216\nallowed[i].length {\'a\', \'f\'}.\nall b"an b) b.\nfind two.\n\xc2\xa0\nexampl [[1,3],[1,4],[2,5],[3,5]]\noutput: {2, 4}. interval, interval.\nalso, fulfil condition.\nthus, [[1,2],[2,3],[2,4],[4,5]]\noutput: {1, 5}.\n\n\xc2\xa0\nconstraints:\n\n1 3000\nintervals[i].length <\xc2\xa0bi 108\n\n" b'special 1\'s.\neveri 0\'s.\n\nyou consecutive, non-empty, "11011000"\noutput: "11100100"\nexplanation: [occur s[1]] [at s[3]] swapped.\nthi swaps.\n\nexampl "10"\noutput: "10"\n\n\xc2\xa0\nconstraints:\n\n1 50\ns[i] \'1\'.\n string.\n\n' right] representation.\nrecal binary.\n\nfor 10101, bits.\n\n\xc2\xa0\nexampl 4\nexplanation:\n6 110 bits, prime)\n7 111 prime)\n8 prime)\n9 1001 prime)\n10 1010 prime)\n4 5\nexplanation:\n10 prime)\n11 1011 prime)\n12 1100 prime)\n13 1101 prime)\n14 1110 prime)\n15 1111 prime)\n5 bits.\n\n\xc2\xa0\nconstraints:\n\n1 part.\nnot "ababcbacadefegdehijhklij"\noutput: [9,7,8]\nexplanation:\nth "ababcbaca", "defegde", "hijhklij".\nthi part.\na "ababcbacadefegde", "hijhklij" parts.\n\nexampl "eccbbbbdec"\noutput: [10]\n\n\xc2\xa0\nconstraints:\n\n1 500\n mines. mines[i] grid[xi][yi] 0.\nreturn none, 0.\nan grid[r][c] arm 1's. sign, 1's.\n\xc2\xa0\nexampl [[4,2]]\noutput: grid, [[0,0]]\noutput: mines.length unique.\n\n" coupl sit seat hands.\nth row[i] seat. (2n 1).\nreturn side. switch seats.\n\xc2\xa0\nexampl [0,2,1,3]\noutput: (row[1]) (row[2]) person.\n\nexampl [3,2,0,1]\noutput: side.\n\n\xc2\xa0\nconstraints:\n\n2n row.length\n2 30\nn even.\n0 2n\nall return\xc2\xa0true\xc2\xa0if toeplitz. false.\na toeplitz [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\noutput: true\nexplanation:\nin the\xc2\xa0diagon are:\n"[9]", "[5, 5]", "[1, 1]", "[2, 2]", "[3, 3]", "[4]".\nin [[1,2],[2,2]]\noutput: 2]" elements.\n\n\xc2\xa0\nconstraints:\n\nm 99\n\n\xc2\xa0\nfollow once?\nwhat once?\n\n' same.\nreturn "aba"\nexampl "aaab"\noutput: ""\n\n\xc2\xa0\nconstraints:\n\n1 arr.\nw chunk partitions), chunk. 1\nexplanation:\nsplit result.\nfor sorted.\n\nexampl [2,1,3,4,4]\noutput: 4\nexplanation:\nw chunks, 4].\nhowever, [4] possible.\n\n\xc2\xa0\nconstraints:\n\n1 arr[i] 1].\nwe [4,3,2,1,0]\noutput: [1,0,2,3,4]\noutput: possible.\n\n\xc2\xa0\nconstraints:\n\nn "e 5" {"e": 1} (given evalvar ["e"] evalint [1]), ["-1*a","14"]\n\nan symbols, symbol.\na digits.) coeffici "2x" "-x".\n\nexpress subtraction.\n\nfor 3" ["7"].\n\nthe follows:\n\nfor coefficient, lexicographically.\n\t\nfor "b*a*c", "a*b*c".\n\n\nterm multiplied, multiplicity. term.\n\t\nfor "a*a*b*c" 4.\n\n\nthe asterisk exist.) printed.\nan well-format ["-2*a*a*a", "3*a*a*b", "3*b*b", "4*a", "5*c", "-6"].\nterm terms) included.\n\t\nfor "0" [].\n\n\n\n\xc2\xa0\nexampl 5", ["e"], ["-1*a","14"]\n\nexampl pressure", ["e", "temperature"], 12]\noutput: ["-1*pressure","5"]\n\nexampl "(e 8) (e 8)", ["1*e*e","-64"]\n\n\xc2\xa0\nconstraints:\n\n1 250\nexpress \'.\nexpress space.\n0 evalvars.length evalvars[i].length 20\nevalvars[i] letters.\nevalints.length evalvars.length\n-100 evalints[i] b'you\'r jewel jewels, have. jewels.\nlett "a".\n\xc2\xa0\nexampl "aaabbbb"\noutput: "z", "zz"\noutput: <=\xc2\xa0jewels.length, 50\njewel of\xc2\xa0jewel tile [[1,2,3],[4,5,0]].\ngiven solved. solved, [[1,2,3],[4,0,5]]\noutput: move.\n\nexampl [[1,2,3],[5,4,0]]\noutput: solved.\n\nexampl [[4,1,2],[5,0,3]]\noutput: board.\nan path:\naft 0: [[4,1,2],[5,0,3]]\nafter [[4,1,2],[0,5,3]]\nafter [[0,1,2],[4,5,3]]\nafter [[1,0,2],[4,5,3]]\nafter [[1,2,0],[4,5,3]]\nafter 5: [[1,2,3],[4,5,0]]\n\n\xc2\xa0\nconstraints:\n\nboard.length 2\nboard[i].length 3\n0 board[i][j] 5\neach global where:\n\n0 n\nnums[i] nums[j]\n\nth local 1]\n\nreturn inversions.\n\xc2\xa0\nexampl inversion.\n\nexampl inversion.\n\n\xc2\xa0\nconstraints:\n\nn "rxxlrxrxl", "xl" "lx", "rx" "xr". other.\n\xc2\xa0\nexampl "xrlxxrrlx"\noutput: steps:\nrxxlrxrxl ->\nxrxlrxrxl ->\nxrlxrxrxl ->\nxrlxxrrxl ->\nxrlxxrrlx\n\nexampl "x", "l"\noutput: start.length\xc2\xa0<= 104\nstart.length end.length\nboth and\xc2\xa0\'x\'.\n\n' j).\nthe fall. everywher t. swim of swim.\nreturn 0).\n\xc2\xa0\nexampl [[0,2],[1,3]]\noutput: 3\nexplanation:\nat 0).\nyou 3.\nwhen grid.\n\nexampl [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\noutput: rout shown.\nw connected.\n\n\xc2\xa0\nconstraints:\n\nn <\xc2\xa0n2\neach row. 01, 10.\n\nfor 0110.\n\ngiven rows.\n\xc2\xa0\nexampl \nrow 0\nrow 01\n\nexampl 01\n\n\xc2\xa0\nconstraints:\n\n1 sx, sy, tx, ty, (sx, sy) (tx, ty) operations, otherwise.\nth (x, y).\n\xc2\xa0\nexampl sx sy tx ty true\nexplanation:\non is:\n(1, 5)\n\nexampl rabbits. rabbit "how you?" answers[i] rabbit.\ngiven forest.\n\xc2\xa0\nexampl 5\nexplanation:\nth red.\nth "2" inconsistent.\nsay blue.\nthen didn\'t didn\'t.\n\nexampl [10,10,10]\noutput: 11\n\n\xc2\xa0\nconstraints:\n\n1 answers.length other.\nreturn -1.\na adjacent.\n\xc2\xa0\nexampl [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\noutput: potenti shown.\nth column.\nth row.\n\nexampl chessboard.\n\nexampl [[1,0],[1,0]]\noutput: chessboard.\n\n\xc2\xa0\nconstraints:\n\nn board[i].length\n2 30\nboard[i][j] either\xc2\xa00 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/\n' you\xc2\xa0can create. "a1b2"\noutput: ["a1b2","a1b2","a1b2","a1b2"]\n\nexampl "3z4"\noutput: ["3z4","3z4"]\n\n\xc2\xa0\nconstraints:\n\n1 12\n graph[u] u to. graph[u], v. properties:\n\nther self-edg (graph[u] u).\nther parallel values).\nif graph[v] undirected).\nth them.\n\na bipartit independ b.\nreturn bipartite.\n\xc2\xa0\nexampl [[1,2,3],[0,2],[0,1,3],[0,2]]\noutput: other.\nexampl [[1,3],[0,2],[1,3],[0,2]]\noutput: sets: {0, 2} 3}.\n\xc2\xa0\nconstraints:\n\ngraph.length n\n1 graph[u].length graph[u][i] 1\ngraph[u]\xc2\xa0do contain\xc2\xa0u.\nal unique.\nif u.\n\n' k.\nfor arr.length, arr[j].\nreturn considered. answer[0] answer[1] arr[j].\n\xc2\xa0\nexampl [1,2,3,5], [2,5]\nexplanation: are:\n1/5, 1/3, 2/5, 1/2, 3/5, 2/3.\nthe 2/5.\n\nexampl [1,7], [1,7]\n\n\xc2\xa0\nconstraints:\n\n2 104\narr[0] 1\narr[i] 0.\nall (arr.length flights. flight flights[i] toi, pricei] fromi pricei.\ny src, dst, cheapest src dst stops. [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], 700\nexplanation:\nth 600 700.\nnote [0,1,2,3] cheaper stops.\n\nexampl [[0,1,100],[1,2,100],[0,2,500]], 200\nexplanation:\nth 200.\n\nexampl 500\nexplanation:\nth 500.\n\n\xc2\xa0\nconstraints:\n\n1 flights.length 2)\nflights[i].length fromi, n\nfromi toi\n1 pricei cities.\n0 n\nsrc dst\n\n' 180 degrees, x. alone.\na rotation. example:\n\n0, themselves,\n2 mirrored),\n6 invalid.\n\ngiven 10] 9.\nnote unchang rotating.\n\nexampl pac-man 2-d [xtarget, ytarget] ghost ghosts, ghosts[i] ghost. integr coordinates.\neach still. action simultaneously.\ny escap you. ghost, escape.\nreturn [[1,0],[0,3]], catch you.\n\nexampl [2,0]\noutput: destination.\n\nexampl [[2,0]], you.\n\n\xc2\xa0\nconstraints:\n\n1 ghosts.length 100\nghosts[i].length location.\ntarget.length xtarget, ytarget tiles: domino tromino shape. shapes.\n\ngiven 7.\nin tiling, tile. occupi tile.\n\xc2\xa0\nexampl custom previously.\npermut sorted. property.\n\xc2\xa0\nexampl "cbad"\nexplanation: \n"a", "a". "d" "dcba", "cdba", "cbda" outputs.\n\nexampl "cbafg", "cbad"\n\n\xc2\xa0\nconstraints:\n\n1 order.length 26\n1 200\norder "abcde".\n\n\xc2\xa0\nexampl ["a","bb","acd","ace"]\noutput: s: "acd", "ace".\n\nexampl "dsahjpjauf", ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]\noutput: 50\n b'let f(x) x!. recal x! convention, 0! 1.\n\nfor f(11) 11! 39916800 end.\n\ngiven 0!, 1!, 2!, 3!, 4! 5\n\n\xc2\xa0\nconstraints:\n\n0 tic-tac-to game.\nth \'o\'. square.\nher tic-tac-toe:\n\nplay \'.\nthe characters.\n\'x\' squares, ones.\nth (non-empty) column, diagonal.\nth non-empty.\nno over.\n\n\xc2\xa0\nexampl ["o "]\noutput: "x".\n\nexampl ["xox"," moves.\n\nexampl ["xox","o o","xox"]\noutput: true\n\n\xc2\xa0\nconstraints:\n\nboard.length 3\nboard[i].length 3\nboard[i][j] right].\nth [2,1,4,3], requirements: [3].\n\nexampl [2,9,2,5,6], 7\n\n\xc2\xa0\nconstraints:\n\n1 goal, shift position.\n\nfor "bcdea" shift.\n\n\xc2\xa0\nexampl "cdeab"\noutput: "abced"\noutput: goal.length acycl (dag) follows: graph[i] graph[i][j]).\n\xc2\xa0\nexampl [[1,2],[3],[3],[]]\noutput: [[0,1,3],[0,2,3]]\nexplanation: paths: [[4,3,1],[3,2,4],[3],[4],[]]\noutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n\n\xc2\xa0\nconstraints:\n\nn graph.length\n2 15\n0 graph[i][j] n\ngraph[i][j] self-loops).\nal dag.\n\n' nums[k nums[k-1]]. afterward, entri worth point.\n\nfor [2,4,1,3,0], [1,3,0,2,4]. [no points], [one point], point].\n\nreturn [2,3,1,4,0]\noutput: below: \nk [2,3,1,4,0], 2\nk [3,1,4,0,2], 3\nk [1,4,0,2,3], [4,0,2,3,1], 4\nk [0,2,3,1,4], 3\nso score.\n\nexampl [1,3,0,2,4]\noutput: shifts.\nso glass glass, glasses, row.\xc2\xa0 cup\xc2\xa0of champagne.\nthen, champagn pour top.\xc2\xa0 topmost excess it.\xc2\xa0 on.\xc2\xa0 floor.)\nfor cup poured, full.\xc2\xa0 half now.\xc2\xa0 quarter pictur below.\n\nnow champagne, 0-indexed.)\n\xc2\xa0\nexampl query_row query_glass 0.00000\nexplanation: champang tower (which 0)). empty.\n\nexampl 0.50000\nexplanation: liquid. equally, champange.\n\nexampl 100000009, 33, 17\noutput: 1.00000\n\n\xc2\xa0\nconstraints:\n\n0 <=\xc2\xa0pour query_row\xc2\xa0< 100\n' nums2[i].\n\nfor [1,2,3,8], [5,6,7,4], [5,6,7,8].\n\nreturn increasing. possible.\nan arr[0] arr[1] arr[2] arr[arr.length [1,3,5,4], [1,2,3,7]\noutput: \nswap nums1[3] nums2[3]. are:\nnums1 4]\nwhich increasing.\n\nexampl [0,3,5,8,9], [2,1,4,6,9]\noutput: 1\n\n\xc2\xa0\nconstraints:\n\n2 105\nnums2.length nums1.length\n0 graph[i].\na outgo node.\nreturn [[1,2],[2,3],[5],[0],[5],[],[]]\noutput: [2,4,5,6]\nexplanation: above.\nnod them.\neveri 6.\nexampl [[1,2,3,4],[1,2],[3,4],[0,4],[]]\noutput: [4]\nexplanation:\nonli 4.\n\n\xc2\xa0\nconstraints:\n\nn graph.length\n1 graph[i].length 1\ngraph[i] self-loops.\nth 104].\n\n' space. stabl if:\n\nit or\nat stable.\n\ny hits, erasur apply. eras hits[i] (rowi, coli). location\xc2\xa0(if disappear. falls, bricks).\nreturn applied.\nnot does, drop.\n\xc2\xa0\nexampl [[1,0,0,0],[1,1,1,0]], hit [2]\nexplanation: grid:\n[[1,0,0,0],\n [1,1,1,0]]\nwe [0,1,1,0]]\nthe is:\n[[1,0,0,0],\n [0,0,0,0]]\nhenc [2].\n\nexampl [[1,0,0,0],[1,1,0,0]], [0,0]\nexplanation: [1,1,0,0]]\nwe [1,0,0,0]]\nall stable, same:\n[[1,0,0,0],\n [1,0,0,0]]\nnext, [0,0,0,0]]\nonc fall.\nhenc [0,0].\n\n\xc2\xa0\nconstraints:\n\nm 200\ngrid[i][j] 1.\n1 hits.length 104\nhits[i].length xi\xc2\xa0<= <=\xc2\xa0yi b'intern mors dashes, follows:\n\n\'a\' ".-",\n\'b\' "-...",\n\'c\' "-.-.", on.\n\nfor 26 below:\n[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]\ngiven letter.\n\nfor "cab" "-.-..--...", ".-", "-...". word.\n\nreturn have.\n\xc2\xa0\nexampl ["gin","zen","gig","msg"]\noutput: is:\n"gin" "--...-."\n"zen" "--...-."\n"gig" "--...--."\n"msg" "--...--."\nthere transformations: "--...-." "--...--.".\n\nexampl 12\nwords[i] average(a) average(b).\nreturn otherwise.\nnot average(arr) [1,2,3,4,5,6,7,8]\noutput: [1,4,5,8] 4.5.\n\nexampl [3,1]\noutput: wide widths[0] widths[1] on.\nyou pixels. then, where:\n\nresult[0] lines.\nresult[1] pixels.\n\n\xc2\xa0\nexampl [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], "abcdefghijklmnopqrstuvwxyz"\noutput: [3,60]\nexplanation: follows:\nabcdefghij wide\nklmnopqrst wide\nuvwxyz 60 wide\nther wide.\nexampl [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], "bbbcccdddaaa"\noutput: [2,4]\nexplanation: follows:\nbbbcccdddaa 98 wide\na wide.\n\xc2\xa0\nconstraints:\n\nwidths.length 26\n2 widths[i] blocks, prism. city' different.\nw building). 0-height increased. direction.\nreturn [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\noutput: 35\nexplanation: image.\nth is:\ngridnew [ [8, 7],\n [9, [[0,0,0],[0,0,0],[0,0,0]]\noutput: changing.\n\n\xc2\xa0\nconstraints:\n\nn grid[r].length\n2 soup: ml soup. operations:\n\nserv soup b,\nserv 75 and\nserv b.\n\nwhen serv soup, someone, 0.25. soup.\nnot ml' first.\nreturn 50\noutput: 0.62500\nexplanation: first.\nfor time.\nfor first.\nso 0.5 0.625.\n\nexampl 0.71875\n\n\xc2\xa0\nconstraints:\n\n0 b'sometim feeling. example:\n\n"hello" "heeellooo"\n"hi" "hiiii"\n\nin "heeellooo", same: "eee", "ll", "ooo".\nyou stretchi operation: more.\n\nfor "o" "hellooo", "helloo" "oo" "ll" "lllll" "helllllooo". "helllllooo", operations: "hellooo" "helllllooo" s.\n\nreturn stretchy.\n\xc2\xa0\nexampl ["hello", "hi", "helo"]\noutput: \nwe "heeellooo".\nw "helo" "heeellooo" more.\n\nexampl "zzzzzyyyyy", ["zzyy","zy","zyy"]\noutput: chalkboard.\nalic bob chalkboard, chalkboard loses. 0.\nalso, wins.\nreturn \nalic choices: 2]. wants, lose. lose.\n\nexampl 216\n\n' websit domain "discuss.leetcode.com" subdomains. "com", "leetcode.com"\xc2\xa0and "discuss.leetcode.com". "discuss.leetcode.com", "leetcode.com" "com" implicitly.\na count-pair "rep d1.d2.d3" d1.d2" rep d1.d2.d3 itself.\n\nfor "9001 discuss.leetcode.com" discuss.leetcode.com 9001 times.\n\ngiven cpdomains, subdomain input. cpdomain ["9001 discuss.leetcode.com"]\noutput: leetcode.com","9001 discuss.leetcode.com","9001 com"]\nexplanation: domain: "discuss.leetcode.com".\na discuss visited. ["900 google.mail.com", "50 yahoo.com", intel.mail.com", "5 wiki.org"]\noutput: ["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 "google.mail.com" 900 "yahoo.com" "intel.mail.com" "wiki.org" times.\nfor subdomains, "mail.com" 901 951 "org" cpdomain.length cpdomain[i].length 100\ncpdomain[i] "repi d1i.d2i.d3i" d1i.d2i" format.\nrepi 104].\nd1i, d2i, d3i yi], [[0,0],[0,1],[1,0],[0,2],[2,0]]\noutput: figure. largest.\n\nexampl [[1,0],[0,0],[0,1]]\noutput: 0.50000\n\n\xc2\xa0\nconstraints:\n\n3 50\n-50 50\nall subarrays. subarray.\nnot integer.\nreturn partitions. 10-6 [9,1,2,3,9], 20.00000\nexplanation: [9]. 20.\nwe example.\nthat worse.\n\nexampl 20.50000\n\n\xc2\xa0\nconstraints:\n\n1 (of tree) removed.\na [1,null,0,0,1]\noutput: [1,null,0,null,1]\nexplanation: \nonli "everi 1".\nthe diagram [1,0,1,0,0,0,1]\noutput: [1,null,1,null,1]\n\nexampl [1,1,0,1,1,0,1,0]\noutput: [1,1,0,1,1,null,1]\n\n\xc2\xa0\nconstraints:\n\nth 200].\nnode.v bu routes[i] forever.\n\nfor routes[0] forever.\n\ny initially), buse only.\nreturn [[1,2,7],[3,6,7]], [[7,12],[4,5,15],[6],[15,19],[9,12,13]], routes.length 500.\n1 routes[i].length 105\nall unique.\nsum(routes[i].length) routes[i][j] source, 2-dimension coordinates, "(1, "(2, 0.5)". "(13)" 0.5)" "(205)".\n\nreturn been.\nour extran "00", "0.0", "0.00", "001", "00.01", ".1".\nthe (occur comma.)\n\xc2\xa0\nexampl "(123)"\noutput: ["(1, 2.3)","(1, 23)","(1.2, 3)","(12, 3)"]\n\nexampl "(0123)"\noutput: ["(0, 1.23)","(0, 12.3)","(0, 123)","(0.1, 2.3)","(0.1, 23)","(0.12, 3)"]\nexplanation: 00, 0001 00.01 "(00011)"\noutput: 0.011)","(0.001, 1)"]\n\n\xc2\xa0\nconstraints:\n\n4 12\ns[0] s[s.length \')\'.\nthe values.\nreturn [0,1,2,3], [0,1,3]\noutput: [3] components.\n\nexampl [0,1,2,3,4], [0,3,1,4]\noutput: components.\n\n\xc2\xa0\nconstraints:\n\nth speed +1 drive instruct (accelerate) (reverse):\n\nwhen following:\n\n\t\nposit += speed\nspe *= 2\n\n\nwhen following:\n\t\nif -1\notherwis 1\n\n\tyour command "aar", -1.\ngiven there.\n\xc2\xa0\nexampl "aa".\nyour "aaara".\nyour paragraph banned, case-insensit lowercase.\n\xc2\xa0\nexampl "bob ball, flew hit.", ["hit"]\noutput: "ball"\nexplanation: \n"hit" word.\n"ball" does), non-ban paragraph. \nnote sensitive,\nthat punctuat "ball,"), banned.\n\nexampl "a.", paragraph.length 1000\nparagraph symbols: "!?\',;.".\n0 banned.length banned[i].length 10\nbanned[i] that:\n\nwords.length indices.length\nth character.\nfor indices[i], indices[i] (but including) words[i].\n\ngiven ["time", "me", "bell"]\noutput: "time#bell#" 5].\nwords[0] "time", indices[0] "time#bell#"\nwords[1] indices[1] "time#bell#"\nwords[2] "bell", indices[2] "time#bell#"\n\nexampl ["t"]\noutput: "t#" [0].\n\n\xc2\xa0\nconstraints:\n\n1 7\nwords[i] answer.length s.\nthe j), "loveleetcode", [3,2,1,0,1,0,0,1,2,2,1,0]\nexplanation: (0-indexed).\nth abs(0 abs(1 2.\nfor abs(4 abs(8 "aaab", [3,2,1,0]\n\n\xc2\xa0\nconstraints:\n\n1 fronts[i] backs[i] back. face zero).\naft card.\nreturn cards. [1,2,4,4,7], [1,3,4,1,3]\noutput: 2\nexplanation:\nif card, [1,3,4,4,7] [1,2,4,1,3].\n2 up.\nit cards.\n\nexampl 0\nexplanation:\nther 0.\n\n\xc2\xa0\nconstraints:\n\nn fronts.length backs.length\n1 fronts[i], 2000\n\n' 1.\nwe non-leaf children.\nreturn make. trees: 2]\nexampl [2,4,5,10]\noutput: 2].\n\xc2\xa0\nconstraints:\n\n1 only.\nw "goat latin" made-up latin.) goat latin follows:\n\nif (\'a\', \'u\'), "ma" word.\n\n\t\nfor "applema".\n\n\nif conson vowel), "ma".\n\t\nfor "goat" "oatgma".\n\n\nadd sentence, 1.\n\t\nfor on.\n\n\n\nreturn latin.\n\xc2\xa0\nexampl "i speak latin"\noutput: "imaa peaksmaaa oatgmaaaa atinlmaaaaa"\nexampl quick brown fox lazi "hetmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"\n\n\xc2\xa0\nconstraints:\n\n1 150\nsentenc spaces.\nsent social media website. age ages[i] person.\na request true:\n\nage[y] age[x] 7\nage[y] age[x]\nage[y] && 100\n\notherwise, y.\nnote themself.\nreturn made.\n\xc2\xa0\nexampl [16,16]\noutput: [16,17,18]\noutput: 17.\n\nexampl [20,30,100,110,120]\noutput: 120 110, 100.\n\n\xc2\xa0\nconstraints:\n\nn ages.length\n1 120\n\n' workers. arrays: difficulty, worker where:\n\ndifficulty[i] profit[i] difficulti job, and\nworker[j] worker[j]).\n\neveri $1, $3. $0.\n\nreturn jobs.\n\xc2\xa0\nexampl [2,4,6,8,10], [10,20,30,40,50], [4,5,6,7]\noutput: 100\nexplanation: [4,4,6,6] [20,20,30,30] separately.\n\nexampl [85,47,57], [24,66,99], [40,25,25]\noutput: difficulty.length\nn profit.length\nm worker.length\n1 difficulty[i], profit[i], worker[i] operation.\nan 1s.\n\xc2\xa0\nexampl 1s, bigger, [[1,1],[1,1]]\noutput: 500\ngrid[i][j] 1.\n" countuniquechars(s) "l", "t", "o", 5.\n\ngiven countuniquechars(t) s.\nnotic too.\n\xc2\xa0\nexampl "a","b","c","ab","bc" "abc".\neveri letters.\nsum countuniquechars("aba") 92\n\n\xc2\xa0\nconstraints:\n\n1 s\xc2\xa0of "abbxxxxzyy" "xxxx", and\xc2\xa0"yy".\na interval\xc2\xa0[start, end], where\xc2\xa0start\xc2\xa0and\xc2\xa0end\xc2\xa0denot end\xc2\xa0indic group. example,\xc2\xa0"xxxx"\xc2\xa0ha interval\xc2\xa0[3,6].\na considered\xc2\xa0large\xc2\xa0if characters.\nreturn\xc2\xa0th in\xc2\xa0increas "abbxxxxzzy"\noutput: [[3,6]]\nexplanation: "xxxx" groups.\n\nexampl "abcdddeeeeaabbbcd"\noutput: [[3,5],[6,9],[12,14]]\nexplanation: "ddd", "eeee", "bbb".\n\n\xc2\xa0\nconstraints:\n\n1 mask rules.\nemail address:\nan is:\n\na by\nth \'@\' symbol, somewher character).\n\nto email:\n\nth letters.\nth letters) "*****".\n\nphone number:\na 10-13 digits.\nth 0-3 beginning, countri code.\nsepar {\'+\', \'} way.\n\nto number:\n\nremov characters.\nth form:\n\t\n"***-***-xxxx" digits.\n"+*-***-***-xxxx" digit.\n"+**-***-***-xxxx" digits.\n"+***-***-***-xxxx" digits.\n\n\n"xxxx" number.\n\n\xc2\xa0\nexampl "leetcode@leetcode.com"\noutput: "l*****e@leetcode.com"\nexplanation: address.\nth lowercase, asterisks.\n\nexampl "ab@qq.com"\noutput: "a*****b@qq.com"\nexplanation: asterisks.\nnot middle.\n\nexampl "1(234)567-890"\noutput: "***-***-7890"\nexplanation: number.\nther digits.\nthus, "***-***-7890".\n\n\xc2\xa0\nconstraints:\n\n email:\n\t\n8 40\n symbol.\n\n\nif number:\n\t\n10 \'+\'.\n\n\n\n' horizontally, image.\nto reversed.\n\nfor [1,1,0] [0,1,1].\n\nto 0.\n\nfor [0,1,1] [1,0,0].\n\n\xc2\xa0\nexampl [[1,1,0],[1,0,1],[0,0,0]]\noutput: [[1,0,0],[0,1,0],[1,1,1]]\nexplanation: row: [[0,1,1],[1,0,1],[0,0,0]].\nthen, image: [[1,0,0],[0,1,0],[1,1,1]]\n\nexampl [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\noutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\nexplanation: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nthen [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\n\xc2\xa0\nconstraints:\n\nn 20\nimages[i][j] arrays, sources, targets, k.\nto operation:\n\ncheck sources[i] s.\nif occur, nothing.\notherwis targets[i].\n\nfor targets[i] "eeecd".\nal simultaneously, other. overlap.\n\nfor ["ab","bc"] "bc" overlap.\n\nreturn "cd"], ["eee", "ffff"]\noutput: "eeebffff"\nexplanation:\n"a" "eee".\n"cd" "ffff".\n\nexampl ["ab","ec"], ["eee","ffff"]\noutput: "eeecd"\nexplanation:\n"ab" "eee".\n"ec" nothing.\n\n\xc2\xa0\nconstraints:\n\n1 1000\nk indices.length sources.length targets.length\n1 indexes[i] s.length\n1 sources[i].length, targets[i].length letters.\nsources[i] edges.\ny nodes.\n\xc2\xa0\nexampl [[0,1],[0,2],[2,3],[2,4],[2,5]]\noutput: [8,12,6,10,10,10]\nexplanation: above.\nw dist(0,1) dist(0,2) dist(0,3) dist(0,4) dist(0,5)\nequ 8.\nhence, [1,1]\n\n\xc2\xa0\nconstraints:\n\n1 1\nedges[i].length bi\nth images, img1 img2, binary, values.\nw howev image. images.\nnot erased.\nreturn overlap.\n\xc2\xa0\nexampl [[1,1,0],[0,1,0],[0,1,0]], img2 [[0,0,0],[0,1,1],[0,0,1]]\noutput: unit.\n\nth (shown red).\n\n\nexampl [[1]], [[0]], img1.length img1[i].length\nn img2.length img2[i].length\n1 30\nimg1[i][j] 1.\nimg2[i][j] [x1, y1, x2, y2], (x1, y1) (x2, y2) corner. x-axis, y-axis.\ntwo positive. overlap.\ngiven rec1 rec2, [0,0,2,2], rec2 [1,1,3,3]\noutput: [0,0,1,1], [1,0,2,1]\noutput: [2,2,3,3]\noutput: false\n\n\xc2\xa0\nconstraints:\n\nrec1.length 4\nrec2.length rec1[i], rec2[i] 109\nrec1 area.\n\n' b'alic loos "21".\nalic draw, maxpts], maxpt outcom probabilities.\nalic points.\nansw 1.00000\nexplanation: 0.60000\nexplanation: stops.\nin possibilities, 21, 0.73278\n\n\xc2\xa0\nconstraints:\n\n0 upright. right.\naft second, right.\nwhen sides, forces.\nfor expend fallen domino.\ny where:\n\ndominoes[i] left,\ndominoes[i] and\ndominoes[i] pushed.\n\nreturn "rr.l"\noutput: "rr.l"\nexplanation: domino.\n\nexampl ".l.r...lr..l.."\noutput: "ll.rr.llrrll.."\n\n\xc2\xa0\nconstraints:\n\nn dominoes.length\n1 105\ndominoes[i] b'two x\xc2\xa0and y\xc2\xa0ar positions) that\xc2\xa0it y. equal.\nfor "tars"\xc2\xa0and "rats"\xc2\xa0ar (swap "rats" "arts" similar, "star" "tars", "rats", "arts".\ntogether, similarity: {"tars", "arts"} {"star"}.\xc2\xa0 "tars" similar.\xc2\xa0 group.\nw strs. there?\n\xc2\xa0\nexampl ["tars","rats","arts","star"]\noutput: ["omv","ovm"]\noutput: 300\nstrs[i] only.\nal other.\n\n' sum.\ngiven col\xc2\xa0grid\xc2\xa0of "magic square" subgrid there?\xc2\xa0 (each contiguous).\n\xc2\xa0\nexampl [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\noutput: square:\n\nwhil not:\n\nin [[8]]\noutput: 0\n\n\xc2\xa0\nconstraints:\n\nrow 1\xc2\xa0and rooms. room, unlocks, rooms.\ngiven rooms[i] rooms, [[1],[2],[3],[]]\noutput: 2.\nwe 3.\nwe 3.\nsinc [[1,3],[3,0,1],[2],[0]]\noutput: room.\n\n\xc2\xa0\nconstraints:\n\nn rooms.length\n2 rooms[i].length sum(rooms[i].length) rooms[i][j] "123456579". fibonacci-lik [123, 456, 579].\nformally, f[i] 231, (that type),\nf.length and\nf[i] f[i f.length 2.\n\nnote pieces, itself.\nreturn done.\n\xc2\xa0\nexampl "1101111"\noutput: [11,0,11,11]\nexplanation: [110, 111] "112358130"\noutput: impossible.\n\nexampl "0123"\noutput: "3" valid.\n\n\xc2\xa0\nconstraints:\n\n1 200\nnum b'thi problem.\ny secret.\ny master.guess(word) letters.\nthi type, (valu position) instead.\nfor calls, master.guess secret, case.\n\xc2\xa0\nexampl "acckzz", ["acckzz","ccbazz","eiowzz","abcczz"], numguess correctly.\nexplanation:\nmaster.guess("aaaaaa") "aaaaaa" wordlist.\nmaster.guess("acckzz") "acckzz" matches.\nmaster.guess("ccbazz") "ccbazz" matches.\nmaster.guess("eiowzz") "eiowzz" matches.\nmaster.guess("abcczz") "abcczz" matches.\nw "hamada", ["hamada","khaled"], correctly.\n\n\xc2\xa0\nconstraints:\n\n1 100\nwordlist[i].length 6\nwordlist[i] unique.\nsecret wordlist.\nnumguess editors. backspac character.\nnot empty.\n\xc2\xa0\nexampl "ab#c", "ad#c"\noutput: "ac".\n\nexampl "ab##", "c#d#"\noutput: "".\n\nexampl "a#c", characters.\n\n\xc2\xa0\nfollow mountain if:\n\narr.length 3\nthere that:\n\t\narr[0] arr[i arr[i]\narr[i] 1]\n\n\n\ngiven mountain. subarray.\n\xc2\xa0\nexampl [2,1,4,7,3,2,5]\noutput: [1,4,7,3,2] mountain.\n\n\xc2\xa0\nconstraints:\n\n1 up:\n\ncan groupsize, groupsiz cards.\ngiven hand[i] [1,2,3,6,2,3,4,7,8], alice' [1,2,3],[2,3,4],[6,7,8]\n\nexampl 4.\n\n\n\xc2\xa0\nconstraints:\n\n1 hand.length\n\n\xc2\xa0\nnote: 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\n" undirected, edge.\nreturn revisit edges.\n\xc2\xa0\nexampl [[1,2,3],[0],[0],[0]]\noutput: [1,0,2,0,3]\n\nexampl [[1],[0,2,4],[1,3,4],[2],[1,2]]\noutput: [0,1,4,2,3]\n\n\xc2\xa0\nconstraints:\n\nn 12\n0 <\xc2\xa0n\ngraph[i] i.\nif graph[a] graph[b] a.\nth length.\ncal shift() alphabet, (wrap \'a\').\n\nfor shift(\'a\') shift(\'t\') shift(\'z\') \'a\'.\n\nnow shifts[i] applied.\n\xc2\xa0\nexampl [3,5,9]\noutput: "rpl"\nexplanation: "abc".\naft "dbc".\nafter "igc".\naft "rpl", "gfd"\n\n\xc2\xa0\nconstraints:\n\n1 letters.\nshifts.length s.length\n0 seats[i] seat, (0-indexed).\nther sitting.\nalex maximized.\xc2\xa0\nreturn person.\n\xc2\xa0\nexampl [1,0,0,0,1,0,1]\noutput: alex seats[2]), 1.\nthus, [1,0,0,0]\noutput: seats[3]), away.\nthi seats.length 104\nseats[i]\xc2\xa0i or\xc2\xa01.\nat empty.\nat occupied.\n\n' rectangle[i] [xi1, yi1, xi2, yi2] (xi1, yi1) (xi2, yi2) corner.\ncalcul area. [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\noutput: rectangales, picture.\nfrom (1,1) (2,2), overlap.\nfrom (1,0) overlap.\n\nexampl [[0,0,1000000000,1000000000]]\noutput: (109 7), 49.\n\n\xc2\xa0\nconstraints:\n\n1 200\nrectanges[i].length 4\n0 xi1, yi2 